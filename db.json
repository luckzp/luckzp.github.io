{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/images/alipay.jpg","path":"images/alipay.jpg","modified":0,"renderable":0},{"_id":"themes/hexo-theme-next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","path":"images/apple-touch-icon-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","path":"images/favicon-16x16-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","path":"images/favicon-32x32-next.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/logo.svg","path":"images/logo.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/affix.js","path":"js/affix.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","path":"js/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/exturl.js","path":"js/exturl.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","path":"js/js.cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/motion.js","path":"js/motion.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","path":"js/next-boot.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/post-details.js","path":"js/post-details.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","path":"js/scroll-cookie.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","path":"js/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/utils.js","path":"js/utils.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","path":"js/schemes/muse.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","path":"js/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"source/images/profile.jpg","path":"images/profile.jpg","modified":0,"renderable":0}],"Cache":[{"_id":"themes/hexo-theme-next/.all-contributorsrc","hash":"43eb0149c78e464c695f0dd758bb8c59353182b3","modified":1556441360455},{"_id":"themes/hexo-theme-next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1532581002882},{"_id":"themes/hexo-theme-next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1532581002882},{"_id":"themes/hexo-theme-next/.eslintrc.json","hash":"d3c11de434171d55d70daadd3914bc33544b74b8","modified":1532581002882},{"_id":"themes/hexo-theme-next/.gitattributes","hash":"8454b9313cb1a97b63fb87e2d29daee497ce6249","modified":1532581002883},{"_id":"themes/hexo-theme-next/.gitignore","hash":"69e702b833c6aa9646ad24c45dd9cf00ab5ce6b9","modified":1556441360466},{"_id":"themes/hexo-theme-next/.stylintrc","hash":"3b7f9785e9ad0dab764e1c535b40df02f4ff5fd6","modified":1532581002886},{"_id":"themes/hexo-theme-next/.travis.yml","hash":"fb9ac54e875f6ea16d5c83db497f6bd70ae83198","modified":1532581002887},{"_id":"themes/hexo-theme-next/LICENSE.md","hash":"0a9c7399f102b4eb0a6950dd31264be421557c7d","modified":1556441360467},{"_id":"themes/hexo-theme-next/README.md","hash":"3f72e5a5051ca2bdaccdda684c46dc4fdb4413a6","modified":1556441360468},{"_id":"themes/hexo-theme-next/_config.yml","hash":"82877efc6d70a2de4b9b314366f09fa97329f6f8","modified":1556441360778},{"_id":"themes/hexo-theme-next/bower.json","hash":"3c1c82d1644f5690534e71feed8df82e563748e0","modified":1556441360469},{"_id":"themes/hexo-theme-next/crowdin.yml","hash":"4a53f5985e545c635cb56b2a57ed290cb8cf8942","modified":1532581002889},{"_id":"themes/hexo-theme-next/gulpfile.coffee","hash":"6407d9063bd88ede299ff7c2a59cf2c82e079476","modified":1556441360480},{"_id":"themes/hexo-theme-next/package.json","hash":"23449a55881f7316766c0fcf3ce4c93adbc6076b","modified":1556441360567},{"_id":"themes/hexo-theme-next/.git/tgitchangelist","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1556435645419},{"_id":"source/_discarded/Spring学习笔记2.md","hash":"8f48c6a7efeb77fdd32b7ea9788c6c7244134683","modified":1556435087509},{"_id":"source/_discarded/ajax学习.md","hash":"efcfcf026bf45ef9f11613730f7af2e5b0a95c9d","modified":1556435087511},{"_id":"source/_discarded/Untitled.md","hash":"c15a45d194fc22542da44ca4c0d68ce66de96849","modified":1556435087510},{"_id":"source/_discarded/pictureTest.md","hash":"64a202385218f4a521c7916e002a55cb9d64de02","modified":1556435087512},{"_id":"source/_discarded/出生啊.md","hash":"c3ae07316b2fb2639f9cbfbeb9016a80807a8083","modified":1556435087513},{"_id":"source/_discarded/十八回想.md","hash":"7b7bb095f19c5a969f71a725291b484565326262","modified":1556435087514},{"_id":"source/_drafts/自我提升总结.md","hash":"c614d79c02f1154b59c1571661b4da670ed46552","modified":1556435087516},{"_id":"source/_posts/01背包和完全背包问题.md","hash":"20b874daee027e2e324b1ffd575e854fb4519e0a","modified":1556435087518},{"_id":"source/_posts/TCP的拥塞控制机制.md","hash":"e1ca9466d0023f1f90a4a6efa7a9a5a7f7000bc2","modified":1556435087564},{"_id":"source/_posts/出生.md","hash":"bbf3d74f41a447409897539575334cb650ff3555","modified":1556435087586},{"_id":"source/_posts/快排里的Partition应用-找第K大的数字 .md","hash":"e934f276ac5d5e04c1e720b90d30257b704ec20f","modified":1556435087591},{"_id":"source/_posts/操作系统.md","hash":"0a6cf170645ce3a1603cc4f3246cbddc77759756","modified":1556435087592},{"_id":"source/_posts/校招笔试题目总结(二).md","hash":"9d43e2bfb9bd8dd926a7f2ab91ea7a0f186586ce","modified":1556435087593},{"_id":"source/_posts/校招笔试题目总结（一）.md","hash":"4f0121c4e00e8fa5a1f635e041a469822d96e6c0","modified":1556435087594},{"_id":"source/_posts/泛型类与泛型方法.md","hash":"33d7bc0e7bd700b9b0805b3c0c0d45983593aefd","modified":1556435087604},{"_id":"source/_posts/编程笔面试题.md","hash":"300e1a77f9d0ce72f3a9f7ad5ac3d6de39ddde72","modified":1556435087615},{"_id":"source/_posts/自我提升总结.md","hash":"f347202a50313ea3dc0e3f6ed5cc22b0ea3bd173","modified":1556435087617},{"_id":"source/_posts/计算机网络笔试题目总结.md","hash":"0853486ff123ac1e14ce0831d4cdc858d47c9d58","modified":1556435087619},{"_id":"source/about/index.md","hash":"2974d644ed3592b3c247c0cae5da42c7c15c6080","modified":1556435087624},{"_id":"source/categories/index.md","hash":"bf599f1968d28a0273d7b30aeb5da07b3013afc0","modified":1556435087625},{"_id":"source/tags/index.md","hash":"195395eeb6ba4b2200efe27550a40fa99f9c3ce2","modified":1556435087636},{"_id":"themes/hexo-theme-next/.git/COMMIT_EDITMSG","hash":"27635a534f9b9a49251f787ff1e52d705d84085f","modified":1556435645261},{"_id":"themes/hexo-theme-next/.git/FETCH_HEAD","hash":"f70867b8d2e16c0d678846dcf449e52fe88df48d","modified":1556441360365},{"_id":"themes/hexo-theme-next/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1532581002857},{"_id":"themes/hexo-theme-next/.git/ORIG_HEAD","hash":"a2afc2b83888b41bf8d3ffd6ea41e7fa78c306db","modified":1556441360441},{"_id":"themes/hexo-theme-next/.git/config","hash":"f1969a9b2e1128a528f7b846c2bc39a7f0984cdf","modified":1532581002863},{"_id":"themes/hexo-theme-next/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1532580977220},{"_id":"themes/hexo-theme-next/.git/index","hash":"fcd4acd9e4c50d366dd4e121a38770fe015b27c5","modified":1556441623856},{"_id":"themes/hexo-theme-next/.git/packed-refs","hash":"ec9e26f5e1eafa3eee7a2c7e77795875027d993a","modified":1532581002852},{"_id":"themes/hexo-theme-next/.github/CODE_OF_CONDUCT.md","hash":"f7ddb7faed8031a9f40eae4ee7bb48c1bc50fd14","modified":1556441360456},{"_id":"themes/hexo-theme-next/.github/CONTRIBUTING.md","hash":"78756d8a45b22bdaa51f12b06907bff44afee83e","modified":1556441360457},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE.md","hash":"1e212fe229bd659726b4a3bcf4b5b14e0310ba3a","modified":1532581002884},{"_id":"themes/hexo-theme-next/.github/PULL_REQUEST_TEMPLATE.md","hash":"66e529edef048f3fab87d9670fa8999f483292bf","modified":1556441360460},{"_id":"themes/hexo-theme-next/.github/auto_assign.yml","hash":"9fe0dbe3f6edc59bf10ea25b14eba0e92e2c8f42","modified":1556441360461},{"_id":"themes/hexo-theme-next/.github/config.yml","hash":"cbd06d0c40afa9fdf056765120e9085826b00d20","modified":1556441360461},{"_id":"themes/hexo-theme-next/.github/eslint-disable-bot.yml","hash":"e06053d417579ed967a94166deb6bda5ce41d805","modified":1556441360462},{"_id":"themes/hexo-theme-next/.github/lock.yml","hash":"4f1070097b614b24050f238694127e3573ce8472","modified":1556441360462},{"_id":"themes/hexo-theme-next/.github/mergeable.yml","hash":"1105a6eb0d4ee1b1bf1554c5c51a47160abed62a","modified":1556441360463},{"_id":"themes/hexo-theme-next/.github/release-drafter.yml","hash":"0f826b5ea4646008e2e147dca8b4842ecf96d093","modified":1556441360463},{"_id":"themes/hexo-theme-next/.github/stale.yml","hash":"85975c43d606c39b91c0ad32197154be9d482a09","modified":1556441360464},{"_id":"themes/hexo-theme-next/.github/support.yml","hash":"7ce2722d6904c31a086444c422dc49b6aa310651","modified":1556441360464},{"_id":"themes/hexo-theme-next/.github/topissuebot.yml","hash":"5091c3bc6f3df303d16d853ce65a302601c1e875","modified":1556441360465},{"_id":"themes/hexo-theme-next/.github/weekly-digest.yml","hash":"6db3bcad65c3156de298f6a3ffd3ba887af4aa4f","modified":1556441360465},{"_id":"themes/hexo-theme-next/docs/AGPL3.md","hash":"f463f95b169d64983f59fa6f3e4b6760290a0e6b","modified":1532581002890},{"_id":"themes/hexo-theme-next/docs/ALGOLIA-SEARCH.md","hash":"1e49c08b446678336b2eacc8bf581faca969f34b","modified":1556441360470},{"_id":"themes/hexo-theme-next/docs/AUTHORS.md","hash":"51a0a13da55ff3d596970b2f9ab4531c6b2211f2","modified":1532581002890},{"_id":"themes/hexo-theme-next/docs/DATA-FILES.md","hash":"9a1895c0a0db705c4c48f512e86917f9af1ec3fb","modified":1532581002891},{"_id":"themes/hexo-theme-next/docs/INSTALLATION.md","hash":"b74ef6fedf76cdb156e2265759ee0a789ddd49cc","modified":1532581002891},{"_id":"themes/hexo-theme-next/docs/LEANCLOUD-COUNTER-SECURITY.md","hash":"721a1aa9feed1b580ab99af8e69ed22699121e88","modified":1556441360471},{"_id":"themes/hexo-theme-next/docs/LICENSE.txt","hash":"ae5ad07e4f4106bad55535dba042221539e6c7f9","modified":1556441360724},{"_id":"themes/hexo-theme-next/docs/MATH.md","hash":"0540cd9c961b07931af9f38a83bc9a0f90cd5291","modified":1556441360472},{"_id":"themes/hexo-theme-next/docs/UPDATE-FROM-5.1.X.md","hash":"c9f2ed8e15c137b1885d9ca8b7197d9f457971e9","modified":1532581002893},{"_id":"themes/hexo-theme-next/languages/de.yml","hash":"79b3221344da335743b5ef5a82efa9338d64feb0","modified":1556441360481},{"_id":"themes/hexo-theme-next/languages/default.yml","hash":"ea5e6aee4cb14510793ac4593a3bddffe23e530c","modified":1532581002899},{"_id":"themes/hexo-theme-next/languages/en.yml","hash":"d66b8b48840443a4f9c72c7696a21e292f685a47","modified":1532581002900},{"_id":"themes/hexo-theme-next/languages/es.yml","hash":"db1a9f2af477212544c830c2dd986400e26ddd6a","modified":1556441360482},{"_id":"themes/hexo-theme-next/languages/fa.yml","hash":"3227072c7e1bfb16ec0517394b60632f4be921dd","modified":1556441360482},{"_id":"themes/hexo-theme-next/languages/fr.yml","hash":"2429c90dad5bb865e3a969be2b373f19b3a77b3b","modified":1556441360483},{"_id":"themes/hexo-theme-next/languages/id.yml","hash":"f3302a4dfdc9be38a52d6e081411574b1ea01671","modified":1556441360484},{"_id":"themes/hexo-theme-next/languages/it.yml","hash":"31eb878b53d60ff47e3e534cdd7a839c8801ac6e","modified":1556441360484},{"_id":"themes/hexo-theme-next/languages/ja.yml","hash":"3f25eca504ee5a519987b4402731f1bb7f5191c9","modified":1556441360485},{"_id":"themes/hexo-theme-next/languages/ko.yml","hash":"75f2fe142f76bf623e34ed3570598226f55f2b8b","modified":1556441360486},{"_id":"themes/hexo-theme-next/languages/nl.yml","hash":"08f16ce395dacc88847fc30dc6b985ce22fb8948","modified":1556441360487},{"_id":"themes/hexo-theme-next/languages/pt-BR.yml","hash":"c7de8b77f44e75be4f04423088a1c891537aa601","modified":1556441360488},{"_id":"themes/hexo-theme-next/languages/pt.yml","hash":"ca5072c967e5eb1178ffed91827459eda6e4e6e2","modified":1556441360489},{"_id":"themes/hexo-theme-next/languages/ru.yml","hash":"720b92a9ec075b68737d296b1f29ad8e01151c85","modified":1532581002903},{"_id":"themes/hexo-theme-next/languages/tr.yml","hash":"6d2f53d3687a7a46c67c78ab47908accd8812add","modified":1532581002903},{"_id":"themes/hexo-theme-next/languages/uk.yml","hash":"6320439c6e9ff81e5b8f8129ca16e9a744b37032","modified":1556441360489},{"_id":"themes/hexo-theme-next/languages/vi.yml","hash":"e2f0dd7f020a36aa6b73ed4d00dcc4259a7e5e9d","modified":1556441360490},{"_id":"themes/hexo-theme-next/languages/zh-CN.yml","hash":"069f15da910d6f9756be448167c07ea5aa5dc346","modified":1532581002904},{"_id":"themes/hexo-theme-next/languages/zh-HK.yml","hash":"c22113c4a6c748c18093dae56da5a9e8c5b963cd","modified":1532581002904},{"_id":"themes/hexo-theme-next/languages/zh-TW.yml","hash":"dbf4dd87716babb2db4f5332fae9ec190a6f636a","modified":1532581002904},{"_id":"themes/hexo-theme-next/layout/_layout.swig","hash":"ba786b1baba49021928e2e508da53f2fd1369b3f","modified":1556441360491},{"_id":"themes/hexo-theme-next/layout/archive.swig","hash":"61bc56e77e653684fc834f63dcbdadf18687c748","modified":1556441360561},{"_id":"themes/hexo-theme-next/layout/category.swig","hash":"ad0ac6a1ff341f8eab9570e7fb443962948c5f9d","modified":1556441360562},{"_id":"themes/hexo-theme-next/layout/index.swig","hash":"bdcc9f57adef49706b16b107791cacecbc23c1dc","modified":1532581002934},{"_id":"themes/hexo-theme-next/layout/page.swig","hash":"5d06ee8f477ffc39932d0251aa792ffcaf8faf14","modified":1556441360563},{"_id":"themes/hexo-theme-next/layout/post.swig","hash":"af74e97d57cf00cde6f8dbd4364f27910915454e","modified":1556441360564},{"_id":"themes/hexo-theme-next/layout/schedule.swig","hash":"e79f43df0e9a6cf48bbf00882de48c5a58080247","modified":1556441360565},{"_id":"themes/hexo-theme-next/layout/tag.swig","hash":"283519d4d5b67814412863a3e0212bac18bcc5a0","modified":1556441360566},{"_id":"themes/hexo-theme-next/scripts/merge-configs.js","hash":"5f96f63e86825fd7028c2522e4111103e261a758","modified":1532581002936},{"_id":"themes/hexo-theme-next/scripts/merge.js","hash":"39b84b937b2a9608b94e5872349a47200e1800ff","modified":1532581002937},{"_id":"themes/hexo-theme-next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1532581003008},{"_id":"themes/hexo-theme-next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1532581003008},{"_id":"themes/hexo-theme-next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1532581003008},{"_id":"source/images/alipay.jpg","hash":"056a5f5b7aae4ef2fcc49d1d7ae1d90bb8ea3468","modified":1556435087627},{"_id":"themes/hexo-theme-next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002981},{"_id":"source/_posts/C++/C++Review.md","hash":"242746ef663446359ba0ade4a2f1dbce6a18a60c","modified":1556435087519},{"_id":"source/_posts/C++/C++笔面试题目.md","hash":"8963b37c0ed19d5e3d6c2fe6afd892b12892b660","modified":1556435087523},{"_id":"source/_posts/C++/Matrix multiply.md","hash":"e633d97d92cbca0d193d21601b722763fab4a1f4","modified":1556435087537},{"_id":"source/_posts/C++/两个指针在算法中的应用.md","hash":"7b33a0fb459b1ee797fc2a7fd564e1283ea17dbc","modified":1556435087548},{"_id":"source/_posts/C++/线性表面试.md","hash":"6124663d92e16e80aaaf1dc4bbf3e80503097e0f","modified":1556435087550},{"_id":"source/_posts/JAVA/JVM内存分区.md","hash":"630f73cf3663ff2a6a941eff87b37063bc1898f4","modified":1556435087553},{"_id":"source/_posts/JAVA/SpringBoot中直接new对象为NULL值.md","hash":"f2786743eb9af5d90df6de697523d3672b6cfb9d","modified":1556455691369},{"_id":"source/_posts/JAVA/Spring学习笔记.md","hash":"64b275fa47098e354782644ba8ea69fe4e2003e2","modified":1556435087555},{"_id":"source/_posts/TED/Does money make you mean.md","hash":"d0255100e714a532f88114be5a9def9455fe3cee","modified":1556435087576},{"_id":"source/_posts/TED/How to see past your own perspective and find truth.md","hash":"0bee8f96b1f2914709f41d7639faef1373087ccf","modified":1556435087577},{"_id":"source/_posts/前端/CSS定位 文档流 浮动流.md","hash":"9759305f356ec0b43a5f15a012bd9b651b5396a8","modified":1556435087588},{"_id":"source/_posts/前端/ajax学习.md","hash":"39a427f802d8a4c6f5dabdc444d38b2a143f8512","modified":1556435087589},{"_id":"source/_posts/生活/校园照片.md","hash":"f337312fe4a85d9c0e460a311ba4fb0742c86320","modified":1556435087606},{"_id":"source/_posts/读书/万历王朝的兴衰史.md","hash":"4e6e98d0fb29886541af31bc056b36fd8b20b699","modified":1556435087621},{"_id":"source/_posts/读书/区块链初认识.md","hash":"74f2ef49caeb72095b4de0e2ccbf4c41f01f54dd","modified":1556435087623},{"_id":"themes/hexo-theme-next/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1532580977221},{"_id":"themes/hexo-theme-next/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1532580977221},{"_id":"themes/hexo-theme-next/.git/hooks/fsmonitor-watchman.sample","hash":"f7c0aa40cb0d620ff0bca3efe3521ec79e5d7156","modified":1532580977222},{"_id":"themes/hexo-theme-next/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1532580977222},{"_id":"themes/hexo-theme-next/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1532580977222},{"_id":"themes/hexo-theme-next/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1532580977223},{"_id":"themes/hexo-theme-next/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1532580977223},{"_id":"themes/hexo-theme-next/.git/hooks/pre-rebase.sample","hash":"288efdc0027db4cfd8b7c47c4aeddba09b6ded12","modified":1532580977224},{"_id":"themes/hexo-theme-next/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1532580977224},{"_id":"themes/hexo-theme-next/.git/hooks/prepare-commit-msg.sample","hash":"2584806ba147152ae005cb675aa4f01d5d068456","modified":1532580977224},{"_id":"themes/hexo-theme-next/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1532580977225},{"_id":"themes/hexo-theme-next/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1532580977225},{"_id":"themes/hexo-theme-next/.git/logs/HEAD","hash":"10e892415e961fc64e34cac7e2eb3f8c43a53f66","modified":1556441360853},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/bug-report.md","hash":"795b8ddb251da8e2327299d5f7dbf446fb9867c6","modified":1556441360458},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/custom-issue-template.md","hash":"245917ffaa296bc2d9a85444acf639077ca25944","modified":1556441360459},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/feature-request.md","hash":"59b2b45e151972bbe08582cde22f398e58832765","modified":1556441360459},{"_id":"themes/hexo-theme-next/.github/ISSUE_TEMPLATE/non-english.md","hash":"ae22e700b7c63c60746321719a20d34022ad78d9","modified":1556441360459},{"_id":"themes/hexo-theme-next/docs/ru/DATA-FILES.md","hash":"a51de08657f5946f4028b11373280ddc04639525","modified":1532581002894},{"_id":"themes/hexo-theme-next/docs/ru/INSTALLATION.md","hash":"7b2963daac19b0c14f98ebef375d5fbce8fc3f44","modified":1532581002894},{"_id":"themes/hexo-theme-next/docs/ru/README.md","hash":"aeb95129ab1da9ec41786bfa86dc32c739ee6358","modified":1556441360473},{"_id":"themes/hexo-theme-next/docs/ru/UPDATE-FROM-5.1.X.md","hash":"1a4e41adcf5831057f3f7b3025ed4a5ef7c442b4","modified":1532581002895},{"_id":"themes/hexo-theme-next/docs/zh-CN/ALGOLIA-SEARCH.md","hash":"aaf25d304793344e2d026062768c93005723f5c6","modified":1556441360474},{"_id":"themes/hexo-theme-next/docs/zh-CN/CODE_OF_CONDUCT.md","hash":"018a259694f4a8c7c384e1f323531442cba5fbf3","modified":1556441360475},{"_id":"themes/hexo-theme-next/docs/zh-CN/CONTRIBUTING.md","hash":"508caa37443407860d03f4d8bd56b007585125ef","modified":1556441360476},{"_id":"themes/hexo-theme-next/docs/zh-CN/DATA-FILES.md","hash":"67f4a987e7db0ab1ce1ea4c311f2961df07b6681","modified":1532581002896},{"_id":"themes/hexo-theme-next/docs/zh-CN/INSTALLATION.md","hash":"baca12cc24be082f1db28c7f283493569666321c","modified":1532581002896},{"_id":"themes/hexo-theme-next/docs/zh-CN/LEANCLOUD-COUNTER-SECURITY.md","hash":"b17fc344ff61603f83387c0f9b2b2189aae81d50","modified":1556441360476},{"_id":"themes/hexo-theme-next/docs/zh-CN/MATH.md","hash":"734b371a0dd910eb9fe087f50c95ce35340bb832","modified":1556441360477},{"_id":"themes/hexo-theme-next/docs/zh-CN/README.md","hash":"058c4c6f17c144d88d64c0b12cbd4f1c9fc61522","modified":1556441360478},{"_id":"themes/hexo-theme-next/docs/zh-CN/UPDATE-FROM-5.1.X.md","hash":"2095d1214a4e519a1d31b67b41c89080fa3285d3","modified":1532581002898},{"_id":"themes/hexo-theme-next/layout/_custom/head.swig","hash":"a223919d2e1bf17ca4d6abb2c86f2efca9883dc1","modified":1532581002905},{"_id":"themes/hexo-theme-next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532581002906},{"_id":"themes/hexo-theme-next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1532581002906},{"_id":"themes/hexo-theme-next/layout/_macro/post-collapse.swig","hash":"891ab67815969dd8736cb22fbbb3f791b8fff4e4","modified":1556441360493},{"_id":"themes/hexo-theme-next/layout/_macro/post.swig","hash":"31ba947998f0c962b04ae7f42f9d3db934209a79","modified":1556441612851},{"_id":"themes/hexo-theme-next/layout/_macro/sidebar.swig","hash":"91017f58f83d9505ce99109fffdc51c032bf017e","modified":1556441360495},{"_id":"themes/hexo-theme-next/layout/_partials/comments.swig","hash":"d0b9e841d55c974d02f43823a06a2627f8e46431","modified":1556441360495},{"_id":"themes/hexo-theme-next/layout/_partials/footer.swig","hash":"9a79dde1412b1b1473380e8b6cacfe1930ed321b","modified":1556441360497},{"_id":"themes/hexo-theme-next/layout/_partials/github-banner.swig","hash":"1ad13269b43b900356f3bdab7947d6a86f035a2c","modified":1556441360497},{"_id":"themes/hexo-theme-next/layout/_partials/pagination.swig","hash":"914155d5d758306cff405beefd4a07973fd8fc77","modified":1532581002914},{"_id":"themes/hexo-theme-next/layout/_partials/post-edit.swig","hash":"dee345054d564dd56f74bb143942d3edd1cb8150","modified":1556441360505},{"_id":"themes/hexo-theme-next/layout/_scripts/commons.swig","hash":"cccd93d30787675010b1a74ef02eb5b813ec1d96","modified":1556441360517},{"_id":"themes/hexo-theme-next/layout/_scripts/exturl.swig","hash":"c2e8f4b3a2bf991320ecc827dcdc227399ad5b51","modified":1556441360518},{"_id":"themes/hexo-theme-next/layout/_scripts/next-boot.swig","hash":"50c3ae6b50f173ae70f8c3312f7c6da1097eb9b6","modified":1556441360519},{"_id":"themes/hexo-theme-next/layout/_scripts/noscript.swig","hash":"efb3404a3303622f3be60944d9d1926972c5c248","modified":1556441360520},{"_id":"themes/hexo-theme-next/layout/_scripts/scroll-cookie.swig","hash":"8a992b7fe42b9c1a5eb9d937b0827aed91586d94","modified":1556441360525},{"_id":"themes/hexo-theme-next/layout/_scripts/vendors.swig","hash":"4130f995f0c4f81a44266194ecae9df96fad174c","modified":1556441360526},{"_id":"themes/hexo-theme-next/layout/_third-party/baidu-push.swig","hash":"87bcb495f7ddd81cc3fe2c2a886e51c08053019b","modified":1556441360538},{"_id":"themes/hexo-theme-next/layout/_third-party/bookmark.swig","hash":"4b93dc7ac0573c402aabcb5c933bbcb893b07c51","modified":1556441360539},{"_id":"themes/hexo-theme-next/layout/_third-party/chatra.swig","hash":"87182367d7954457cb2498bbfa9445c03c2d619e","modified":1556441360539},{"_id":"themes/hexo-theme-next/layout/_third-party/copy-code.swig","hash":"07fc0ae1a30c5aa9269d6efdaec598164b1d191c","modified":1556441360547},{"_id":"themes/hexo-theme-next/layout/_third-party/mermaid.swig","hash":"80dfc0879866e6512cb67590a3b2d8741a66f980","modified":1556441360553},{"_id":"themes/hexo-theme-next/layout/_third-party/needsharebutton.swig","hash":"7db4ad4a8dd5420dad2f6890f5299945df0af970","modified":1556441360554},{"_id":"themes/hexo-theme-next/layout/_third-party/pangu.swig","hash":"76f5933925670044ec65b454295ba7e0a8439986","modified":1556441360555},{"_id":"themes/hexo-theme-next/layout/_third-party/pdf.swig","hash":"4ae61c7efb16e962385bfe522a38c4d29cdcccbe","modified":1556441360556},{"_id":"themes/hexo-theme-next/layout/_third-party/quicklink.swig","hash":"7cc1294a5fbedf3502688248a433c358339e5ae0","modified":1556441360556},{"_id":"themes/hexo-theme-next/layout/_third-party/rating.swig","hash":"c476dc3693a9dd0be2d136a45b0d7fdef55d4d92","modified":1556441360557},{"_id":"themes/hexo-theme-next/layout/_third-party/schedule.swig","hash":"882cd0b68c493af1b6d945660f9c21085e006ffc","modified":1556441360558},{"_id":"themes/hexo-theme-next/layout/_third-party/tidio.swig","hash":"b44010cd577e4d063c3406772938c4b117ec7b7b","modified":1556441360561},{"_id":"themes/hexo-theme-next/scripts/filters/exturl.js","hash":"b19c7c1021e57367b3b3bbf5678381017ed5667d","modified":1556441360568},{"_id":"themes/hexo-theme-next/scripts/helpers/engine.js","hash":"cdb6152582313268d970ffeef99b4a8a7850f034","modified":1556441360710},{"_id":"themes/hexo-theme-next/scripts/helpers/next-url.js","hash":"a40ce6bc852bb4bff8b9f984fa064741dd151e96","modified":1556441360569},{"_id":"themes/hexo-theme-next/scripts/tags/button.js","hash":"95a520f6529424a03c7ead6dbfd5e626d672febb","modified":1556441360570},{"_id":"themes/hexo-theme-next/scripts/tags/center-quote.js","hash":"4519ab8e6898f2ee90d05cde060375462b937a7d","modified":1532581002938},{"_id":"themes/hexo-theme-next/scripts/tags/exturl.js","hash":"f9f25905adecfb8be49def4ff3b0b8bbc6955d84","modified":1556441360571},{"_id":"themes/hexo-theme-next/scripts/tags/full-image.js","hash":"a6b2264215c555c553b2c5db85fa90678798d0d5","modified":1556441360572},{"_id":"themes/hexo-theme-next/scripts/tags/group-pictures.js","hash":"23d839333422375e85d44e476f554faf49973a3c","modified":1556441360573},{"_id":"themes/hexo-theme-next/scripts/tags/include-raw.js","hash":"ab4a82a7246265717556c7a42f897430340b88cf","modified":1556441360573},{"_id":"themes/hexo-theme-next/scripts/tags/label.js","hash":"fc83f4e1be2c34e81cb79938f4f99973eba1ea60","modified":1556441360574},{"_id":"themes/hexo-theme-next/scripts/tags/mermaid.js","hash":"81134494ff0134c0dae1b3815caf6606fccd4e46","modified":1556441360575},{"_id":"themes/hexo-theme-next/scripts/tags/note.js","hash":"1fdf4f95810fdb983bfd5ad4c4f13fedd4ea2f8d","modified":1556441360575},{"_id":"themes/hexo-theme-next/scripts/tags/pdf.js","hash":"ab995f0fc60d60f637220e2651111b775b8a06de","modified":1556441360576},{"_id":"themes/hexo-theme-next/scripts/tags/tabs.js","hash":"72a5adbd8f300bee1d0c289367598ca06b2bed17","modified":1556441360577},{"_id":"themes/hexo-theme-next/scripts/tags/video.js","hash":"944293fec96e568d9b09bc1280d5dbc9ee1bbd17","modified":1556441360577},{"_id":"themes/hexo-theme-next/source/css/main.styl","hash":"5e7d28bc539e84f8b03e68df82292f7fc0f2d023","modified":1556441360650},{"_id":"themes/hexo-theme-next/source/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1532581002982},{"_id":"themes/hexo-theme-next/source/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1532581002982},{"_id":"themes/hexo-theme-next/source/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1556441360651},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1532581002983},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1532581002983},{"_id":"themes/hexo-theme-next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1532581002984},{"_id":"themes/hexo-theme-next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1532581002984},{"_id":"themes/hexo-theme-next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1532581002984},{"_id":"themes/hexo-theme-next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1532581002985},{"_id":"themes/hexo-theme-next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1532581002985},{"_id":"themes/hexo-theme-next/source/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1532581002985},{"_id":"themes/hexo-theme-next/source/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1532581002986},{"_id":"themes/hexo-theme-next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532581002986},{"_id":"themes/hexo-theme-next/source/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1532581002986},{"_id":"themes/hexo-theme-next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1532581002986},{"_id":"themes/hexo-theme-next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1532581002987},{"_id":"themes/hexo-theme-next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1532581002987},{"_id":"themes/hexo-theme-next/source/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1556441360652},{"_id":"themes/hexo-theme-next/source/js/affix.js","hash":"ad343aa406fd8181b5f310434817ce98fc2219e3","modified":1556441360704},{"_id":"themes/hexo-theme-next/source/js/algolia-search.js","hash":"84906eeae57bd06744dd20160b93eacf658f97e2","modified":1556441360703},{"_id":"themes/hexo-theme-next/source/js/exturl.js","hash":"c48aa4b3c0e578a807fd3661e6cd4f3890777437","modified":1556441360702},{"_id":"themes/hexo-theme-next/source/js/js.cookie.js","hash":"f11e84def0352b7dd6393f1b83e55a40ab468686","modified":1556441360701},{"_id":"themes/hexo-theme-next/source/js/motion.js","hash":"d0a6d9dbcc57159e54bbb1f683b86632ae0b78f0","modified":1556441360699},{"_id":"themes/hexo-theme-next/source/js/next-boot.js","hash":"696a0c2cf158001576d56b48195ec8e39e835b47","modified":1556441360698},{"_id":"themes/hexo-theme-next/source/js/post-details.js","hash":"7d309b771e86c7e22ce11cc25625481ef7d5985c","modified":1556441360697},{"_id":"themes/hexo-theme-next/source/js/scroll-cookie.js","hash":"c4867626afab749404daf321367f9b6b8e223f69","modified":1556441360695},{"_id":"themes/hexo-theme-next/source/js/scrollspy.js","hash":"68d3690152c89e7adb08bb35ec28dbda2bd93686","modified":1556441360694},{"_id":"themes/hexo-theme-next/source/js/utils.js","hash":"d58033a6a108981c81ac58ee321167047d7a25df","modified":1556441360692},{"_id":"themes/hexo-theme-next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002969},{"_id":"themes/hexo-theme-next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002969},{"_id":"themes/hexo-theme-next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002970},{"_id":"themes/hexo-theme-next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002980},{"_id":"themes/hexo-theme-next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1532581002980},{"_id":"themes/hexo-theme-next/.git/objects/36/16926369e44784a0e0c72ec9f4d8550a2d292b","hash":"b95cb83b165cff5d716295d0d9fa6a706378eb41","modified":1556441360813},{"_id":"themes/hexo-theme-next/.git/objects/0b/44ea629c39ac5c396d2a7705cd3fbc9709ad1f","hash":"bce1d5153a8973ed3996e3e25f5ff73fde2bb8f4","modified":1556441360728},{"_id":"themes/hexo-theme-next/.git/objects/70/d5ce04c1d3248c6a877571e96aad387086f74f","hash":"a2f89e32d6d355427a64ae72fdcdc2d01866d2a1","modified":1556435645233},{"_id":"themes/hexo-theme-next/.git/objects/7c/be17e7730bf13c2cdef6de58ee56fe4677bbb9","hash":"e3d18fc527a459ecef9362b65f410b218d77ce11","modified":1556435644967},{"_id":"themes/hexo-theme-next/.git/objects/aa/11eb50a970e4e1ff56bcc2e80a0c784cb555f5","hash":"383d52e80b00257a360de1e0988a566fc01ae751","modified":1556435645263},{"_id":"themes/hexo-theme-next/.git/objects/f4/147262cb0dcb26a704ee48e8a86e298732a965","hash":"73bc667249a5c5ba1f3445a2d6b042f63085a4c7","modified":1556441360784},{"_id":"themes/hexo-theme-next/.git/refs/heads/master","hash":"4fbadef6b3b7da8ad057db6c3341a461e5c113ab","modified":1556441360852},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.4.0","hash":"48dd2138567e9dd832f6adcbdf2e1945f999a59a","modified":1556441360349},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.4.1","hash":"ac845fb35dc632c804d5d2eebcd731ad4d4ddfac","modified":1556441360351},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.4.2","hash":"106bd960739a3bbb6142bd76625fcba8991d7abd","modified":1556441360353},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.5.0","hash":"b6c2091da7683b424070a8dd6d7e377dec7c8ea0","modified":1556441360355},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.6.0","hash":"bb68ffcace9a18d21a32989db9648c77881796a4","modified":1556441360357},{"_id":"themes/hexo-theme-next/.git/refs/tags/v6.7.0","hash":"b857a6c4428702973dc7b67a5c2a1e248653b49c","modified":1556441360358},{"_id":"themes/hexo-theme-next/.git/refs/tags/v7.0.0","hash":"2d4536d7701746b3624fa92eeddeb943c32094d8","modified":1556441360360},{"_id":"themes/hexo-theme-next/.git/refs/tags/v7.0.1","hash":"9779f7a264bcd264d2e6edaa173ff6a5a22f996a","modified":1556441360362},{"_id":"themes/hexo-theme-next/.git/refs/tags/v7.1.0","hash":"d4eb8a8fc73617512e52707a8696a911b067f12f","modified":1556441360364},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-badge.swig","hash":"4eb8e222dc337211efb0d3bbdb5e29af3e6ecdb8","modified":1532581002907},{"_id":"themes/hexo-theme-next/layout/_macro/menu/menu-item.swig","hash":"25aea3d764b952f3f6d28ab86d7212d138e892df","modified":1556441360492},{"_id":"themes/hexo-theme-next/layout/_partials/head/external-fonts.swig","hash":"b57bf9c865bed0f22157176a8085de168a1aef77","modified":1556441360498},{"_id":"themes/hexo-theme-next/layout/_partials/head/head-unique.swig","hash":"fd079a414ca0f42f4cddd00247a9d5a5f58c4d8e","modified":1556441360499},{"_id":"themes/hexo-theme-next/layout/_partials/head/head.swig","hash":"466e69a4b4fbdc57f33e60a16b0d87e494385e21","modified":1556441360500},{"_id":"themes/hexo-theme-next/layout/_partials/header/brand.swig","hash":"03f669356bbaa70144b743f3312178e1981ac3a8","modified":1556441360501},{"_id":"themes/hexo-theme-next/layout/_partials/header/index.swig","hash":"c909f6e96373c151dea325bcddfdd8c9522421b6","modified":1532581002913},{"_id":"themes/hexo-theme-next/layout/_partials/header/menu.swig","hash":"39c4ad0e36b7c1260da98ba345f7bd72a2ac0f2e","modified":1556441360502},{"_id":"themes/hexo-theme-next/layout/_partials/header/sub-menu.swig","hash":"e015c7d9b84062b60b15b36be3ef11929dd10943","modified":1556441360503},{"_id":"themes/hexo-theme-next/layout/_partials/page/breadcrumb.swig","hash":"2b905ddd5dea8558c3fd95aacad241da6b6800f4","modified":1556441360719},{"_id":"themes/hexo-theme-next/layout/_partials/page/page-header.swig","hash":"f46699a9daa5fef599733cbab35cb75cf7a05444","modified":1556441360718},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-copyright.swig","hash":"be6683db6a269d83bb0441d7cf74db63a240fa8a","modified":1556441360506},{"_id":"themes/hexo-theme-next/layout/_partials/post/post-related.swig","hash":"f331ad02beea8990066d32ad6ec9f859672c3615","modified":1556441360717},{"_id":"themes/hexo-theme-next/layout/_partials/post/reward.swig","hash":"f62b801c7999da67b4bdca9c5e373b9b5ed039dc","modified":1556441360506},{"_id":"themes/hexo-theme-next/layout/_partials/post/wechat-subscriber.swig","hash":"fb7727e8ec63a58238a7206bf70eb273c8879993","modified":1556441360507},{"_id":"themes/hexo-theme-next/layout/_partials/search/algolia-search.swig","hash":"2530de0f3125a912756f6c0e9090cd012134a4c5","modified":1556441360716},{"_id":"themes/hexo-theme-next/layout/_partials/search/index.swig","hash":"f14e9e8c27af82f1bfe794e252dec0d7e521f503","modified":1556441360513},{"_id":"themes/hexo-theme-next/layout/_partials/search/localsearch.swig","hash":"b2f0d247b213e4cf8de47af6a304d98070cc7256","modified":1532581002915},{"_id":"themes/hexo-theme-next/layout/_partials/search/swiftype.swig","hash":"31245e09ce0465b994cebd94223a531585c4eab4","modified":1556441360514},{"_id":"themes/hexo-theme-next/layout/_partials/share/add-this.swig","hash":"c609097b95eb6127c2784f47f2230e6e6efc0be2","modified":1556441360515},{"_id":"themes/hexo-theme-next/layout/_partials/share/baidushare.swig","hash":"54b43d406cf37932e7b60f46814e864d31b1842c","modified":1556441360516},{"_id":"themes/hexo-theme-next/layout/_partials/share/likely.swig","hash":"647e8677d1ccfb3f7918dd3ea2ff7078504a845d","modified":1556441360516},{"_id":"themes/hexo-theme-next/layout/_scripts/pages/post-details.swig","hash":"cf87ab778618a32119ec1c4ac2079a51385b1913","modified":1556441360521},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/gemini.swig","hash":"a62c93f19429f159bcf0c2e533ffc619aa399755","modified":1556441360522},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/mist.swig","hash":"3c548934b97cc426544947f7a2ae35c270b5e33f","modified":1556441360522},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/muse.swig","hash":"7ef07edd2a97a3774229990d2f0a6eefa31bd015","modified":1556441360523},{"_id":"themes/hexo-theme-next/layout/_scripts/schemes/pisces.swig","hash":"828eb9c47f34090c841a2e9a0b3f31b0e4ccf40a","modified":1556441360524},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/analytics-with-widget.swig","hash":"66d562b3778dbc839f7c00103bd0099c5d61602a","modified":1556441360527},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/application-insights.swig","hash":"83dd7df11b100bae38c9faab9a478f92149a0315","modified":1556441360528},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/baidu-analytics.swig","hash":"73576c9683d9ad9b124916dc6c660607fe7cc1fa","modified":1556441360529},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/busuanzi-counter.swig","hash":"2e1de38f44af00209129d4051b7ae307cb11ad68","modified":1556441360530},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/cnzz-analytics.swig","hash":"335005a9f8b36349f0ad0a7beeba6969c55fc7f7","modified":1556441360530},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/facebook-sdk.swig","hash":"53202062267391353d49f269e7eb74eb87d30921","modified":1556441360531},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/firestore.swig","hash":"8ab040fccba41675bc835973515530af8a51f8bd","modified":1556441360532},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/google-analytics.swig","hash":"54d7993ae773573ee103c22802b7e98b193e1a3a","modified":1556441360533},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/growingio.swig","hash":"623e73bedef067ac24a398ef27c8197295da872d","modified":1556441360533},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/index.swig","hash":"39928f358dd13d9fc1a4641800e57be157ecd815","modified":1556441360534},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/lean-analytics.swig","hash":"71fb01bcad43bc9410ab19190373b9f7e59215b5","modified":1556441360535},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-analytics.swig","hash":"d18c87d7839e7407e39acd2998bcc9e0b34611b0","modified":1556441360536},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/tencent-mta.swig","hash":"a22d1ea29a5ffe46199ab7d108a291a05af8d5b6","modified":1556441360537},{"_id":"themes/hexo-theme-next/layout/_third-party/analytics/vkontakte-api.swig","hash":"4cff8bf5c42c62f7f0ac1f0d70f839dae39ba77a","modified":1556441360538},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/changyan.swig","hash":"bc3fc9d053b3d1fc0cd3918bf9a629a6f38f6414","modified":1556441360540},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqus.swig","hash":"d685df1516cb138d7a83bac5d7878a1e0fa8bc04","modified":1556441360541},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/disqusjs.swig","hash":"8b4a94dd80b3bac7c5390c8a7fd377b88c2cb78e","modified":1556441360541},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitalk.swig","hash":"4e86e1ace90a70bb8862f5e6de9dbe7bfc046bee","modified":1556441360543},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/gitment.swig","hash":"9a4923d2aa5182531ea7a7fb9abe824450026208","modified":1556441360544},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/index.swig","hash":"b3818fd0b3028dadf341b6d0b180e1243683de6a","modified":1556441360544},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/livere.swig","hash":"1a5d94f5779a2ce13abc886dd78e0617f89c34b9","modified":1556441360545},{"_id":"themes/hexo-theme-next/layout/_third-party/comments/valine.swig","hash":"1b72c755101c9dfb85da13df9a0abccf37cd1dd2","modified":1556441360546},{"_id":"themes/hexo-theme-next/layout/_third-party/math/index.swig","hash":"43a20fa0e9ae2f4254f04813f9c619dd36b49ae5","modified":1556441360550},{"_id":"themes/hexo-theme-next/layout/_third-party/math/katex.swig","hash":"ea1c136f960667a0a13b334db497b9b19c41f629","modified":1556441360551},{"_id":"themes/hexo-theme-next/layout/_third-party/math/mathjax.swig","hash":"767ba29f258db5d2e5baf875a6f36ac1d44df6a3","modified":1556441360553},{"_id":"themes/hexo-theme-next/layout/_third-party/search/algolia-search.swig","hash":"143ef265c96a8ea2fb93c36c5ffb9c5e940f7693","modified":1556441360712},{"_id":"themes/hexo-theme-next/layout/_third-party/search/index.swig","hash":"078bd2d5815eb23e8c5f74467dc0042babea00ae","modified":1556441360559},{"_id":"themes/hexo-theme-next/layout/_third-party/search/localsearch.swig","hash":"d45ca53af17d1d83fd27f8ed0917a72f0060e1a9","modified":1556441360560},{"_id":"themes/hexo-theme-next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1532581002968},{"_id":"themes/hexo-theme-next/source/css/_mixins/Gemini.styl","hash":"07f7da320689f828f6e36a6123807964a45157a0","modified":1532581002968},{"_id":"themes/hexo-theme-next/source/css/_mixins/Pisces.styl","hash":"1aabac9e37a8f4451c86d09037b3a1f8b30eaf5e","modified":1556441360632},{"_id":"themes/hexo-theme-next/source/css/_mixins/base.styl","hash":"21a14a19149f1cb8e011c477f29dd1352675605b","modified":1556441360632},{"_id":"themes/hexo-theme-next/source/css/_variables/Gemini.styl","hash":"e9b0752f08398709e787546a246baca12b4c557f","modified":1556441360648},{"_id":"themes/hexo-theme-next/source/css/_variables/Mist.styl","hash":"a25408534f8fe6e321db4bbf9dd03335d648fe17","modified":1532581002979},{"_id":"themes/hexo-theme-next/source/css/_variables/Pisces.styl","hash":"da7049f3d9a157abe0ecc62611edcf43605ba84d","modified":1556441360648},{"_id":"themes/hexo-theme-next/source/css/_variables/base.styl","hash":"ebc95eeb8966d17cdc7dd0de009deaef1fe65064","modified":1556441360649},{"_id":"themes/hexo-theme-next/source/js/schemes/muse.js","hash":"ccc0c5cd4ec6f8159c98990ad83f11a5c0b0234c","modified":1556441360656},{"_id":"themes/hexo-theme-next/source/js/schemes/pisces.js","hash":"3eea56cc9ce47bb4760930c4c69cebf847a7fbb2","modified":1556441360696},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.bower.json","hash":"b4aefc910578d76b267e86dfffdd5121c8db9aec","modified":1532581002993},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1532581002994},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1532581002994},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1532581002994},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1532581002994},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1532581003006},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1532581003007},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1532581003007},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-218af9228c03e089e670f8fdb283f85e59454bf5.idx","hash":"9a346499b841eb0f7712ec210d0f41803a7097db","modified":1532581002721},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-73e221b7eeee8718f766836479b030c906255f65.idx","hash":"522fb27b07a58fa688bc6c6b272bded3cb6be510","modified":1556441360168},{"_id":"themes/hexo-theme-next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1532581003001},{"_id":"themes/hexo-theme-next/.git/logs/refs/heads/master","hash":"10e892415e961fc64e34cac7e2eb3f8c43a53f66","modified":1556441360853},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1532581002856},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/font-refactoring","hash":"3c4ee26997ed42dc37d51b248bb9a3f603e548f5","modified":1556441360278},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/master","hash":"fa87cf78cbd9d9c8dd5356b788aa32dabbe6204f","modified":1556441360274},{"_id":"themes/hexo-theme-next/.git/refs/remotes/origin/v6.x","hash":"81f1073f2bd2f1e1b3e13e260043918e8c458cae","modified":1556441360280},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top-sidebar.styl","hash":"5c0ca7f801859cff254d2f5b7d1a70d66ff61a8d","modified":1556441360578},{"_id":"themes/hexo-theme-next/source/css/_common/components/back-to-top.styl","hash":"463817cbbd804ce134cb3e7e721431cb0e1616f2","modified":1556441360579},{"_id":"themes/hexo-theme-next/source/css/_common/components/buttons.styl","hash":"9fd526db0527c71243f05e18086f937dc67b1c3e","modified":1556441360580},{"_id":"themes/hexo-theme-next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1532581002943},{"_id":"themes/hexo-theme-next/source/css/_common/components/components.styl","hash":"997058180065d986e05df72992cc2cbfd7febd7e","modified":1556441360580},{"_id":"themes/hexo-theme-next/source/css/_common/components/pagination.styl","hash":"a4c6ee546a94fd69e5b7a1e4c054ab8cacb73d2a","modified":1556441360593},{"_id":"themes/hexo-theme-next/source/css/_common/components/rainbow.styl","hash":"cfa64bd8ee2ff9f943673e339d69341e76fbf031","modified":1556441360604},{"_id":"themes/hexo-theme-next/source/css/_common/components/scrollbar.styl","hash":"afdd21533db18d846e1a2663b1199761b1bd2c1e","modified":1556441360604},{"_id":"themes/hexo-theme-next/source/css/_common/outline/outline.styl","hash":"1a4ac0d119f2126ef8951897338706edce112235","modified":1556441360627},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/base.styl","hash":"40144394fdfe05d400f39f6763f66f75479a2e34","modified":1556441360628},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/helpers.styl","hash":"35c6fd7eab3779bd9e38b7ba8825ab0c67a1be7a","modified":1556441360628},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/mobile.styl","hash":"9c6194177533619a6f6685dc7e890dcbec456241","modified":1556441360629},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/normalize.styl","hash":"fec36a14080104b5862e9f021eab117d87c5f7c5","modified":1556441360630},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/scaffolding.styl","hash":"a17e2b871a335f290afb392a08f94fd35f59c715","modified":1532581002967},{"_id":"themes/hexo-theme-next/source/css/_common/scaffolding/tables.styl","hash":"107f42aa590ec4ba0765a0bc5d735f0f09edc0ff","modified":1556441360631},{"_id":"themes/hexo-theme-next/source/css/_schemes/Gemini/index.styl","hash":"a609ff811f2b2764f5470236fe2fb1f3aa6ccba5","modified":1556441360633},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_base.styl","hash":"d0e9065b0dbbc01811259f0597d1790268b4881b","modified":1532581002971},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_header.styl","hash":"8da8416213127595dfc4d2b358639194647e7bd3","modified":1556441360634},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1532581002971},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_menu.styl","hash":"40f266e24af4dedc9497056ab18ebcfda38dd47d","modified":1556441360635},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"06d9d00257abd28414ec0b746f866bf9911cf5ec","modified":1556441360636},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1556441360636},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/index.styl","hash":"25f05ed8da68d034dce7f06e0f20f6cd55841070","modified":1556441360638},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_layout.styl","hash":"04706657af638f2746ae59520e6fc78577c7682c","modified":1556441360639},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_logo.styl","hash":"157e6915dcf5990566e463acffa71043b2651c07","modified":1556441360640},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_menu.styl","hash":"234b44cfd03f9c9e3e179ff5fd698ac876341913","modified":1556441360641},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/_search.styl","hash":"6aee54cd5a20181e18596565356bd54c66e33823","modified":1556441360641},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1556441360642},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_brand.styl","hash":"b9619c9827f969ca2e2f5878552362a7b858918f","modified":1556441360643},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_layout.styl","hash":"e73d6da74c5755442e831d8fd7d922c5b32bd892","modified":1556441360644},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_menu.styl","hash":"0b3001909f3446843b226030524ea8498d4d8997","modified":1556441360645},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sidebar.styl","hash":"5b5e0a02a7bf63de9efcd33a4e482939cce5822d","modified":1556441360645},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/_sub-menu.styl","hash":"0d6f0df798449b710e1e5dbd43d470089b2a3c95","modified":1556441360646},{"_id":"themes/hexo-theme-next/source/css/_schemes/Pisces/index.styl","hash":"adb7379f3b9001840eb38b260434e89365771a81","modified":1556441360647},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css","hash":"3655f1fdf1e584c4d8e8d39026093ca306a5a341","modified":1532581002995},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1532581002995},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/css/font-awesome.min.css","hash":"88af80502c44cd52ca81ffe7dc7276b7eccb06cf","modified":1532581002996},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1532581002999},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1532581003000},{"_id":"themes/hexo-theme-next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1532581003006},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/HEAD","hash":"cdae813550071d3c567c77ee9193dd1aea346fd8","modified":1532581002856},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/font-refactoring","hash":"dd740a6067bf1af99a17870ab791e1c0c3fea34a","modified":1556441360278},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/master","hash":"69177d7918e6c9050c04daea1b9002c282fcabc7","modified":1556441360276},{"_id":"themes/hexo-theme-next/.git/logs/refs/remotes/origin/v6.x","hash":"6f4d6520c09baaa6061680df970b5a1ae51bd0ab","modified":1556441360280},{"_id":"themes/hexo-theme-next/source/css/_common/components/footer/footer.styl","hash":"2df409df04fdb52d7234876a9f6e502edd4e3929","modified":1556441360581},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/github-banner.styl","hash":"a8f4d4b86acaa34c99111b2dde5d0779cc7e0de6","modified":1556441360582},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/header.styl","hash":"c9cfb4b99e1ec8ec9cf075cb761b8f7fa5fe63fd","modified":1556441360583},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1532581002945},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/menu.styl","hash":"33200f60bd6a8bbfc66dd49a239bcc75c2f564c1","modified":1556441360584},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-meta.styl","hash":"b8647d6140141b0a160607f6353e4d4594cca92e","modified":1556441360584},{"_id":"themes/hexo-theme-next/source/css/_common/components/header/site-nav.styl","hash":"3a0efe849587b34f20d4e260028dc799215b0bb3","modified":1556441360585},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/diff.styl","hash":"024e8ff40ca881c6fbf45712897e22f58a3811ab","modified":1556441360586},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/highlight.styl","hash":"9c1a082e6c1f96187a099c3f4cb5424c0c9fd06e","modified":1556441360587},{"_id":"themes/hexo-theme-next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1532581002947},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/archive.styl","hash":"e5a5f8747fdf2ca960e4e73c081b8952afd62224","modified":1556441360589},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/breadcrumb.styl","hash":"fa1cea6fcc3f552d57cc7d28380a304859139bf6","modified":1556441360590},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1532581002948},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/pages.styl","hash":"9a8fb61bd2d184de9d206e62ba8961d1845c5669","modified":1556441360590},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1532581002949},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/schedule.styl","hash":"c27527cdeb9e3a9f447f7238f442a5dc33fde4e6","modified":1556441360591},{"_id":"themes/hexo-theme-next/source/css/_common/components/pages/tag-cloud.styl","hash":"c97c819a65f6967485184399397601e5133deda6","modified":1556441360708},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-button.styl","hash":"62fbbd32cf5a99ae550c45c763a2c4813a138d01","modified":1532581002950},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-collapse.styl","hash":"f3b0d259e991ac86454ae5eac6bc94dc8691d8c9","modified":1556441360594},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-copyright.styl","hash":"fc94dd09b4245143b452d6cf2fc4c12134d99d6d","modified":1556441360594},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-eof.styl","hash":"a73346f999b31355075cd58637946a8950cf6f7e","modified":1556441360595},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-expand.styl","hash":"f14cefc99309934d4103a3aa785e1258d858813f","modified":1556441360596},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-gallery.styl","hash":"b6a241626783d2ac115d683fd59ec283af68e5bb","modified":1556441360597},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-meta.styl","hash":"d77f85d3af2d7090d84b28ab01c6a49f92eec647","modified":1556441360597},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-nav.styl","hash":"13d365ee626c01f17ec664b3f54f51d8b9ee7cf4","modified":1556441360598},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reading_progress.styl","hash":"4aad8e36178faaa71a767af0084d578df4c09f73","modified":1556441360599},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-reward.styl","hash":"ccd0b1309acff0c676fdcc848a8ae2d05f0369ab","modified":1556441360600},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-rtl.styl","hash":"b2495ae5e04dcca610aacadc47881d9e716cd440","modified":1532581002953},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1532581002953},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-title.styl","hash":"539fc0880b2e035e8316d5d4b423703195c1b7ba","modified":1556441360601},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-type.styl","hash":"c8009fd9598a661b7d23158b5121b6ac266939e9","modified":1556441360602},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post-widgets.styl","hash":"981795aad232c8bd3f52a0ed8720db696d18a234","modified":1556441360603},{"_id":"themes/hexo-theme-next/source/css/_common/components/post/post.styl","hash":"615fca7dff197a2ca3df674cf963ce70b8525985","modified":1556441360604},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"a5484d8436b2b7862faf6e7309a9e7b88cdd0027","modified":1556441360605},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"ab1776c5dc537beabb0ab81a0f04e08bebad070b","modified":1556441360606},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"03a4e75e963e3e7cc393d588b1495a88d52e0e40","modified":1556441360607},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-button.styl","hash":"b36eea093bd4b32056b5de6f370ff57e50b25a49","modified":1556441360707},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-dimmer.styl","hash":"e58bb8b7127aa21e8260493a425ec00fcb25d338","modified":1556441360608},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"7e2ba73073daaea0a18c3d67ff137dd683af7011","modified":1556441360609},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"9204c79c05d620ecd5d411cdf11e27441b6281dc","modified":1556441360610},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"0eadef0381f696de7f88d7dc5f0ddc3cd5d309b3","modified":1556441360611},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/sidebar.styl","hash":"3cb387fa70017f3c24a1a1884461d29deda54585","modified":1556441360612},{"_id":"themes/hexo-theme-next/source/css/_common/components/sidebar/site-state.styl","hash":"ed3a2960ebce7396d1893bb8e08c99c7d9259140","modified":1556441360613},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/blockquote-center.styl","hash":"fde59300ec38868676ff5ed495b9dc9b02d07ffc","modified":1556441360614},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/full-image.styl","hash":"2d58ad90f148e845bc7023751a7a13260600f8d6","modified":1532581002960},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1532581002960},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/label.styl","hash":"b43421291bf85b589e8d0ec853e238d36ab80631","modified":1556441360615},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/note.styl","hash":"020fac447d7a17c03e2802f0f724ae0738088354","modified":1556441360615},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/pdf.styl","hash":"3baeeb51cfe123e99235ee1816d0e1f6a97c7852","modified":1556441360616},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tabs.styl","hash":"54c5398c7bf5b8bd9f38a9ece1dd82a9255f9a30","modified":1556441360617},{"_id":"themes/hexo-theme-next/source/css/_common/components/tags/tags.styl","hash":"da7a21f5a2f7dcf4c5a4788d7670159ca4132b65","modified":1556441360617},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/algolia-search.styl","hash":"4305813408a1cd6aba764a7769b94b081d383d4f","modified":1556441360619},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/copy-code.styl","hash":"d9c244b1c3a09a7fccd3c3f732e6fb112a8cd565","modified":1556441360619},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitalk.styl","hash":"a01484e350ad5fc9b1fdfbfafb2ddd9687ad4d20","modified":1556441360620},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/gitment.styl","hash":"2fbe52f955da41c7a14eb09918bf86a252e4504f","modified":1556441360621},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/han.styl","hash":"2a1008f1044b450b806adc166754ba9513e68375","modified":1556441360622},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/localsearch.styl","hash":"ed8a12982c0497eeb9d7642781abeb801428f83d","modified":1556441360623},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/math.styl","hash":"6880467b4f6d7b057fb8291aa10966429a0a3bff","modified":1556441360624},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/needsharebutton.styl","hash":"35dc9f3990fadff3ea038d4e8ac75923219886ed","modified":1556441360624},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/related-posts.styl","hash":"9801977a23268e36c5deefd270423f6f1a0c3bb2","modified":1556441360625},{"_id":"themes/hexo-theme-next/source/css/_common/components/third-party/third-party.styl","hash":"7cf42f96ba6b249c75e00dad251ebacf7de61e6c","modified":1556441360626},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1532581002973},{"_id":"themes/hexo-theme-next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532581002974},{"_id":"themes/hexo-theme-next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"1f09be9bb38411f0629b58c3b23873589a6dbcaa","modified":1532581002976},{"_id":"themes/hexo-theme-next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1532581002998},{"_id":"source/images/profile.jpg","hash":"a9949063039582dc8e065da3e16e97a4f30f5829","modified":1556435087635},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-218af9228c03e089e670f8fdb283f85e59454bf5.pack","hash":"89456d2c11b1e47fdab5207317ff822911b156b6","modified":1556441360000},{"_id":"themes/hexo-theme-next/.git/objects/pack/pack-73e221b7eeee8718f766836479b030c906255f65.pack","hash":"b0208cd9866a29602942e7e0dd3c74991502e2c7","modified":1556441360000},{"_id":"public/content.json","hash":"144c6f7cb1065185241a90b20e61a1ebbc67678b","modified":1556455728485},{"_id":"public/about/index.html","hash":"08f2ebd6ea08a90a2befb974931564b68a380b95","modified":1556451023773},{"_id":"public/categories/index.html","hash":"5bc1600fbe60f3044a403c6f4b2a5a6e6fc9f4b5","modified":1556451023773},{"_id":"public/tags/index.html","hash":"c9e1a8ae604605cb829a7430137e5e8c7acaa39a","modified":1556451023774},{"_id":"public/2019/04/28/JAVA/SpringBoot中直接new对象为NULL值/index.html","hash":"6cfba97b6ec4c9b4590bf8428fc64fd0d95da03a","modified":1556455728522},{"_id":"public/2019/04/28/TED/How to see past your own perspective and find truth/index.html","hash":"0ce7dd585a8481a2ff91cdad282c165211229dc8","modified":1556451023774},{"_id":"public/2019/04/28/JAVA/Spring学习笔记/index.html","hash":"ffc49be5fef8bab703ec2274b54268cb01454aab","modified":1556451023774},{"_id":"public/2019/04/28/JAVA/JVM内存分区/index.html","hash":"c11a3986ac600c990e565de22b26824d943d8f08","modified":1556451023774},{"_id":"public/2018/07/01/出生/index.html","hash":"a7cfe66b457677d39d599a1f21aed3dfc537e852","modified":1556451023774},{"_id":"public/2018/03/26/C++/C++Review/index.html","hash":"28b0f7004c28d50399291e94b0e84a3f5b20fc39","modified":1556451023774},{"_id":"public/2017/11/20/读书/区块链初认识/index.html","hash":"82d5fcf889ac2f111709f0a3fe8e238036aa39a2","modified":1556451023774},{"_id":"public/2016/12/29/生活/校园照片/index.html","hash":"89dab1565b573a5705384092e395023e3745970d","modified":1556451023774},{"_id":"public/archives/page/3/index.html","hash":"05dc29d55e61a98f7cd5e1636e1743a08d0c7282","modified":1556451023774},{"_id":"public/archives/2016/index.html","hash":"a2ecf0d3213dd0c7a12428ada7af4916c56c0a93","modified":1556451023774},{"_id":"public/archives/2016/12/index.html","hash":"0da5c20fccbb64d7a257e68597972f60d17cc2b6","modified":1556451023774},{"_id":"public/archives/2017/09/index.html","hash":"e312d8a0365493425f27ef84a1e6a19e7ad08592","modified":1556451023774},{"_id":"public/archives/2017/10/index.html","hash":"4e93d2d438ebf307766152a50157b6fcba8a6203","modified":1556451023774},{"_id":"public/archives/2017/11/index.html","hash":"811da6117f5c7229972118462faff37a0c1ebf28","modified":1556451023774},{"_id":"public/archives/2018/index.html","hash":"81042155864ace35bcc4b0b833d015b7f6727231","modified":1556451023774},{"_id":"public/archives/2018/01/index.html","hash":"1b70f9b7ac2717c38dfd06ed637f79fe920cbaed","modified":1556451023775},{"_id":"public/archives/2018/03/index.html","hash":"448162f84827f8599d6ded1f6c766d6245100d95","modified":1556451023775},{"_id":"public/archives/2018/07/index.html","hash":"fd57df4eb936d4785179a84ebc4bd0b7056543c7","modified":1556451023775},{"_id":"public/archives/2018/12/index.html","hash":"f6d31efca9b4f5af8dbd894a42cb21b5af17cb18","modified":1556451023775},{"_id":"public/archives/2019/index.html","hash":"20916ee5c59eeb9005e3595907fa6658ace3b564","modified":1556451023775},{"_id":"public/archives/2019/04/index.html","hash":"c0b9b47c942afabb877b5d69e50faabd030bea9e","modified":1556451023775},{"_id":"public/tags/校招/index.html","hash":"dbd17bd3875f4eee2da31fd42e2e10563fbbbecb","modified":1556451023775},{"_id":"public/tags/计算机网络/index.html","hash":"a227a9efedaf272a7b0c2cb6f98f2a840c488d7b","modified":1556451023775},{"_id":"public/tags/生活/index.html","hash":"5e15bedb6e5577b4e5b3c2df07476c336e91c83b","modified":1556451023775},{"_id":"public/tags/leetcode/index.html","hash":"a64930544dd3564fc09afcbc38bd74eda68ce30e","modified":1556451023775},{"_id":"public/tags/JAVA/index.html","hash":"3043a610e39f2d010bdc60173dd0a7024aa25864","modified":1556451023775},{"_id":"public/tags/个人提升/index.html","hash":"f0dc45537dac6ccb539e7f857ad9e92bcb085f2c","modified":1556451023775},{"_id":"public/tags/C/index.html","hash":"3eb04a15b370c3e075e8bbd95cd766317d1bf21e","modified":1556451023775},{"_id":"public/tags/TED/index.html","hash":"83f88807dc50f4bc616e5a79c30b3d205c042ade","modified":1556451023775},{"_id":"public/tags/前端/index.html","hash":"958d8bda76849ead073fb0fc43fd59082e6dec96","modified":1556451023775},{"_id":"public/tags/读书/index.html","hash":"e8779742d39c0c8caeadf90013af25a3600f9e27","modified":1556451023775},{"_id":"public/2019/04/28/TED/Does money make you mean/index.html","hash":"09b49942f28f52c9d4d6dd08c65e5e3bd728eed1","modified":1556451023775},{"_id":"public/2019/04/28/C++/线性表面试/index.html","hash":"e40d876cd2ea157e93b8e27a670f5bcddf87943b","modified":1556451023775},{"_id":"public/2019/04/28/C++/Matrix multiply/index.html","hash":"e762155bc541b537d74ef74c21edde76a607db04","modified":1556451023775},{"_id":"public/2018/12/23/读书/万历王朝的兴衰史/index.html","hash":"1c322d8fcee5a51c5fc3f55caa9161d586bb3825","modified":1556451023776},{"_id":"public/2018/07/26/自我提升总结/index.html","hash":"de76c22a8bee95062cfa4f54be50674f0795b413","modified":1556451023776},{"_id":"public/2018/07/09/泛型类与泛型方法/index.html","hash":"e938ebd477e43356f753f2b2abd2e7920cefafcf","modified":1556451023776},{"_id":"public/2018/07/03/前端/ajax学习/index.html","hash":"2c4119386353ca05acfd2e39e33027db34d1da94","modified":1556451023776},{"_id":"public/2018/01/07/01背包和完全背包问题/index.html","hash":"84db7e7548010bf32d220153e7e3462317bc20ef","modified":1556451023776},{"_id":"public/2018/01/06/快排里的Partition应用-找第K大的数字 /index.html","hash":"e1692d98f9c29a042134cf6fee99a7f5578defbd","modified":1556451023776},{"_id":"public/2017/11/19/前端/CSS定位 文档流 浮动流/index.html","hash":"035743e56e42be7df7d147b807a00966f11bddb9","modified":1556451023776},{"_id":"public/2017/11/13/TCP的拥塞控制机制/index.html","hash":"84ddab2c97262c31b5ea3dbbf9f3b097f08d0c0e","modified":1556451023776},{"_id":"public/2017/10/15/操作系统/index.html","hash":"057b9a5e08bd95c3cb830f8d9d1b47a8f6a06982","modified":1556451023776},{"_id":"public/2017/10/05/编程笔面试题/index.html","hash":"38af338ef88ba549981a9ae7638ec95028d89ec1","modified":1556451023777},{"_id":"public/2017/09/18/C++/C++笔面试题目/index.html","hash":"63359db34a0b99eaa3f7e03e6fe10d63b5cdf926","modified":1556451023777},{"_id":"public/2017/09/11/C++/两个指针在算法中的应用/index.html","hash":"98bff2e2df3753fd9232d21df97e9c8af20ee1d2","modified":1556451023777},{"_id":"public/2017/09/07/校招笔试题目总结(二)/index.html","hash":"456b534dda04d5eca5df837c791ab2be889e5325","modified":1556451023777},{"_id":"public/2017/09/08/计算机网络笔试题目总结/index.html","hash":"55a47dc1efb2aeb1f31966e4bc330522ef78043b","modified":1556451023777},{"_id":"public/2017/09/04/校招笔试题目总结（一）/index.html","hash":"67572bcb655851b6f0168eb86d125d78f3f92780","modified":1556451023777},{"_id":"public/archives/index.html","hash":"ae7230250029d47fce9876ff91ba32724bf8edf7","modified":1556451023777},{"_id":"public/archives/page/2/index.html","hash":"9480ee0a2591484c39aded681061e2a69bf60209","modified":1556451023777},{"_id":"public/archives/2017/index.html","hash":"81811834ef997d6294658cc3a3f1102b27fc23cd","modified":1556451023777},{"_id":"public/index.html","hash":"266c750b9e977e03a511b61487568fa7b9b18f70","modified":1556455728522},{"_id":"public/page/2/index.html","hash":"a2974fc0d4a221cfcd3f7d83bbf763e1a8fb1ade","modified":1556451023777},{"_id":"public/page/3/index.html","hash":"7617220368f6ee70ca1e796e802ea3f8f78294a4","modified":1556451023777},{"_id":"public/images/algolia_logo.svg","hash":"45eeea0b5fba833e21e38ea10ed5ab385ceb4f01","modified":1556451023817},{"_id":"public/images/apple-touch-icon-next.png","hash":"2959dbc97f31c80283e67104fe0854e2369e40aa","modified":1556451023817},{"_id":"public/images/avatar.gif","hash":"18c53e15eb0c84b139995f9334ed8522b40aeaf6","modified":1556451023817},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1556451023817},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1556451023817},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1556451023817},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1556451023817},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1556451023817},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1556451023817},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1556451023817},{"_id":"public/images/favicon-16x16-next.png","hash":"943a0d67a9cdf8c198109b28f9dbd42f761d11c3","modified":1556451023818},{"_id":"public/images/favicon-32x32-next.png","hash":"0749d7b24b0d2fae1c8eb7f671ad4646ee1894b1","modified":1556451023818},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556451023818},{"_id":"public/images/logo.svg","hash":"169f56fd82941591dad3abd734a50ec7259be950","modified":1556451023818},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1556451023818},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1556451023818},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1556451023818},{"_id":"public/images/searchicon.png","hash":"025d64ba0160a3a2257dd2b3032b5f7c9dd9b82b","modified":1556451023818},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1556451023818},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1556451023818},{"_id":"public/images/alipay.jpg","hash":"056a5f5b7aae4ef2fcc49d1d7ae1d90bb8ea3468","modified":1556451024379},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1556451024380},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1556451024384},{"_id":"public/js/affix.js","hash":"a2aab233d99297435a5274bf512c3c753fe08e80","modified":1556451024396},{"_id":"public/js/algolia-search.js","hash":"1f7f10c579e7703d0f6acb8b73f3d78a07d0c623","modified":1556451024396},{"_id":"public/js/exturl.js","hash":"54825acc8de4793feac415be227b965428f4e97d","modified":1556451024396},{"_id":"public/js/js.cookie.js","hash":"e0afce539f1fb81d59e3c6f0a68d736e2fb45d93","modified":1556451024397},{"_id":"public/js/motion.js","hash":"a16bc0b701646bf6653484675f4d5dc0f892d184","modified":1556451024397},{"_id":"public/js/next-boot.js","hash":"e0615efab5f81ba0fd39c0527eac31144deac7ce","modified":1556451024397},{"_id":"public/js/post-details.js","hash":"0dde5e6d4547587662a3256317a9d5d1db507692","modified":1556451024397},{"_id":"public/js/scroll-cookie.js","hash":"d07b3776708d4ae79ed2037c4c7391d5c9b06b19","modified":1556451024397},{"_id":"public/js/scrollspy.js","hash":"fa3c92968bcdbcb8d95a1729f7659d9753cbd077","modified":1556451024397},{"_id":"public/js/utils.js","hash":"3c987de7cfb944c33e9e527f1214724c7aafc796","modified":1556451024397},{"_id":"public/js/schemes/muse.js","hash":"e9bfa6b343b67625f58757efce46ccdaac8f308c","modified":1556451024397},{"_id":"public/js/schemes/pisces.js","hash":"9eb63cba0327d3d11b6cbfcbe40b88e97a8378a3","modified":1556451024397},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1556451024397},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1556451024398},{"_id":"public/css/main.css","hash":"d615579670982bdfad87ae70958c96bce4b0123f","modified":1556451024398},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1556451024398},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1556451024398},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1556451024398},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1556451024399},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1556451024399},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1556451024399},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1556451024399},{"_id":"public/images/profile.jpg","hash":"a9949063039582dc8e065da3e16e97a4f30f5829","modified":1556451024421}],"Category":[],"Data":[],"Page":[{"title":"about","date":"2017-09-04T05:01:49.000Z","_content":"About Me","source":"about/index.md","raw":"---\ntitle: about\ndate: 2017-09-04 13:01:49\n---\nAbout Me","updated":"2019-04-28T07:04:47.624Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjv0ur0g00001bwwihfb6guuc","content":"<p>About Me</p>\n","site":{"data":{}},"excerpt":"","more":"<p>About Me</p>\n"},{"title":"分类","date":"2017-09-03T16:01:46.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ndate: 2017-09-04 00:01:46\ntype: \"categories\"\n---\n","updated":"2019-04-28T07:04:47.625Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cjv0ur0g40003bwwimx50mu06","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"标签","date":"2017-09-03T16:01:46.000Z","type":"tags","_content":"","source":"tags/index.md","raw":"---\ntitle: 标签\ndate: 2017-09-04 00:01:46\ntype: \"tags\"\n---","updated":"2019-04-28T07:04:47.636Z","path":"tags/index.html","comments":1,"layout":"page","_id":"cjv0ur0g60005bwwi4opa4y0j","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"自我提升总结","author":"Zhang Peng","date":"2018-07-26T03:10:00.000Z","_content":"","source":"_drafts/自我提升总结.md","raw":"title: 自我提升总结\nauthor: Zhang Peng\ntags: []\ncategories: []\ndate: 2018-07-26 11:10:00\n---\n","slug":"自我提升总结","published":0,"updated":"2019-04-28T07:04:47.516Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0fw0000bwwigxyrw4my","content":"","site":{"data":{}},"excerpt":"","more":""},{"layout":"post","title":"01背包和完全背包问题","date":"2018-01-07T13:27:00.000Z","comments":1,"reward":true,"_content":"### 01背包问题描述\n\n容量为m的背包和n个物品，每个物品都有各自的体积v和价值val，从这n 个物品中选择多个物品放在包里而物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？\n\n\n\n**一般同学们会考录到用贪心的算法通过求最大的性价比来填满背包，这样会有什么样的不妥之处了？**\n\n<!--more-->\n\n### 贪心与背包问题的不同\n\n- 首先说一下贪心是每一步都是最优的决策，就是每次方我都会放进去解决问题的目前最好的结果。\n- 贪心虽然会带来每一次最优但是不一定是整体最优。(比如说C的性价比最高，但是放了C就不能放别的了，总价值就不如放A和B的多了)\n- 背包可以从宏观上整体得到一个最优的结果。\n\n\n\n### 01背包问题解析\n\n- 问题的特点是：每种物品一件，可以选择放1或不放0。\n\n- 用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：`f[i][v] = max(f[i-1][v-p[i]] + w[i], f[i-1][v])`\n\n- 如果在这里第i件物品放的话就表明它是由第i-1的状态传递过来的并且加上新的价值w[i]，如果不放就表明这里是保持第i-1的状态没有增加新的价值。\n\n代码如下：\n\n```C\n for(i=0; i<=n; i++) dp[i][0] = 0;\n        for(i=0; i<=v; i++) dp[0][i] = 0;\n\n        for(i=1; i<=n; i++){\n            for(j=0; j<=v; j++){\n                dp[i][j] = dp[i-1][j];\n                if(j>=p[i]) dp[i][j] = max(dp[i-1][j], dp[i-1][j-p[i]]+w[i]);\n            }\n        }\n        printf(\"%d\\n\", dp[n][v]);\n    }\n\n```\n\n手工模拟代码：\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1f157poj20kk04h0w4.jpg)\n\n解释这个表：\n有三个物品 就用 (3,4), (4,5), (5,6) 表示（对应表左边）\n用 C(i)(j) 表示表C ，j 为横， i 为纵\n从 C(1)(1)开始，此时你只有一个物品 (3,4) 和一个 容量为 j = 1 的背包。\n因为 3 > 1 所以不能装入，所以此时背包内物品价值为 C(1)(1)= 0\n同理 C(1)(2)时，背包 j = 2，3 > 2，C(1)(2)= 0\nC(1)(3)时 背包大小为 3 刚好能装下这个大小为 3 的物品 所以C(1)(3) = 4\n之后因为只有物品 (3,4) 可选 所以包里价值都是 4\n…………\nC(3)(10)  的时候三种物品都可选，最佳组合是 (4,5) 和 (5,6)，所以C(3)(10) = 5 + 6 = 11.\n\n\n\n### 01背包代码优化\n\n原式子(二维的):  `f[i][v] = max{f[i-1][v-p[i]] + w[i], f[i-1][v]}`\n\n现在要改成一维的(空间优化):  `f[v] = max{f[v-p[i]] + w[i], f[v]}`\n\n注意上面的状态转移方程两边的是2个状态(左边的是这一状态  右边的是上一状态（二维的通过i可以看出来）)\n\n`f[i][v]`是由`f[i-1][v-c[i]]`推出来的,现在要把二维的改成一维的,即要推f[v],要保证f[v]由f[v-c[i]]推出来，如果v是顺序递增的,则相当于`f[i][v]`变得是由`f[i][v-c[i]]`推出来的,而不是由原来的`f[i-1][v-c[i]]`推的.\n\n具体分析见：[01背包问题 总结关于为什么01背包优化成1维数组后,内层循环是逆序的?](http://blog.csdn.net/xiajiawei0206/article/details/19933781)\n\n`f[i][v]`只与`f[i-1][v]`和`f[i-1][v-C[i]]`有关，即只和i-1时刻状态有关，所以我们只需要用一维数组f[]来保存i-1时的状态f[]。\n假设i-1时刻的f[]为{a0，a1，a2，…，av}，难么i时刻的f[]中第v个应该为max(av,av-C[i]+W[i])即max(f[v],f[v-C[i]]+W[i])，这就需要我们遍历V时逆序遍历，这样才能保证求i时刻f[v]时f[v-C[i]]是i-1时刻的值。如果正序遍历则当求f[v]时,其前面的f[0],f[1]，…，f[v-1]都已经改变过，里面存的都不是i-1时刻的值，这样求f[v]时利用f[v-C[i]]必定是错的值。最后f[V]即为最大价值.\n\n```c\nfor(i=0; i<=v; i++){\n            dp[i] = 0;\n        }\n        for(i=1; i<=n; i++){\n            for(j=v; j>=0; j--){\n                if(j>=p[i]) dp[j] = max_num(dp[j], dp[j-p[i]]+w[i]);\n            }\n        }\n        printf(\"%d\\n\", dp[v]);\n    }\n\n```\n\n\n\n### 完全背包问题描述\n\n容量为m的背包和n种物品，每个物品都有各自的体积v和价值val，每种物品都有无限件可用，将哪些物品装入背包物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？\n\n### 完全背包问题解析\n\n这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程：\n\n`f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<=v}`\n\n\n同样可以转换成一维数组来表示：\n\n伪代码如下：\n\n```c++\n    for (int i=1; i<=n; i++)  \n        for (int j=1; j<=v; j++)  \n        {  \n            if (p[i]<=j)  \n            {  \n                f[j]=max(f[j],f[j-p[i]]+w[i]);  \n            }             \n        }  \n      \n    cout<<f[v]<<endl;//输出最优解\n```\n\n# 顺序！\n\n想必大家看出了和01背包的区别，这里的内循环是顺序的，而01背包是逆序的。\n现在关键的是考虑：为何完全背包可以这么写？\n在次我们先来回忆下，01背包逆序的原因？是为了是max中的两项是前一状态值，这就对了。\n那么这里，我们顺序写，这里的max中的两项当然就是当前状态的值了，为何？\n因为每种背包都是无限的。当我们把i从1到N循环时，f[v]表示容量为v在前i种背包时所得的价值，这里我们要添加的不是前一个背包，而是当前背包。所以我们要考虑的当然是当前状态。\n\n","source":"_posts/01背包和完全背包问题.md","raw":"---\nlayout: post\ntitle: \"01背包和完全背包问题\"\ndate: 2018-01-07 21:27\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n### 01背包问题描述\n\n容量为m的背包和n个物品，每个物品都有各自的体积v和价值val，从这n 个物品中选择多个物品放在包里而物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？\n\n\n\n**一般同学们会考录到用贪心的算法通过求最大的性价比来填满背包，这样会有什么样的不妥之处了？**\n\n<!--more-->\n\n### 贪心与背包问题的不同\n\n- 首先说一下贪心是每一步都是最优的决策，就是每次方我都会放进去解决问题的目前最好的结果。\n- 贪心虽然会带来每一次最优但是不一定是整体最优。(比如说C的性价比最高，但是放了C就不能放别的了，总价值就不如放A和B的多了)\n- 背包可以从宏观上整体得到一个最优的结果。\n\n\n\n### 01背包问题解析\n\n- 问题的特点是：每种物品一件，可以选择放1或不放0。\n\n- 用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：`f[i][v] = max(f[i-1][v-p[i]] + w[i], f[i-1][v])`\n\n- 如果在这里第i件物品放的话就表明它是由第i-1的状态传递过来的并且加上新的价值w[i]，如果不放就表明这里是保持第i-1的状态没有增加新的价值。\n\n代码如下：\n\n```C\n for(i=0; i<=n; i++) dp[i][0] = 0;\n        for(i=0; i<=v; i++) dp[0][i] = 0;\n\n        for(i=1; i<=n; i++){\n            for(j=0; j<=v; j++){\n                dp[i][j] = dp[i-1][j];\n                if(j>=p[i]) dp[i][j] = max(dp[i-1][j], dp[i-1][j-p[i]]+w[i]);\n            }\n        }\n        printf(\"%d\\n\", dp[n][v]);\n    }\n\n```\n\n手工模拟代码：\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1f157poj20kk04h0w4.jpg)\n\n解释这个表：\n有三个物品 就用 (3,4), (4,5), (5,6) 表示（对应表左边）\n用 C(i)(j) 表示表C ，j 为横， i 为纵\n从 C(1)(1)开始，此时你只有一个物品 (3,4) 和一个 容量为 j = 1 的背包。\n因为 3 > 1 所以不能装入，所以此时背包内物品价值为 C(1)(1)= 0\n同理 C(1)(2)时，背包 j = 2，3 > 2，C(1)(2)= 0\nC(1)(3)时 背包大小为 3 刚好能装下这个大小为 3 的物品 所以C(1)(3) = 4\n之后因为只有物品 (3,4) 可选 所以包里价值都是 4\n…………\nC(3)(10)  的时候三种物品都可选，最佳组合是 (4,5) 和 (5,6)，所以C(3)(10) = 5 + 6 = 11.\n\n\n\n### 01背包代码优化\n\n原式子(二维的):  `f[i][v] = max{f[i-1][v-p[i]] + w[i], f[i-1][v]}`\n\n现在要改成一维的(空间优化):  `f[v] = max{f[v-p[i]] + w[i], f[v]}`\n\n注意上面的状态转移方程两边的是2个状态(左边的是这一状态  右边的是上一状态（二维的通过i可以看出来）)\n\n`f[i][v]`是由`f[i-1][v-c[i]]`推出来的,现在要把二维的改成一维的,即要推f[v],要保证f[v]由f[v-c[i]]推出来，如果v是顺序递增的,则相当于`f[i][v]`变得是由`f[i][v-c[i]]`推出来的,而不是由原来的`f[i-1][v-c[i]]`推的.\n\n具体分析见：[01背包问题 总结关于为什么01背包优化成1维数组后,内层循环是逆序的?](http://blog.csdn.net/xiajiawei0206/article/details/19933781)\n\n`f[i][v]`只与`f[i-1][v]`和`f[i-1][v-C[i]]`有关，即只和i-1时刻状态有关，所以我们只需要用一维数组f[]来保存i-1时的状态f[]。\n假设i-1时刻的f[]为{a0，a1，a2，…，av}，难么i时刻的f[]中第v个应该为max(av,av-C[i]+W[i])即max(f[v],f[v-C[i]]+W[i])，这就需要我们遍历V时逆序遍历，这样才能保证求i时刻f[v]时f[v-C[i]]是i-1时刻的值。如果正序遍历则当求f[v]时,其前面的f[0],f[1]，…，f[v-1]都已经改变过，里面存的都不是i-1时刻的值，这样求f[v]时利用f[v-C[i]]必定是错的值。最后f[V]即为最大价值.\n\n```c\nfor(i=0; i<=v; i++){\n            dp[i] = 0;\n        }\n        for(i=1; i<=n; i++){\n            for(j=v; j>=0; j--){\n                if(j>=p[i]) dp[j] = max_num(dp[j], dp[j-p[i]]+w[i]);\n            }\n        }\n        printf(\"%d\\n\", dp[v]);\n    }\n\n```\n\n\n\n### 完全背包问题描述\n\n容量为m的背包和n种物品，每个物品都有各自的体积v和价值val，每种物品都有无限件可用，将哪些物品装入背包物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？\n\n### 完全背包问题解析\n\n这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令`f[i][v]`表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程：\n\n`f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0<=k*c[i]<=v}`\n\n\n同样可以转换成一维数组来表示：\n\n伪代码如下：\n\n```c++\n    for (int i=1; i<=n; i++)  \n        for (int j=1; j<=v; j++)  \n        {  \n            if (p[i]<=j)  \n            {  \n                f[j]=max(f[j],f[j-p[i]]+w[i]);  \n            }             \n        }  \n      \n    cout<<f[v]<<endl;//输出最优解\n```\n\n# 顺序！\n\n想必大家看出了和01背包的区别，这里的内循环是顺序的，而01背包是逆序的。\n现在关键的是考虑：为何完全背包可以这么写？\n在次我们先来回忆下，01背包逆序的原因？是为了是max中的两项是前一状态值，这就对了。\n那么这里，我们顺序写，这里的max中的两项当然就是当前状态的值了，为何？\n因为每种背包都是无限的。当我们把i从1到N循环时，f[v]表示容量为v在前i种背包时所得的价值，这里我们要添加的不是前一个背包，而是当前背包。所以我们要考虑的当然是当前状态。\n\n","slug":"01背包和完全背包问题","published":1,"updated":"2019-04-28T07:04:47.518Z","photos":[],"link":"","_id":"cjv0ur0g20002bwwin3n3hoik","content":"<h3 id=\"01背包问题描述\"><a href=\"#01背包问题描述\" class=\"headerlink\" title=\"01背包问题描述\"></a>01背包问题描述</h3><p>容量为m的背包和n个物品，每个物品都有各自的体积v和价值val，从这n 个物品中选择多个物品放在包里而物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？</p>\n<p><strong>一般同学们会考录到用贪心的算法通过求最大的性价比来填满背包，这样会有什么样的不妥之处了？</strong></p>\n<a id=\"more\"></a>\n<h3 id=\"贪心与背包问题的不同\"><a href=\"#贪心与背包问题的不同\" class=\"headerlink\" title=\"贪心与背包问题的不同\"></a>贪心与背包问题的不同</h3><ul>\n<li>首先说一下贪心是每一步都是最优的决策，就是每次方我都会放进去解决问题的目前最好的结果。</li>\n<li>贪心虽然会带来每一次最优但是不一定是整体最优。(比如说C的性价比最高，但是放了C就不能放别的了，总价值就不如放A和B的多了)</li>\n<li>背包可以从宏观上整体得到一个最优的结果。</li>\n</ul>\n<h3 id=\"01背包问题解析\"><a href=\"#01背包问题解析\" class=\"headerlink\" title=\"01背包问题解析\"></a>01背包问题解析</h3><ul>\n<li><p>问题的特点是：每种物品一件，可以选择放1或不放0。</p>\n</li>\n<li><p>用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：<code>f[i][v] = max(f[i-1][v-p[i]] + w[i], f[i-1][v])</code></p>\n</li>\n<li><p>如果在这里第i件物品放的话就表明它是由第i-1的状态传递过来的并且加上新的价值w[i]，如果不放就表明这里是保持第i-1的状态没有增加新的价值。</p>\n</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=n; i++) dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=v; i++) dp[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;=v; j++)&#123;</span><br><span class=\"line\">               dp[i][j] = dp[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(j&gt;=p[i]) dp[i][j] = max(dp[i<span class=\"number\">-1</span>][j], dp[i<span class=\"number\">-1</span>][j-p[i]]+w[i]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, dp[n][v]);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>手工模拟代码：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1f157poj20kk04h0w4.jpg\" alt></p>\n<p>解释这个表：<br>有三个物品 就用 (3,4), (4,5), (5,6) 表示（对应表左边）<br>用 C(i)(j) 表示表C ，j 为横， i 为纵<br>从 C(1)(1)开始，此时你只有一个物品 (3,4) 和一个 容量为 j = 1 的背包。<br>因为 3 &gt; 1 所以不能装入，所以此时背包内物品价值为 C(1)(1)= 0<br>同理 C(1)(2)时，背包 j = 2，3 &gt; 2，C(1)(2)= 0<br>C(1)(3)时 背包大小为 3 刚好能装下这个大小为 3 的物品 所以C(1)(3) = 4<br>之后因为只有物品 (3,4) 可选 所以包里价值都是 4<br>…………<br>C(3)(10)  的时候三种物品都可选，最佳组合是 (4,5) 和 (5,6)，所以C(3)(10) = 5 + 6 = 11.</p>\n<h3 id=\"01背包代码优化\"><a href=\"#01背包代码优化\" class=\"headerlink\" title=\"01背包代码优化\"></a>01背包代码优化</h3><p>原式子(二维的):  <code>f[i][v] = max{f[i-1][v-p[i]] + w[i], f[i-1][v]}</code></p>\n<p>现在要改成一维的(空间优化):  <code>f[v] = max{f[v-p[i]] + w[i], f[v]}</code></p>\n<p>注意上面的状态转移方程两边的是2个状态(左边的是这一状态  右边的是上一状态（二维的通过i可以看出来）)</p>\n<p><code>f[i][v]</code>是由<code>f[i-1][v-c[i]]</code>推出来的,现在要把二维的改成一维的,即要推f[v],要保证f[v]由f[v-c[i]]推出来，如果v是顺序递增的,则相当于<code>f[i][v]</code>变得是由<code>f[i][v-c[i]]</code>推出来的,而不是由原来的<code>f[i-1][v-c[i]]</code>推的.</p>\n<p>具体分析见：<a href=\"http://blog.csdn.net/xiajiawei0206/article/details/19933781\" target=\"_blank\" rel=\"noopener\">01背包问题 总结关于为什么01背包优化成1维数组后,内层循环是逆序的?</a></p>\n<p><code>f[i][v]</code>只与<code>f[i-1][v]</code>和<code>f[i-1][v-C[i]]</code>有关，即只和i-1时刻状态有关，所以我们只需要用一维数组f[]来保存i-1时的状态f[]。<br>假设i-1时刻的f[]为{a0，a1，a2，…，av}，难么i时刻的f[]中第v个应该为max(av,av-C[i]+W[i])即max(f[v],f[v-C[i]]+W[i])，这就需要我们遍历V时逆序遍历，这样才能保证求i时刻f[v]时f[v-C[i]]是i-1时刻的值。如果正序遍历则当求f[v]时,其前面的f[0],f[1]，…，f[v-1]都已经改变过，里面存的都不是i-1时刻的值，这样求f[v]时利用f[v-C[i]]必定是错的值。最后f[V]即为最大价值.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=v; i++)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=v; j&gt;=<span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;=p[i]) dp[j] = max_num(dp[j], dp[j-p[i]]+w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, dp[v]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完全背包问题描述\"><a href=\"#完全背包问题描述\" class=\"headerlink\" title=\"完全背包问题描述\"></a>完全背包问题描述</h3><p>容量为m的背包和n种物品，每个物品都有各自的体积v和价值val，每种物品都有无限件可用，将哪些物品装入背包物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？</p>\n<h3 id=\"完全背包问题解析\"><a href=\"#完全背包问题解析\" class=\"headerlink\" title=\"完全背包问题解析\"></a>完全背包问题解析</h3><p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程：</p>\n<p><code>f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k*c[i]&lt;=v}</code></p>\n<p>同样可以转换成一维数组来表示：</p>\n<p>伪代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=v; j++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i]&lt;=j)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            f[j]=max(f[j],f[j-p[i]]+w[i]);  </span><br><span class=\"line\">        &#125;             </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;f[v]&lt;&lt;<span class=\"built_in\">endl</span>;<span class=\"comment\">//输出最优解</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"顺序！\"><a href=\"#顺序！\" class=\"headerlink\" title=\"顺序！\"></a>顺序！</h1><p>想必大家看出了和01背包的区别，这里的内循环是顺序的，而01背包是逆序的。<br>现在关键的是考虑：为何完全背包可以这么写？<br>在次我们先来回忆下，01背包逆序的原因？是为了是max中的两项是前一状态值，这就对了。<br>那么这里，我们顺序写，这里的max中的两项当然就是当前状态的值了，为何？<br>因为每种背包都是无限的。当我们把i从1到N循环时，f[v]表示容量为v在前i种背包时所得的价值，这里我们要添加的不是前一个背包，而是当前背包。所以我们要考虑的当然是当前状态。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"01背包问题描述\"><a href=\"#01背包问题描述\" class=\"headerlink\" title=\"01背包问题描述\"></a>01背包问题描述</h3><p>容量为m的背包和n个物品，每个物品都有各自的体积v和价值val，从这n 个物品中选择多个物品放在包里而物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？</p>\n<p><strong>一般同学们会考录到用贪心的算法通过求最大的性价比来填满背包，这样会有什么样的不妥之处了？</strong></p>","more":"<h3 id=\"贪心与背包问题的不同\"><a href=\"#贪心与背包问题的不同\" class=\"headerlink\" title=\"贪心与背包问题的不同\"></a>贪心与背包问题的不同</h3><ul>\n<li>首先说一下贪心是每一步都是最优的决策，就是每次方我都会放进去解决问题的目前最好的结果。</li>\n<li>贪心虽然会带来每一次最优但是不一定是整体最优。(比如说C的性价比最高，但是放了C就不能放别的了，总价值就不如放A和B的多了)</li>\n<li>背包可以从宏观上整体得到一个最优的结果。</li>\n</ul>\n<h3 id=\"01背包问题解析\"><a href=\"#01背包问题解析\" class=\"headerlink\" title=\"01背包问题解析\"></a>01背包问题解析</h3><ul>\n<li><p>问题的特点是：每种物品一件，可以选择放1或不放0。</p>\n</li>\n<li><p>用子问题定义状态：即f[i][v]表示前i件物品恰放入一个容量为v的背包可以获得的最大价值。则其状态转移方程便是：<code>f[i][v] = max(f[i-1][v-p[i]] + w[i], f[i-1][v])</code></p>\n</li>\n<li><p>如果在这里第i件物品放的话就表明它是由第i-1的状态传递过来的并且加上新的价值w[i]，如果不放就表明这里是保持第i-1的状态没有增加新的价值。</p>\n</li>\n</ul>\n<p>代码如下：</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=n; i++) dp[i][<span class=\"number\">0</span>] = <span class=\"number\">0</span>;</span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=v; i++) dp[<span class=\"number\">0</span>][i] = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">       <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">           <span class=\"keyword\">for</span>(j=<span class=\"number\">0</span>; j&lt;=v; j++)&#123;</span><br><span class=\"line\">               dp[i][j] = dp[i<span class=\"number\">-1</span>][j];</span><br><span class=\"line\">               <span class=\"keyword\">if</span>(j&gt;=p[i]) dp[i][j] = max(dp[i<span class=\"number\">-1</span>][j], dp[i<span class=\"number\">-1</span>][j-p[i]]+w[i]);</span><br><span class=\"line\">           &#125;</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">       <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, dp[n][v]);</span><br><span class=\"line\">   &#125;</span><br></pre></td></tr></table></figure>\n<p>手工模拟代码：</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1f157poj20kk04h0w4.jpg\" alt></p>\n<p>解释这个表：<br>有三个物品 就用 (3,4), (4,5), (5,6) 表示（对应表左边）<br>用 C(i)(j) 表示表C ，j 为横， i 为纵<br>从 C(1)(1)开始，此时你只有一个物品 (3,4) 和一个 容量为 j = 1 的背包。<br>因为 3 &gt; 1 所以不能装入，所以此时背包内物品价值为 C(1)(1)= 0<br>同理 C(1)(2)时，背包 j = 2，3 &gt; 2，C(1)(2)= 0<br>C(1)(3)时 背包大小为 3 刚好能装下这个大小为 3 的物品 所以C(1)(3) = 4<br>之后因为只有物品 (3,4) 可选 所以包里价值都是 4<br>…………<br>C(3)(10)  的时候三种物品都可选，最佳组合是 (4,5) 和 (5,6)，所以C(3)(10) = 5 + 6 = 11.</p>\n<h3 id=\"01背包代码优化\"><a href=\"#01背包代码优化\" class=\"headerlink\" title=\"01背包代码优化\"></a>01背包代码优化</h3><p>原式子(二维的):  <code>f[i][v] = max{f[i-1][v-p[i]] + w[i], f[i-1][v]}</code></p>\n<p>现在要改成一维的(空间优化):  <code>f[v] = max{f[v-p[i]] + w[i], f[v]}</code></p>\n<p>注意上面的状态转移方程两边的是2个状态(左边的是这一状态  右边的是上一状态（二维的通过i可以看出来）)</p>\n<p><code>f[i][v]</code>是由<code>f[i-1][v-c[i]]</code>推出来的,现在要把二维的改成一维的,即要推f[v],要保证f[v]由f[v-c[i]]推出来，如果v是顺序递增的,则相当于<code>f[i][v]</code>变得是由<code>f[i][v-c[i]]</code>推出来的,而不是由原来的<code>f[i-1][v-c[i]]</code>推的.</p>\n<p>具体分析见：<a href=\"http://blog.csdn.net/xiajiawei0206/article/details/19933781\" target=\"_blank\" rel=\"noopener\">01背包问题 总结关于为什么01背包优化成1维数组后,内层循环是逆序的?</a></p>\n<p><code>f[i][v]</code>只与<code>f[i-1][v]</code>和<code>f[i-1][v-C[i]]</code>有关，即只和i-1时刻状态有关，所以我们只需要用一维数组f[]来保存i-1时的状态f[]。<br>假设i-1时刻的f[]为{a0，a1，a2，…，av}，难么i时刻的f[]中第v个应该为max(av,av-C[i]+W[i])即max(f[v],f[v-C[i]]+W[i])，这就需要我们遍历V时逆序遍历，这样才能保证求i时刻f[v]时f[v-C[i]]是i-1时刻的值。如果正序遍历则当求f[v]时,其前面的f[0],f[1]，…，f[v-1]都已经改变过，里面存的都不是i-1时刻的值，这样求f[v]时利用f[v-C[i]]必定是错的值。最后f[V]即为最大价值.</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span>(i=<span class=\"number\">0</span>; i&lt;=v; i++)&#123;</span><br><span class=\"line\">            dp[i] = <span class=\"number\">0</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(i=<span class=\"number\">1</span>; i&lt;=n; i++)&#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span>(j=v; j&gt;=<span class=\"number\">0</span>; j--)&#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(j&gt;=p[i]) dp[j] = max_num(dp[j], dp[j-p[i]]+w[i]);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\\n\"</span>, dp[v]);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"完全背包问题描述\"><a href=\"#完全背包问题描述\" class=\"headerlink\" title=\"完全背包问题描述\"></a>完全背包问题描述</h3><p>容量为m的背包和n种物品，每个物品都有各自的体积v和价值val，每种物品都有无限件可用，将哪些物品装入背包物品体积总数不超过包的容量m 时，能够得到的最大价值是多少？</p>\n<h3 id=\"完全背包问题解析\"><a href=\"#完全背包问题解析\" class=\"headerlink\" title=\"完全背包问题解析\"></a>完全背包问题解析</h3><p>这个问题非常类似于01背包问题，所不同的是每种物品有无限件。也就是从每种物品的角度考虑，与它相关的策略已并非取或不取两种，而是有取0件、取1件、取2件……等很多种。如果仍然按照解01背包时的思路，令<code>f[i][v]</code>表示前i种物品恰放入一个容量为v的背包的最大权值。仍然可以按照每种物品不同的策略写出状态转移方程：</p>\n<p><code>f[i][v]=max{f[i-1][v-k*c[i]]+k*w[i]|0&lt;=k*c[i]&lt;=v}</code></p>\n<p>同样可以转换成一维数组来表示：</p>\n<p>伪代码如下：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i=<span class=\"number\">1</span>; i&lt;=n; i++)  </span><br><span class=\"line\">    <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> j=<span class=\"number\">1</span>; j&lt;=v; j++)  </span><br><span class=\"line\">    &#123;  </span><br><span class=\"line\">        <span class=\"keyword\">if</span> (p[i]&lt;=j)  </span><br><span class=\"line\">        &#123;  </span><br><span class=\"line\">            f[j]=max(f[j],f[j-p[i]]+w[i]);  </span><br><span class=\"line\">        &#125;             </span><br><span class=\"line\">    &#125;  </span><br><span class=\"line\">  </span><br><span class=\"line\"><span class=\"built_in\">cout</span>&lt;&lt;f[v]&lt;&lt;<span class=\"built_in\">endl</span>;<span class=\"comment\">//输出最优解</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"顺序！\"><a href=\"#顺序！\" class=\"headerlink\" title=\"顺序！\"></a>顺序！</h1><p>想必大家看出了和01背包的区别，这里的内循环是顺序的，而01背包是逆序的。<br>现在关键的是考虑：为何完全背包可以这么写？<br>在次我们先来回忆下，01背包逆序的原因？是为了是max中的两项是前一状态值，这就对了。<br>那么这里，我们顺序写，这里的max中的两项当然就是当前状态的值了，为何？<br>因为每种背包都是无限的。当我们把i从1到N循环时，f[v]表示容量为v在前i种背包时所得的价值，这里我们要添加的不是前一个背包，而是当前背包。所以我们要考虑的当然是当前状态。</p>"},{"layout":"post","title":"TCP的拥塞控制机制","date":"2017-11-13T10:58:00.000Z","comments":1,"reward":true,"_content":"拥塞控制（congestion control)是TCP协议的一项重要功能，TCP的拥塞控制机制是从端到端的角度，推测网络是否发生拥塞，如果推断网络发生拥塞，则立即将数据发送速率降下来，以便缓解网络拥塞。\n\n<!--more--> \n\nTCP的拥塞控制算法包括了慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）四部分。\n\n\n\n**慢启动（slow start）和拥塞避免（congestion avoidance）控制过程**： \n  -[1]. TCP连接初始化，将拥塞窗口cwind设置为1个报文段，即cwind=1； \n  -[2]. 执行慢开始算法，cwind按指数规律增长，直到cwind == ssthresh时，开始执行拥塞避免算法，cwind按线性规律增长； \n  -[3]. 当网络发生拥塞，把ssthresh值更新为拥塞前ssthresh值的一半，cwind重新设置为1，再按照 [2] 执行。\n\n![慢启动和拥塞避免](http://img.blog.csdn.net/20150925124844736)\n\n**例题：**\n\n设某TCP的拥塞窗口的慢启动门限值初始为8(单位为报文段，且最大报文段长度1KB)，当拥塞窗口上升到12时，网络会发生超时。按照以上给出的条件，第12次传输网拥塞窗口的大小为( )。\n\n- A. 5\n- B. 6\n- C. 7 \n- D. 8\n\n**解析：B**\n\n在慢启动和拥塞避免算法中，拥塞窗口初始值为1，窗口大小开始按指数增长。当拥塞窗口大于慢启动门限后，停止使用慢启动算法，改用拥塞避免算法。此时，慢启动的门限值初始为8，当拥塞窗口增大到8时改用拥塞避免算法，窗口大小按线性增长，毎次增长1个报文段。当增加到12时，出现超时，重新设置门限值为6(12的一半)，拥塞窗口再重新设为1，执行慢启动算法，到门限值为6时执行拥塞避免算法。按照上面的算法，拥塞窗口的变化为1、2、4、8、9、10、11、12、1、2、4、6、7、8、9...，从该序列可以看出，第12次传输时拥塞窗口大小为6。\n\n**注意：**在以上的序列中，6被加粗，原因是很多考生直接从4增加到8，导致误选D选项。原因是拥塞窗口的大小是与门限值有关的，在慢开始算法中不能直接变化为大千门限值，所以4只能最多增加到6，之后再执行拥塞避免算法。","source":"_posts/TCP的拥塞控制机制.md","raw":"---\nlayout: post\ntitle: \"TCP的拥塞控制机制\"\ndate: 2017-11-13 18:58\ncomments: true\nreward: true\ntags: \n\t- 计算机网络\n---\n拥塞控制（congestion control)是TCP协议的一项重要功能，TCP的拥塞控制机制是从端到端的角度，推测网络是否发生拥塞，如果推断网络发生拥塞，则立即将数据发送速率降下来，以便缓解网络拥塞。\n\n<!--more--> \n\nTCP的拥塞控制算法包括了慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）四部分。\n\n\n\n**慢启动（slow start）和拥塞避免（congestion avoidance）控制过程**： \n  -[1]. TCP连接初始化，将拥塞窗口cwind设置为1个报文段，即cwind=1； \n  -[2]. 执行慢开始算法，cwind按指数规律增长，直到cwind == ssthresh时，开始执行拥塞避免算法，cwind按线性规律增长； \n  -[3]. 当网络发生拥塞，把ssthresh值更新为拥塞前ssthresh值的一半，cwind重新设置为1，再按照 [2] 执行。\n\n![慢启动和拥塞避免](http://img.blog.csdn.net/20150925124844736)\n\n**例题：**\n\n设某TCP的拥塞窗口的慢启动门限值初始为8(单位为报文段，且最大报文段长度1KB)，当拥塞窗口上升到12时，网络会发生超时。按照以上给出的条件，第12次传输网拥塞窗口的大小为( )。\n\n- A. 5\n- B. 6\n- C. 7 \n- D. 8\n\n**解析：B**\n\n在慢启动和拥塞避免算法中，拥塞窗口初始值为1，窗口大小开始按指数增长。当拥塞窗口大于慢启动门限后，停止使用慢启动算法，改用拥塞避免算法。此时，慢启动的门限值初始为8，当拥塞窗口增大到8时改用拥塞避免算法，窗口大小按线性增长，毎次增长1个报文段。当增加到12时，出现超时，重新设置门限值为6(12的一半)，拥塞窗口再重新设为1，执行慢启动算法，到门限值为6时执行拥塞避免算法。按照上面的算法，拥塞窗口的变化为1、2、4、8、9、10、11、12、1、2、4、6、7、8、9...，从该序列可以看出，第12次传输时拥塞窗口大小为6。\n\n**注意：**在以上的序列中，6被加粗，原因是很多考生直接从4增加到8，导致误选D选项。原因是拥塞窗口的大小是与门限值有关的，在慢开始算法中不能直接变化为大千门限值，所以4只能最多增加到6，之后再执行拥塞避免算法。","slug":"TCP的拥塞控制机制","published":1,"updated":"2019-04-28T07:04:47.564Z","photos":[],"link":"","_id":"cjv0ur0g50004bwwisr7pk0k1","content":"<p>拥塞控制（congestion control)是TCP协议的一项重要功能，TCP的拥塞控制机制是从端到端的角度，推测网络是否发生拥塞，如果推断网络发生拥塞，则立即将数据发送速率降下来，以便缓解网络拥塞。</p>\n<a id=\"more\"></a> \n<p>TCP的拥塞控制算法包括了慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）四部分。</p>\n<p><strong>慢启动（slow start）和拥塞避免（congestion avoidance）控制过程</strong>：<br>  -[1]. TCP连接初始化，将拥塞窗口cwind设置为1个报文段，即cwind=1；<br>  -[2]. 执行慢开始算法，cwind按指数规律增长，直到cwind == ssthresh时，开始执行拥塞避免算法，cwind按线性规律增长；<br>  -[3]. 当网络发生拥塞，把ssthresh值更新为拥塞前ssthresh值的一半，cwind重新设置为1，再按照 [2] 执行。</p>\n<p><img src=\"http://img.blog.csdn.net/20150925124844736\" alt=\"慢启动和拥塞避免\"></p>\n<p><strong>例题：</strong></p>\n<p>设某TCP的拥塞窗口的慢启动门限值初始为8(单位为报文段，且最大报文段长度1KB)，当拥塞窗口上升到12时，网络会发生超时。按照以上给出的条件，第12次传输网拥塞窗口的大小为( )。</p>\n<ul>\n<li>A. 5</li>\n<li>B. 6</li>\n<li>C. 7 </li>\n<li>D. 8</li>\n</ul>\n<p><strong>解析：B</strong></p>\n<p>在慢启动和拥塞避免算法中，拥塞窗口初始值为1，窗口大小开始按指数增长。当拥塞窗口大于慢启动门限后，停止使用慢启动算法，改用拥塞避免算法。此时，慢启动的门限值初始为8，当拥塞窗口增大到8时改用拥塞避免算法，窗口大小按线性增长，毎次增长1个报文段。当增加到12时，出现超时，重新设置门限值为6(12的一半)，拥塞窗口再重新设为1，执行慢启动算法，到门限值为6时执行拥塞避免算法。按照上面的算法，拥塞窗口的变化为1、2、4、8、9、10、11、12、1、2、4、6、7、8、9…，从该序列可以看出，第12次传输时拥塞窗口大小为6。</p>\n<p><strong>注意：</strong>在以上的序列中，6被加粗，原因是很多考生直接从4增加到8，导致误选D选项。原因是拥塞窗口的大小是与门限值有关的，在慢开始算法中不能直接变化为大千门限值，所以4只能最多增加到6，之后再执行拥塞避免算法。</p>\n","site":{"data":{}},"excerpt":"<p>拥塞控制（congestion control)是TCP协议的一项重要功能，TCP的拥塞控制机制是从端到端的角度，推测网络是否发生拥塞，如果推断网络发生拥塞，则立即将数据发送速率降下来，以便缓解网络拥塞。</p>","more":"<p>TCP的拥塞控制算法包括了慢启动（slow start）、拥塞避免（congestion avoidance）、快速重传（fast retransmit）和快速恢复（fast recovery）四部分。</p>\n<p><strong>慢启动（slow start）和拥塞避免（congestion avoidance）控制过程</strong>：<br>  -[1]. TCP连接初始化，将拥塞窗口cwind设置为1个报文段，即cwind=1；<br>  -[2]. 执行慢开始算法，cwind按指数规律增长，直到cwind == ssthresh时，开始执行拥塞避免算法，cwind按线性规律增长；<br>  -[3]. 当网络发生拥塞，把ssthresh值更新为拥塞前ssthresh值的一半，cwind重新设置为1，再按照 [2] 执行。</p>\n<p><img src=\"http://img.blog.csdn.net/20150925124844736\" alt=\"慢启动和拥塞避免\"></p>\n<p><strong>例题：</strong></p>\n<p>设某TCP的拥塞窗口的慢启动门限值初始为8(单位为报文段，且最大报文段长度1KB)，当拥塞窗口上升到12时，网络会发生超时。按照以上给出的条件，第12次传输网拥塞窗口的大小为( )。</p>\n<ul>\n<li>A. 5</li>\n<li>B. 6</li>\n<li>C. 7 </li>\n<li>D. 8</li>\n</ul>\n<p><strong>解析：B</strong></p>\n<p>在慢启动和拥塞避免算法中，拥塞窗口初始值为1，窗口大小开始按指数增长。当拥塞窗口大于慢启动门限后，停止使用慢启动算法，改用拥塞避免算法。此时，慢启动的门限值初始为8，当拥塞窗口增大到8时改用拥塞避免算法，窗口大小按线性增长，毎次增长1个报文段。当增加到12时，出现超时，重新设置门限值为6(12的一半)，拥塞窗口再重新设为1，执行慢启动算法，到门限值为6时执行拥塞避免算法。按照上面的算法，拥塞窗口的变化为1、2、4、8、9、10、11、12、1、2、4、6、7、8、9…，从该序列可以看出，第12次传输时拥塞窗口大小为6。</p>\n<p><strong>注意：</strong>在以上的序列中，6被加粗，原因是很多考生直接从4增加到8，导致误选D选项。原因是拥塞窗口的大小是与门限值有关的，在慢开始算法中不能直接变化为大千门限值，所以4只能最多增加到6，之后再执行拥塞避免算法。</p>"},{"title":"出生","author":"Zhang Peng","date":"2018-07-01T15:09:00.000Z","_content":"\n1996年这一年世界第一只“克隆羊”多利诞生，各种不间断的热点事件，但这些好像都无关紧要。这一年，我出生了。\n\n<!--more--> \n\n\n我出生在地球，为什么我没有出生在其他星球？难道其他星球没有和我一样的存在？我出生在中国，出生在一个商人的家庭。而与我同时出生的人在哪里了？对于出生，我没有选择权，我只知道我是由受精卵发育而来。把提供精子的叫爸爸，提供卵子的叫妈妈。我也有称呼，看来这个世界一出生就帮我安排好名称了。\n\n1996年我出生在中国，计划生育实行的时代。而在此之前，我已有两个姐姐，按照国家的政策，我的出生是无法容许的。而按照我家庭思想，一定要要出生的。就这样，我的出生有了一段故事。中国五千年历史，儒家文化尊崇。重男轻女传宗接代的封建思想不断传承，到了我父辈。家中一直没有男孩，受此影响。我妈怀孕了六胎才是男孩（PS:我对前三胎怀有深深歉意）。我妈刚要偷偷地把我生下来的时候，被人举报。政府派人抓我妈做人流，将我妈锁在妇女儿童医院六楼，我爷爷叫来黑道的人来帮忙，大伯利用妇幼医院熟人关系在医护人员交接班时，帮我妈逃出医院。逃出后，政府人员一路有人追赶。爸妈为了防止被抓，一路上辗转数次车到了黄冈舅爷家。舅爷帮我转移到安全位置，而政府人员去了我家将舅舅抓住了，将姑奶奶的门诊关了。姑奶奶向爷爷求情说：“门诊关了，没办法生存了”。爷爷心软了，发消息给爸爸：还是回来吧。爸爸回复：既然都逃出来了，就一定要生下来。躲了两月后。爸爸为了保证我安全又将我转移到大姑爹家中，在大姑爹家中的2楼躲了10天。一天都没有开灯，防止被人举报。快到临产时，就送到人民医院，用了假名字将我顺利出生。而政府人员得知后，家里上交了罚款3万元，这件事才告一段落。\n\n亲戚的帮忙，母亲怀胎十月，父亲奔波谋策。当“啊啊啊”哭声响起之时，母亲笑了，父亲笑了，大家也笑了。\n\n出生其实是一件挺麻烦的事情。母亲的十月怀胎，边流汗边咬牙生产；父亲焦急等待。\n\n既然我来到这个世界，那就好好活着！\n\n","source":"_posts/出生.md","raw":"title: 出生\nauthor: Zhang Peng\ntags:\n  - 生活\ncategories: []\ndate: 2018-07-01 23:09:00\n---\n\n1996年这一年世界第一只“克隆羊”多利诞生，各种不间断的热点事件，但这些好像都无关紧要。这一年，我出生了。\n\n<!--more--> \n\n\n我出生在地球，为什么我没有出生在其他星球？难道其他星球没有和我一样的存在？我出生在中国，出生在一个商人的家庭。而与我同时出生的人在哪里了？对于出生，我没有选择权，我只知道我是由受精卵发育而来。把提供精子的叫爸爸，提供卵子的叫妈妈。我也有称呼，看来这个世界一出生就帮我安排好名称了。\n\n1996年我出生在中国，计划生育实行的时代。而在此之前，我已有两个姐姐，按照国家的政策，我的出生是无法容许的。而按照我家庭思想，一定要要出生的。就这样，我的出生有了一段故事。中国五千年历史，儒家文化尊崇。重男轻女传宗接代的封建思想不断传承，到了我父辈。家中一直没有男孩，受此影响。我妈怀孕了六胎才是男孩（PS:我对前三胎怀有深深歉意）。我妈刚要偷偷地把我生下来的时候，被人举报。政府派人抓我妈做人流，将我妈锁在妇女儿童医院六楼，我爷爷叫来黑道的人来帮忙，大伯利用妇幼医院熟人关系在医护人员交接班时，帮我妈逃出医院。逃出后，政府人员一路有人追赶。爸妈为了防止被抓，一路上辗转数次车到了黄冈舅爷家。舅爷帮我转移到安全位置，而政府人员去了我家将舅舅抓住了，将姑奶奶的门诊关了。姑奶奶向爷爷求情说：“门诊关了，没办法生存了”。爷爷心软了，发消息给爸爸：还是回来吧。爸爸回复：既然都逃出来了，就一定要生下来。躲了两月后。爸爸为了保证我安全又将我转移到大姑爹家中，在大姑爹家中的2楼躲了10天。一天都没有开灯，防止被人举报。快到临产时，就送到人民医院，用了假名字将我顺利出生。而政府人员得知后，家里上交了罚款3万元，这件事才告一段落。\n\n亲戚的帮忙，母亲怀胎十月，父亲奔波谋策。当“啊啊啊”哭声响起之时，母亲笑了，父亲笑了，大家也笑了。\n\n出生其实是一件挺麻烦的事情。母亲的十月怀胎，边流汗边咬牙生产；父亲焦急等待。\n\n既然我来到这个世界，那就好好活着！\n\n","slug":"出生","published":1,"updated":"2019-04-28T07:04:47.586Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0g90007bwwijyhpui9b","content":"<p>1996年这一年世界第一只“克隆羊”多利诞生，各种不间断的热点事件，但这些好像都无关紧要。这一年，我出生了。</p>\n<a id=\"more\"></a> \n<p>我出生在地球，为什么我没有出生在其他星球？难道其他星球没有和我一样的存在？我出生在中国，出生在一个商人的家庭。而与我同时出生的人在哪里了？对于出生，我没有选择权，我只知道我是由受精卵发育而来。把提供精子的叫爸爸，提供卵子的叫妈妈。我也有称呼，看来这个世界一出生就帮我安排好名称了。</p>\n<p>1996年我出生在中国，计划生育实行的时代。而在此之前，我已有两个姐姐，按照国家的政策，我的出生是无法容许的。而按照我家庭思想，一定要要出生的。就这样，我的出生有了一段故事。中国五千年历史，儒家文化尊崇。重男轻女传宗接代的封建思想不断传承，到了我父辈。家中一直没有男孩，受此影响。我妈怀孕了六胎才是男孩（PS:我对前三胎怀有深深歉意）。我妈刚要偷偷地把我生下来的时候，被人举报。政府派人抓我妈做人流，将我妈锁在妇女儿童医院六楼，我爷爷叫来黑道的人来帮忙，大伯利用妇幼医院熟人关系在医护人员交接班时，帮我妈逃出医院。逃出后，政府人员一路有人追赶。爸妈为了防止被抓，一路上辗转数次车到了黄冈舅爷家。舅爷帮我转移到安全位置，而政府人员去了我家将舅舅抓住了，将姑奶奶的门诊关了。姑奶奶向爷爷求情说：“门诊关了，没办法生存了”。爷爷心软了，发消息给爸爸：还是回来吧。爸爸回复：既然都逃出来了，就一定要生下来。躲了两月后。爸爸为了保证我安全又将我转移到大姑爹家中，在大姑爹家中的2楼躲了10天。一天都没有开灯，防止被人举报。快到临产时，就送到人民医院，用了假名字将我顺利出生。而政府人员得知后，家里上交了罚款3万元，这件事才告一段落。</p>\n<p>亲戚的帮忙，母亲怀胎十月，父亲奔波谋策。当“啊啊啊”哭声响起之时，母亲笑了，父亲笑了，大家也笑了。</p>\n<p>出生其实是一件挺麻烦的事情。母亲的十月怀胎，边流汗边咬牙生产；父亲焦急等待。</p>\n<p>既然我来到这个世界，那就好好活着！</p>\n","site":{"data":{}},"excerpt":"<p>1996年这一年世界第一只“克隆羊”多利诞生，各种不间断的热点事件，但这些好像都无关紧要。这一年，我出生了。</p>","more":"<p>我出生在地球，为什么我没有出生在其他星球？难道其他星球没有和我一样的存在？我出生在中国，出生在一个商人的家庭。而与我同时出生的人在哪里了？对于出生，我没有选择权，我只知道我是由受精卵发育而来。把提供精子的叫爸爸，提供卵子的叫妈妈。我也有称呼，看来这个世界一出生就帮我安排好名称了。</p>\n<p>1996年我出生在中国，计划生育实行的时代。而在此之前，我已有两个姐姐，按照国家的政策，我的出生是无法容许的。而按照我家庭思想，一定要要出生的。就这样，我的出生有了一段故事。中国五千年历史，儒家文化尊崇。重男轻女传宗接代的封建思想不断传承，到了我父辈。家中一直没有男孩，受此影响。我妈怀孕了六胎才是男孩（PS:我对前三胎怀有深深歉意）。我妈刚要偷偷地把我生下来的时候，被人举报。政府派人抓我妈做人流，将我妈锁在妇女儿童医院六楼，我爷爷叫来黑道的人来帮忙，大伯利用妇幼医院熟人关系在医护人员交接班时，帮我妈逃出医院。逃出后，政府人员一路有人追赶。爸妈为了防止被抓，一路上辗转数次车到了黄冈舅爷家。舅爷帮我转移到安全位置，而政府人员去了我家将舅舅抓住了，将姑奶奶的门诊关了。姑奶奶向爷爷求情说：“门诊关了，没办法生存了”。爷爷心软了，发消息给爸爸：还是回来吧。爸爸回复：既然都逃出来了，就一定要生下来。躲了两月后。爸爸为了保证我安全又将我转移到大姑爹家中，在大姑爹家中的2楼躲了10天。一天都没有开灯，防止被人举报。快到临产时，就送到人民医院，用了假名字将我顺利出生。而政府人员得知后，家里上交了罚款3万元，这件事才告一段落。</p>\n<p>亲戚的帮忙，母亲怀胎十月，父亲奔波谋策。当“啊啊啊”哭声响起之时，母亲笑了，父亲笑了，大家也笑了。</p>\n<p>出生其实是一件挺麻烦的事情。母亲的十月怀胎，边流汗边咬牙生产；父亲焦急等待。</p>\n<p>既然我来到这个世界，那就好好活着！</p>"},{"layout":"post","title":"快排里的Partition应用-找第K大的数字","date":"2018-01-06T07:21:00.000Z","comments":1,"reward":true,"_content":"### Partition 算法\n\n参考自：\n\n[白话经典算法系列之六 快速排序 快速搞定](http://blog.csdn.net/morewindows/article/details/6684558)\n\n### 挖数填坑：\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1fmnsi4j20tv0kj45z.jpg)\n\n<!--more--> \n\n```c++\nint partition(vector<int>& nums, int low, int high)\n{\n    int x = nums[low];\n    int i = low;\n    int j = high-1;\n    while(i<j)\n    {\n      while(i<j&&nums[j]<=x)\n        j--;\n      if(i<j)\n        nums[i]=nums[j];\n      while(i<j&&nums[i]>=x)\n        i++;\n      if(i<j)\n        nums[j]=nums[i];\n    }\n    nums[i]=x;\n    return i;\n}\n```\n\n### FindKthNumber\n\n```c\nint findKthLargest(vector<int>& nums, int k) {\n    int begin = 0, end = nums.size();\n    int target_num = 0;\n    while (begin <= end){\n        int pos = partition(nums, begin, end);\n        if(pos == k-1){\n            target_num = nums[pos];\n            break;\n        }\n        else if(pos > k-1){\n            end = pos;\n        }\n        else{\n            begin = pos + 1;\n        }\n    }\n    return target_num;\n}\n```\n\n### 全部代码\n\n```c++\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\nint partition(vector<int>& nums, int low, int high)\n{\n    int x = nums[low];\n    int i = low;\n    int j = high-1;\n    while(i<j)\n    {\n      while(i<j&&nums[j]<=x)\n        j--;\n      if(i<j)\n        nums[i]=nums[j];\n      while(i<j&&nums[i]>=x)\n        i++;\n      if(i<j)\n        nums[j]=nums[i];\n    }\n    nums[i]=x;\n    return i;\n}\n    \nint findKthLargest(vector<int>& nums, int k) {\n    int begin = 0, end = nums.size();\n    int target_num = 0;\n    while (begin <= end){\n        int pos = partition(nums, begin, end);\n        if(pos == k-1){\n            target_num = nums[pos];\n            break;\n        }\n        else if(pos > k-1){\n            end = pos;\n        }\n        else{\n            begin = pos + 1;\n        }\n    }\n    return target_num;\n}\n\n\nint main()\n{\n  vector<int> nums={2, 1};\n  printf(\"%d\", findKthLargest(nums, 2));\n  getchar();\n}\n```\n\n[例题：Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/description/)","source":"_posts/快排里的Partition应用-找第K大的数字 .md","raw":"---\nlayout: post\ntitle: \"快排里的Partition应用-找第K大的数字\"\ndate: 2018-01-06 15:21\ncomments: true\nreward: true\ntags: \n\t- leetcode\n---\n### Partition 算法\n\n参考自：\n\n[白话经典算法系列之六 快速排序 快速搞定](http://blog.csdn.net/morewindows/article/details/6684558)\n\n### 挖数填坑：\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1fmnsi4j20tv0kj45z.jpg)\n\n<!--more--> \n\n```c++\nint partition(vector<int>& nums, int low, int high)\n{\n    int x = nums[low];\n    int i = low;\n    int j = high-1;\n    while(i<j)\n    {\n      while(i<j&&nums[j]<=x)\n        j--;\n      if(i<j)\n        nums[i]=nums[j];\n      while(i<j&&nums[i]>=x)\n        i++;\n      if(i<j)\n        nums[j]=nums[i];\n    }\n    nums[i]=x;\n    return i;\n}\n```\n\n### FindKthNumber\n\n```c\nint findKthLargest(vector<int>& nums, int k) {\n    int begin = 0, end = nums.size();\n    int target_num = 0;\n    while (begin <= end){\n        int pos = partition(nums, begin, end);\n        if(pos == k-1){\n            target_num = nums[pos];\n            break;\n        }\n        else if(pos > k-1){\n            end = pos;\n        }\n        else{\n            begin = pos + 1;\n        }\n    }\n    return target_num;\n}\n```\n\n### 全部代码\n\n```c++\n#include<cstdio>\n#include<vector>\nusing namespace std;\n\nint partition(vector<int>& nums, int low, int high)\n{\n    int x = nums[low];\n    int i = low;\n    int j = high-1;\n    while(i<j)\n    {\n      while(i<j&&nums[j]<=x)\n        j--;\n      if(i<j)\n        nums[i]=nums[j];\n      while(i<j&&nums[i]>=x)\n        i++;\n      if(i<j)\n        nums[j]=nums[i];\n    }\n    nums[i]=x;\n    return i;\n}\n    \nint findKthLargest(vector<int>& nums, int k) {\n    int begin = 0, end = nums.size();\n    int target_num = 0;\n    while (begin <= end){\n        int pos = partition(nums, begin, end);\n        if(pos == k-1){\n            target_num = nums[pos];\n            break;\n        }\n        else if(pos > k-1){\n            end = pos;\n        }\n        else{\n            begin = pos + 1;\n        }\n    }\n    return target_num;\n}\n\n\nint main()\n{\n  vector<int> nums={2, 1};\n  printf(\"%d\", findKthLargest(nums, 2));\n  getchar();\n}\n```\n\n[例题：Kth Largest Element in an Array](https://leetcode.com/problems/kth-largest-element-in-an-array/description/)","slug":"快排里的Partition应用-找第K大的数字 ","published":1,"updated":"2019-04-28T07:04:47.591Z","photos":[],"link":"","_id":"cjv0ur0gb0008bwwiw9bd46ys","content":"<h3 id=\"Partition-算法\"><a href=\"#Partition-算法\" class=\"headerlink\" title=\"Partition 算法\"></a>Partition 算法</h3><p>参考自：</p>\n<p><a href=\"http://blog.csdn.net/morewindows/article/details/6684558\" target=\"_blank\" rel=\"noopener\">白话经典算法系列之六 快速排序 快速搞定</a></p>\n<h3 id=\"挖数填坑：\"><a href=\"#挖数填坑：\" class=\"headerlink\" title=\"挖数填坑：\"></a>挖数填坑：</h3><p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1fmnsi4j20tv0kj45z.jpg\" alt></p>\n<a id=\"more\"></a> \n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = nums[low];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = high<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[j]&lt;=x)</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[i]&gt;=x)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[j]=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums[i]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FindKthNumber\"><a href=\"#FindKthNumber\" class=\"headerlink\" title=\"FindKthNumber\"></a>FindKthNumber</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>, end = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> target_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = partition(nums, begin, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            target_num = nums[pos];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pos &gt; k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            end = pos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            begin = pos + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target_num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = nums[low];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = high<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[j]&lt;=x)</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[i]&gt;=x)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[j]=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums[i]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>, end = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> target_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = partition(nums, begin, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            target_num = nums[pos];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pos &gt; k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            end = pos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            begin = pos + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums=&#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, findKthLargest(nums, <span class=\"number\">2</span>));</span><br><span class=\"line\">  getchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/description/\" target=\"_blank\" rel=\"noopener\">例题：Kth Largest Element in an Array</a></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"Partition-算法\"><a href=\"#Partition-算法\" class=\"headerlink\" title=\"Partition 算法\"></a>Partition 算法</h3><p>参考自：</p>\n<p><a href=\"http://blog.csdn.net/morewindows/article/details/6684558\" target=\"_blank\" rel=\"noopener\">白话经典算法系列之六 快速排序 快速搞定</a></p>\n<h3 id=\"挖数填坑：\"><a href=\"#挖数填坑：\" class=\"headerlink\" title=\"挖数填坑：\"></a>挖数填坑：</h3><p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1fmnsi4j20tv0kj45z.jpg\" alt></p>","more":"<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = nums[low];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = high<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[j]&lt;=x)</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[i]&gt;=x)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[j]=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums[i]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"FindKthNumber\"><a href=\"#FindKthNumber\" class=\"headerlink\" title=\"FindKthNumber\"></a>FindKthNumber</h3><figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>, end = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> target_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = partition(nums, begin, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            target_num = nums[pos];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pos &gt; k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            end = pos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            begin = pos + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target_num;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"全部代码\"><a href=\"#全部代码\" class=\"headerlink\" title=\"全部代码\"></a>全部代码</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;cstdio&gt;</span></span></span><br><span class=\"line\"><span class=\"meta\">#<span class=\"meta-keyword\">include</span><span class=\"meta-string\">&lt;vector&gt;</span></span></span><br><span class=\"line\"><span class=\"keyword\">using</span> <span class=\"keyword\">namespace</span> <span class=\"built_in\">std</span>;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">partition</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> low, <span class=\"keyword\">int</span> high)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> x = nums[low];</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = low;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> j = high<span class=\"number\">-1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i&lt;j)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[j]&lt;=x)</span><br><span class=\"line\">        j--;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[i]=nums[j];</span><br><span class=\"line\">      <span class=\"keyword\">while</span>(i&lt;j&amp;&amp;nums[i]&gt;=x)</span><br><span class=\"line\">        i++;</span><br><span class=\"line\">      <span class=\"keyword\">if</span>(i&lt;j)</span><br><span class=\"line\">        nums[j]=nums[i];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    nums[i]=x;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">findKthLargest</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums, <span class=\"keyword\">int</span> k)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> begin = <span class=\"number\">0</span>, end = nums.size();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> target_num = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span> (begin &lt;= end)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> pos = partition(nums, begin, end);</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(pos == k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            target_num = nums[pos];</span><br><span class=\"line\">            <span class=\"keyword\">break</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(pos &gt; k<span class=\"number\">-1</span>)&#123;</span><br><span class=\"line\">            end = pos;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            begin = pos + <span class=\"number\">1</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> target_num;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">main</span><span class=\"params\">()</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">  <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt; nums=&#123;<span class=\"number\">2</span>, <span class=\"number\">1</span>&#125;;</span><br><span class=\"line\">  <span class=\"built_in\">printf</span>(<span class=\"string\">\"%d\"</span>, findKthLargest(nums, <span class=\"number\">2</span>));</span><br><span class=\"line\">  getchar();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"https://leetcode.com/problems/kth-largest-element-in-an-array/description/\" target=\"_blank\" rel=\"noopener\">例题：Kth Largest Element in an Array</a></p>"},{"layout":"post","title":"进程与线程","date":"2017-10-15T03:15:00.000Z","comments":1,"reward":true,"_content":"\n### 1.线程与进程的区别\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvocw1d71j212p0e17i5.jpg)\n\n![image](https://ws2.sinaimg.cn/large/aacc02d8ly1fxvnlguox1j211s07w7a9.jpg)\n\n<!--more--> \n\n### 2.线程\n\n线程是程序执行流的最小单位。一个标准的线程由线程ID，当当前指令(PC)，寄存器集合和堆栈(stack)组成。另外，线程是进程中的一个实体，是系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，**但它可与同属一个进程的其他线程共享进程所拥有的资源**。\n\n线程共享的进程环境包括：**进程代码段、进程的公有数据（如全局变量，利用这些共享的数据，线程很容易的实现相互之间的通信）、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。**\n\n\n\n### 3.进程的通信方式有哪些？\n\n-  管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\n\n-  信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n\n-  消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n-  信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\n\n-  共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。\n\n-  套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。\n\n\n\n\n\n\n\n","source":"_posts/操作系统.md","raw":"---\nlayout: post\ntitle: \"进程与线程\"\ndate: 2017-10-15 11:15\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n\n### 1.线程与进程的区别\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvocw1d71j212p0e17i5.jpg)\n\n![image](https://ws2.sinaimg.cn/large/aacc02d8ly1fxvnlguox1j211s07w7a9.jpg)\n\n<!--more--> \n\n### 2.线程\n\n线程是程序执行流的最小单位。一个标准的线程由线程ID，当当前指令(PC)，寄存器集合和堆栈(stack)组成。另外，线程是进程中的一个实体，是系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，**但它可与同属一个进程的其他线程共享进程所拥有的资源**。\n\n线程共享的进程环境包括：**进程代码段、进程的公有数据（如全局变量，利用这些共享的数据，线程很容易的实现相互之间的通信）、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。**\n\n\n\n### 3.进程的通信方式有哪些？\n\n-  管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。\n\n-  信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。\n\n-  消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。\n\n-  信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。\n\n-  共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。\n\n-  套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。\n\n\n\n\n\n\n\n","slug":"操作系统","published":1,"updated":"2019-04-28T07:04:47.592Z","photos":[],"link":"","_id":"cjv0ur0gd0009bwwiozyjmvyd","content":"<h3 id=\"1-线程与进程的区别\"><a href=\"#1-线程与进程的区别\" class=\"headerlink\" title=\"1.线程与进程的区别\"></a>1.线程与进程的区别</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvocw1d71j212p0e17i5.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/aacc02d8ly1fxvnlguox1j211s07w7a9.jpg\" alt=\"image\"></p>\n<a id=\"more\"></a> \n<h3 id=\"2-线程\"><a href=\"#2-线程\" class=\"headerlink\" title=\"2.线程\"></a>2.线程</h3><p>线程是程序执行流的最小单位。一个标准的线程由线程ID，当当前指令(PC)，寄存器集合和堆栈(stack)组成。另外，线程是进程中的一个实体，是系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，<strong>但它可与同属一个进程的其他线程共享进程所拥有的资源</strong>。</p>\n<p>线程共享的进程环境包括：<strong>进程代码段、进程的公有数据（如全局变量，利用这些共享的数据，线程很容易的实现相互之间的通信）、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。</strong></p>\n<h3 id=\"3-进程的通信方式有哪些？\"><a href=\"#3-进程的通信方式有哪些？\" class=\"headerlink\" title=\"3.进程的通信方式有哪些？\"></a>3.进程的通信方式有哪些？</h3><ul>\n<li><p>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>\n</li>\n<li><p>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n</li>\n<li><p>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n</li>\n<li><p>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n</li>\n<li><p>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>\n</li>\n<li><p>套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</p>\n</li>\n</ul>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-线程与进程的区别\"><a href=\"#1-线程与进程的区别\" class=\"headerlink\" title=\"1.线程与进程的区别\"></a>1.线程与进程的区别</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvocw1d71j212p0e17i5.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws2.sinaimg.cn/large/aacc02d8ly1fxvnlguox1j211s07w7a9.jpg\" alt=\"image\"></p>","more":"<h3 id=\"2-线程\"><a href=\"#2-线程\" class=\"headerlink\" title=\"2.线程\"></a>2.线程</h3><p>线程是程序执行流的最小单位。一个标准的线程由线程ID，当当前指令(PC)，寄存器集合和堆栈(stack)组成。另外，线程是进程中的一个实体，是系统独立调度和分派的基本单位，线程自己不拥有系统资源，只拥有一点在运行中必不可少的资源，<strong>但它可与同属一个进程的其他线程共享进程所拥有的资源</strong>。</p>\n<p>线程共享的进程环境包括：<strong>进程代码段、进程的公有数据（如全局变量，利用这些共享的数据，线程很容易的实现相互之间的通信）、进程打开的文件描述符、信号的处理器、进程的当前目录和进程用户ID与进程组ID。</strong></p>\n<h3 id=\"3-进程的通信方式有哪些？\"><a href=\"#3-进程的通信方式有哪些？\" class=\"headerlink\" title=\"3.进程的通信方式有哪些？\"></a>3.进程的通信方式有哪些？</h3><ul>\n<li><p>管道( pipe )：管道是一种半双工的通信方式，数据只能单向流动，而且只能在具有亲缘关系的进程间使用。进程的亲缘关系通常是指父子进程关系。</p>\n</li>\n<li><p>信号量( semophore ) ： 信号量是一个计数器，可以用来控制多个进程对共享资源的访问。它常作为一种锁机制，防止某进程正在访问共享资源时，其他进程也访问该资源。因此，主要作为进程间以及同一进程内不同线程之间的同步手段。</p>\n</li>\n<li><p>消息队列( message queue ) ： 消息队列是由消息的链表，存放在内核中并由消息队列标识符标识。消息队列克服了信号传递信息少、管道只能承载无格式字节流以及缓冲区大小受限等缺点。</p>\n</li>\n<li><p>信号 ( sinal ) ： 信号是一种比较复杂的通信方式，用于通知接收进程某个事件已经发生。</p>\n</li>\n<li><p>共享内存( shared memory ) ：共享内存就是映射一段能被其他进程所访问的内存，这段共享内存由一个进程创建，但多个进程都可以访问。共享内存是最快的 IPC 方式，它是针对其他进程间通信方式运行效率低而专门设计的。它往往与其他通信机制，如信号两，配合使用，来实现进程间的同步和通信。</p>\n</li>\n<li><p>套接字( socket ) ： 套解口也是一种进程间通信机制，与其他通信机制不同的是，它可用于不同及其间的进程通信。</p>\n</li>\n</ul>"},{"layout":"post","title":"校招笔试题目总结(二)","date":"2017-09-07T13:58:00.000Z","comments":1,"reward":true,"_content":"\n### 1.中缀表达式求前缀与后缀表达式\n\n#### 摘自于(http://blog.csdn.net/dreamzuora/article/details/53384174)\n\n给出一个中缀表达式如下：a+b*c-(d+e) \n第一步：按照运算符的优先级对所有的运算单位加括号，\n​         式子变成了：((a+(b*c))-(d+e)) \n第二步：转换前缀与后缀表达式 \n​         **前缀**：把运算符号移动到对应的括号前面 \n​                     则变成了：-( +(a *(bc)) +(de)) \n​                     把括号去掉：-+a*bc+de   前缀式子出现 \n​         **后缀**：把运算符号移动到对应的括号后面 \n​                    则变成了：((a(bc)* )+ (de)+ )- \n​                     把括号去掉：abc*+de+-   后缀式子出现\n\n<!--more--> \n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1gkgmuej20qi07pwo2.jpg)\n\n## 2.共用体union\n\n- 共用体占用内存为各成员中最大者内存，各成员共享这一段空间。\n- 对于共用体的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了。\n\n### 3.AVL和红黑树\n\n#### **AVL平衡二叉搜索树**\n\n定义：平衡二叉树或为空树,或为如下性质的二叉排序树:\n  （1）左右子树深度之差的绝对值不超过1;\n  （2）左右子树仍然为平衡二叉树.\n平衡因子BF=左子树深度－右子树深度.\n平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。\n如图所示为平衡树和非平衡树示意图：\n\n![img](http://img.blog.csdn.net/20140916121239199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VwX0hlYXZlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n \n\n#### **RBT 红黑树**\n\n**AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；**\n**红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；**\n**所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。**\n\n红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。\n一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：\n1）每个结点要么是红的，要么是黑的。\n2）根结点是黑的。\n3）每个叶结点，即空结点（NIL）是黑的。\n4）如果一个结点是红的，那么它的俩个儿子都是黑的。\n5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。\n下图所示，即是一颗红黑树：\n\n![img](http://hi.csdn.net/attachment/201012/29/8394323_1293613306CGzE.jpg)\n\n\n\n### 4.小端模式与大端模式\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvoup244rj21180gj0v2.jpg)","source":"_posts/校招笔试题目总结(二).md","raw":"---\nlayout: post\ntitle: \"校招笔试题目总结(二)\"\ndate: 2017-9-7 21:58\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n\n### 1.中缀表达式求前缀与后缀表达式\n\n#### 摘自于(http://blog.csdn.net/dreamzuora/article/details/53384174)\n\n给出一个中缀表达式如下：a+b*c-(d+e) \n第一步：按照运算符的优先级对所有的运算单位加括号，\n​         式子变成了：((a+(b*c))-(d+e)) \n第二步：转换前缀与后缀表达式 \n​         **前缀**：把运算符号移动到对应的括号前面 \n​                     则变成了：-( +(a *(bc)) +(de)) \n​                     把括号去掉：-+a*bc+de   前缀式子出现 \n​         **后缀**：把运算符号移动到对应的括号后面 \n​                    则变成了：((a(bc)* )+ (de)+ )- \n​                     把括号去掉：abc*+de+-   后缀式子出现\n\n<!--more--> \n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1gkgmuej20qi07pwo2.jpg)\n\n## 2.共用体union\n\n- 共用体占用内存为各成员中最大者内存，各成员共享这一段空间。\n- 对于共用体的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了。\n\n### 3.AVL和红黑树\n\n#### **AVL平衡二叉搜索树**\n\n定义：平衡二叉树或为空树,或为如下性质的二叉排序树:\n  （1）左右子树深度之差的绝对值不超过1;\n  （2）左右子树仍然为平衡二叉树.\n平衡因子BF=左子树深度－右子树深度.\n平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。\n如图所示为平衡树和非平衡树示意图：\n\n![img](http://img.blog.csdn.net/20140916121239199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VwX0hlYXZlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast)\n\n \n\n#### **RBT 红黑树**\n\n**AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；**\n**红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；**\n**所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。**\n\n红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。\n一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：\n1）每个结点要么是红的，要么是黑的。\n2）根结点是黑的。\n3）每个叶结点，即空结点（NIL）是黑的。\n4）如果一个结点是红的，那么它的俩个儿子都是黑的。\n5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。\n下图所示，即是一颗红黑树：\n\n![img](http://hi.csdn.net/attachment/201012/29/8394323_1293613306CGzE.jpg)\n\n\n\n### 4.小端模式与大端模式\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvoup244rj21180gj0v2.jpg)","slug":"校招笔试题目总结(二)","published":1,"updated":"2019-04-28T07:04:47.593Z","photos":[],"link":"","_id":"cjv0ur0gf000cbwwiicjrmpdb","content":"<h3 id=\"1-中缀表达式求前缀与后缀表达式\"><a href=\"#1-中缀表达式求前缀与后缀表达式\" class=\"headerlink\" title=\"1.中缀表达式求前缀与后缀表达式\"></a>1.中缀表达式求前缀与后缀表达式</h3><h4 id=\"摘自于-http-blog-csdn-net-dreamzuora-article-details-53384174\"><a href=\"#摘自于-http-blog-csdn-net-dreamzuora-article-details-53384174\" class=\"headerlink\" title=\"摘自于(http://blog.csdn.net/dreamzuora/article/details/53384174)\"></a>摘自于(<a href=\"http://blog.csdn.net/dreamzuora/article/details/53384174\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dreamzuora/article/details/53384174</a>)</h4><p>给出一个中缀表达式如下：a+b<em>c-(d+e)<br>第一步：按照运算符的优先级对所有的运算单位加括号，<br>​         式子变成了：((a+(b</em>c))-(d+e))<br>第二步：转换前缀与后缀表达式<br>​         <strong>前缀</strong>：把运算符号移动到对应的括号前面<br>​                     则变成了：-( +(a <em>(bc)) +(de))<br>​                     把括号去掉：-+a</em>bc+de   前缀式子出现<br>​         <strong>后缀</strong>：把运算符号移动到对应的括号后面<br>​                    则变成了：((a(bc)<em> )+ (de)+ )-<br>​                     把括号去掉：abc</em>+de+-   后缀式子出现</p>\n<a id=\"more\"></a> \n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1gkgmuej20qi07pwo2.jpg\" alt></p>\n<h2 id=\"2-共用体union\"><a href=\"#2-共用体union\" class=\"headerlink\" title=\"2.共用体union\"></a>2.共用体union</h2><ul>\n<li>共用体占用内存为各成员中最大者内存，各成员共享这一段空间。</li>\n<li>对于共用体的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了。</li>\n</ul>\n<h3 id=\"3-AVL和红黑树\"><a href=\"#3-AVL和红黑树\" class=\"headerlink\" title=\"3.AVL和红黑树\"></a>3.AVL和红黑树</h3><h4 id=\"AVL平衡二叉搜索树\"><a href=\"#AVL平衡二叉搜索树\" class=\"headerlink\" title=\"AVL平衡二叉搜索树\"></a><strong>AVL平衡二叉搜索树</strong></h4><p>定义：平衡二叉树或为空树,或为如下性质的二叉排序树:<br>  （1）左右子树深度之差的绝对值不超过1;<br>  （2）左右子树仍然为平衡二叉树.<br>平衡因子BF=左子树深度－右子树深度.<br>平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。<br>如图所示为平衡树和非平衡树示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20140916121239199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VwX0hlYXZlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"img\"></p>\n<h4 id=\"RBT-红黑树\"><a href=\"#RBT-红黑树\" class=\"headerlink\" title=\"RBT 红黑树\"></a><strong>RBT 红黑树</strong></h4><p><strong>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；</strong><br><strong>红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；</strong><br><strong>所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。</strong></p>\n<p>红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。<br>一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：<br>1）每个结点要么是红的，要么是黑的。<br>2）根结点是黑的。<br>3）每个叶结点，即空结点（NIL）是黑的。<br>4）如果一个结点是红的，那么它的俩个儿子都是黑的。<br>5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。<br>下图所示，即是一颗红黑树：</p>\n<p><img src=\"http://hi.csdn.net/attachment/201012/29/8394323_1293613306CGzE.jpg\" alt=\"img\"></p>\n<h3 id=\"4-小端模式与大端模式\"><a href=\"#4-小端模式与大端模式\" class=\"headerlink\" title=\"4.小端模式与大端模式\"></a>4.小端模式与大端模式</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvoup244rj21180gj0v2.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-中缀表达式求前缀与后缀表达式\"><a href=\"#1-中缀表达式求前缀与后缀表达式\" class=\"headerlink\" title=\"1.中缀表达式求前缀与后缀表达式\"></a>1.中缀表达式求前缀与后缀表达式</h3><h4 id=\"摘自于-http-blog-csdn-net-dreamzuora-article-details-53384174\"><a href=\"#摘自于-http-blog-csdn-net-dreamzuora-article-details-53384174\" class=\"headerlink\" title=\"摘自于(http://blog.csdn.net/dreamzuora/article/details/53384174)\"></a>摘自于(<a href=\"http://blog.csdn.net/dreamzuora/article/details/53384174\" target=\"_blank\" rel=\"noopener\">http://blog.csdn.net/dreamzuora/article/details/53384174</a>)</h4><p>给出一个中缀表达式如下：a+b<em>c-(d+e)<br>第一步：按照运算符的优先级对所有的运算单位加括号，<br>​         式子变成了：((a+(b</em>c))-(d+e))<br>第二步：转换前缀与后缀表达式<br>​         <strong>前缀</strong>：把运算符号移动到对应的括号前面<br>​                     则变成了：-( +(a <em>(bc)) +(de))<br>​                     把括号去掉：-+a</em>bc+de   前缀式子出现<br>​         <strong>后缀</strong>：把运算符号移动到对应的括号后面<br>​                    则变成了：((a(bc)<em> )+ (de)+ )-<br>​                     把括号去掉：abc</em>+de+-   后缀式子出现</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1gkgmuej20qi07pwo2.jpg\" alt></p>\n<h2 id=\"2-共用体union\"><a href=\"#2-共用体union\" class=\"headerlink\" title=\"2.共用体union\"></a>2.共用体union</h2><ul>\n<li>共用体占用内存为各成员中最大者内存，各成员共享这一段空间。</li>\n<li>对于共用体的不同成员赋值，将会对其他成员重写，原来成员的值就不存在了。</li>\n</ul>\n<h3 id=\"3-AVL和红黑树\"><a href=\"#3-AVL和红黑树\" class=\"headerlink\" title=\"3.AVL和红黑树\"></a>3.AVL和红黑树</h3><h4 id=\"AVL平衡二叉搜索树\"><a href=\"#AVL平衡二叉搜索树\" class=\"headerlink\" title=\"AVL平衡二叉搜索树\"></a><strong>AVL平衡二叉搜索树</strong></h4><p>定义：平衡二叉树或为空树,或为如下性质的二叉排序树:<br>  （1）左右子树深度之差的绝对值不超过1;<br>  （2）左右子树仍然为平衡二叉树.<br>平衡因子BF=左子树深度－右子树深度.<br>平衡二叉树每个结点的平衡因子只能是1，0，-1。若其绝对值超过1，则该二叉排序树就是不平衡的。<br>如图所示为平衡树和非平衡树示意图：</p>\n<p><img src=\"http://img.blog.csdn.net/20140916121239199?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvU3VwX0hlYXZlbg==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast\" alt=\"img\"></p>\n<h4 id=\"RBT-红黑树\"><a href=\"#RBT-红黑树\" class=\"headerlink\" title=\"RBT 红黑树\"></a><strong>RBT 红黑树</strong></h4><p><strong>AVL是严格平衡树，因此在增加或者删除节点的时候，根据不同情况，旋转的次数比红黑树要多；</strong><br><strong>红黑是弱平衡的，用非严格的平衡来换取增删节点时候旋转次数的降低；</strong><br><strong>所以简单说，搜索的次数远远大于插入和删除，那么选择AVL树，如果搜索，插入删除次数几乎差不多，应该选择RB树。</strong></p>\n<p>红黑树上每个结点内含五个域，color，key，left，right，p。如果相应的指针域没有，则设为NIL。<br>一般的，红黑树，满足以下性质，即只有满足以下全部性质的树，我们才称之为红黑树：<br>1）每个结点要么是红的，要么是黑的。<br>2）根结点是黑的。<br>3）每个叶结点，即空结点（NIL）是黑的。<br>4）如果一个结点是红的，那么它的俩个儿子都是黑的。<br>5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。<br>下图所示，即是一颗红黑树：</p>\n<p><img src=\"http://hi.csdn.net/attachment/201012/29/8394323_1293613306CGzE.jpg\" alt=\"img\"></p>\n<h3 id=\"4-小端模式与大端模式\"><a href=\"#4-小端模式与大端模式\" class=\"headerlink\" title=\"4.小端模式与大端模式\"></a>4.小端模式与大端模式</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvoup244rj21180gj0v2.jpg\" alt=\"image\"></p>"},{"layout":"post","title":"校招笔试题目总结(一)","date":"2017-09-04T11:58:00.000Z","comments":1,"reward":true,"_content":"\n8月26号辞去实习，回学校准备校招，刷了一些题目。在此做个自己认为常考题的总结。\n\n### 1.在32位系统下char* p[10]; char(*p1)[10]，sizeof(p)和sizeof (p1)分别值为？\n\n![image](https://wx4.sinaimg.cn/large/aacc02d8ly1fxvowcbqaqj20ie0b6dgo.jpg)\n\n<!--more--> \n\n### 2.C++类的内存大小计算\n\n![image](https://wx2.sinaimg.cn/large/aacc02d8ly1fxvowk1t20j20tx0gnjva.jpg)\n\n![image](https://ws3.sinaimg.cn/large/aacc02d8ly1fxvowq8xj4j20tg076myx.jpg)\n\n\n\n### 3.排序算法性能的比较及应用\n\n**时间复杂度**：简单选择排序、直接插入排序和冒泡排序的平均情况下的时间复杂度都为O(n^2),实现过程较简单，但直接插入排序和冒泡排序在最好的情况下时间复杂度可以达到O(n)，而简单选择排序则与序列的初始状态无关。希尔排序作为插入排序的拓展，对较大规模的排序都可以达到很高的效率，但是目前未得出其精确的渐近时间。堆排序是利用了一种称为堆，可以在线性时间内完成建堆，并且在O(nlog2n)内完成排序过程。快速排序是基于分治的思想，最坏情况下快速排序时间会达到O(n^2)，但快速排序平均性能可以达到O(nlog2n)，实际应用中常常优于其他排序算法。归并排序同样是基于分治的思想，最坏和平均时间复杂度均为O(nlog2n)。\n\n**空间复杂度**：简单选择排序、插入排序、冒泡排序、希尔排序和堆排序仅需借助常数个辅助空间。快速排序在空间上只使用一个小的辅助栈，用于实现递归，平均情况大小为O(log2n)，最坏的情况下可能会增长到O(n)。二路归并排序需要借助较多的辅助空间用于元素复制，大小为O(n)。\n\n**稳定性**：插入排序、冒泡排序、归并排序和基数排序是稳定的排序方法，而简单选择排序、快速排序、希尔排序和堆排序都是不稳定的排序方法。对排序方法的稳定性，应从本身的原理上去理解，而不应拘泥于死记硬背。\n\n**应用**：\n\n1. 若n较小时(n<=50)，则可以采用直接插入排序或简单选择排序。\n2. 若文件的初始状态已按关键字基本有序，则选用直接插入或冒泡排序。\n3. 若n较大，则应采用时同复杂度为O(nlog2n)的排序方法快速排序、堆排序、归并排序。快速排序被认为是目前基于比较的内部排序法中最好的方法。若要求排序稳定且时间复杂度为O(nlog2n),则可选用归并排序。\n4. 若n很大，记录的关键字位数较少且可以分解时，采用基数排序较好。\n5. 当记录本身信息量较大时，为避免耗费大量时间移动记录，可用链表作为存储结\n\n### 4.二叉树前序、中序、后序遍历相互求法\n\n例：\n\n前序遍历:         GDAFEMHZ\n\n中序遍历:         ADEFGHMZ\n\n**画树求法：**第一步，根据前序遍历的特点，我们知道根结点为G\n\n第二步，观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。\n\n 第三步，观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。\n\n第四步，同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。\n\n第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：\n\n1 确定根,确定左子树，确定右子树。\n\n2 在左子树中递归。\n\n3 在右子树中递归。\n\n4 打印当前根。\n\n那么，我们可以画出这个二叉树的形状：\n\n![img](http://www.cr173.com/up/2013-1/2013010715404717978.jpg)\n\n那么，根据后序的遍历规则，我们可以知道，后序遍历顺序为：AEFDHZMG.","source":"_posts/校招笔试题目总结（一）.md","raw":"---\nlayout: post\ntitle: \"校招笔试题目总结(一)\"\ndate: 2017-9-4 19:58\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n\n8月26号辞去实习，回学校准备校招，刷了一些题目。在此做个自己认为常考题的总结。\n\n### 1.在32位系统下char* p[10]; char(*p1)[10]，sizeof(p)和sizeof (p1)分别值为？\n\n![image](https://wx4.sinaimg.cn/large/aacc02d8ly1fxvowcbqaqj20ie0b6dgo.jpg)\n\n<!--more--> \n\n### 2.C++类的内存大小计算\n\n![image](https://wx2.sinaimg.cn/large/aacc02d8ly1fxvowk1t20j20tx0gnjva.jpg)\n\n![image](https://ws3.sinaimg.cn/large/aacc02d8ly1fxvowq8xj4j20tg076myx.jpg)\n\n\n\n### 3.排序算法性能的比较及应用\n\n**时间复杂度**：简单选择排序、直接插入排序和冒泡排序的平均情况下的时间复杂度都为O(n^2),实现过程较简单，但直接插入排序和冒泡排序在最好的情况下时间复杂度可以达到O(n)，而简单选择排序则与序列的初始状态无关。希尔排序作为插入排序的拓展，对较大规模的排序都可以达到很高的效率，但是目前未得出其精确的渐近时间。堆排序是利用了一种称为堆，可以在线性时间内完成建堆，并且在O(nlog2n)内完成排序过程。快速排序是基于分治的思想，最坏情况下快速排序时间会达到O(n^2)，但快速排序平均性能可以达到O(nlog2n)，实际应用中常常优于其他排序算法。归并排序同样是基于分治的思想，最坏和平均时间复杂度均为O(nlog2n)。\n\n**空间复杂度**：简单选择排序、插入排序、冒泡排序、希尔排序和堆排序仅需借助常数个辅助空间。快速排序在空间上只使用一个小的辅助栈，用于实现递归，平均情况大小为O(log2n)，最坏的情况下可能会增长到O(n)。二路归并排序需要借助较多的辅助空间用于元素复制，大小为O(n)。\n\n**稳定性**：插入排序、冒泡排序、归并排序和基数排序是稳定的排序方法，而简单选择排序、快速排序、希尔排序和堆排序都是不稳定的排序方法。对排序方法的稳定性，应从本身的原理上去理解，而不应拘泥于死记硬背。\n\n**应用**：\n\n1. 若n较小时(n<=50)，则可以采用直接插入排序或简单选择排序。\n2. 若文件的初始状态已按关键字基本有序，则选用直接插入或冒泡排序。\n3. 若n较大，则应采用时同复杂度为O(nlog2n)的排序方法快速排序、堆排序、归并排序。快速排序被认为是目前基于比较的内部排序法中最好的方法。若要求排序稳定且时间复杂度为O(nlog2n),则可选用归并排序。\n4. 若n很大，记录的关键字位数较少且可以分解时，采用基数排序较好。\n5. 当记录本身信息量较大时，为避免耗费大量时间移动记录，可用链表作为存储结\n\n### 4.二叉树前序、中序、后序遍历相互求法\n\n例：\n\n前序遍历:         GDAFEMHZ\n\n中序遍历:         ADEFGHMZ\n\n**画树求法：**第一步，根据前序遍历的特点，我们知道根结点为G\n\n第二步，观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。\n\n 第三步，观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。\n\n第四步，同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。\n\n第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：\n\n1 确定根,确定左子树，确定右子树。\n\n2 在左子树中递归。\n\n3 在右子树中递归。\n\n4 打印当前根。\n\n那么，我们可以画出这个二叉树的形状：\n\n![img](http://www.cr173.com/up/2013-1/2013010715404717978.jpg)\n\n那么，根据后序的遍历规则，我们可以知道，后序遍历顺序为：AEFDHZMG.","slug":"校招笔试题目总结（一）","published":1,"updated":"2019-04-28T07:04:47.594Z","photos":[],"link":"","_id":"cjv0ur0gh000ebwwizhd12wwz","content":"<p>8月26号辞去实习，回学校准备校招，刷了一些题目。在此做个自己认为常考题的总结。</p>\n<h3 id=\"1-在32位系统下char-p-10-char-p1-10-，sizeof-p-和sizeof-p1-分别值为？\"><a href=\"#1-在32位系统下char-p-10-char-p1-10-，sizeof-p-和sizeof-p1-分别值为？\" class=\"headerlink\" title=\"1.在32位系统下char p[10]; char(p1)[10]，sizeof(p)和sizeof (p1)分别值为？\"></a>1.在32位系统下char<em> p[10]; char(</em>p1)[10]，sizeof(p)和sizeof (p1)分别值为？</h3><p><img src=\"https://wx4.sinaimg.cn/large/aacc02d8ly1fxvowcbqaqj20ie0b6dgo.jpg\" alt=\"image\"></p>\n<a id=\"more\"></a> \n<h3 id=\"2-C-类的内存大小计算\"><a href=\"#2-C-类的内存大小计算\" class=\"headerlink\" title=\"2.C++类的内存大小计算\"></a>2.C++类的内存大小计算</h3><p><img src=\"https://wx2.sinaimg.cn/large/aacc02d8ly1fxvowk1t20j20tx0gnjva.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/aacc02d8ly1fxvowq8xj4j20tg076myx.jpg\" alt=\"image\"></p>\n<h3 id=\"3-排序算法性能的比较及应用\"><a href=\"#3-排序算法性能的比较及应用\" class=\"headerlink\" title=\"3.排序算法性能的比较及应用\"></a>3.排序算法性能的比较及应用</h3><p><strong>时间复杂度</strong>：简单选择排序、直接插入排序和冒泡排序的平均情况下的时间复杂度都为O(n^2),实现过程较简单，但直接插入排序和冒泡排序在最好的情况下时间复杂度可以达到O(n)，而简单选择排序则与序列的初始状态无关。希尔排序作为插入排序的拓展，对较大规模的排序都可以达到很高的效率，但是目前未得出其精确的渐近时间。堆排序是利用了一种称为堆，可以在线性时间内完成建堆，并且在O(nlog2n)内完成排序过程。快速排序是基于分治的思想，最坏情况下快速排序时间会达到O(n^2)，但快速排序平均性能可以达到O(nlog2n)，实际应用中常常优于其他排序算法。归并排序同样是基于分治的思想，最坏和平均时间复杂度均为O(nlog2n)。</p>\n<p><strong>空间复杂度</strong>：简单选择排序、插入排序、冒泡排序、希尔排序和堆排序仅需借助常数个辅助空间。快速排序在空间上只使用一个小的辅助栈，用于实现递归，平均情况大小为O(log2n)，最坏的情况下可能会增长到O(n)。二路归并排序需要借助较多的辅助空间用于元素复制，大小为O(n)。</p>\n<p><strong>稳定性</strong>：插入排序、冒泡排序、归并排序和基数排序是稳定的排序方法，而简单选择排序、快速排序、希尔排序和堆排序都是不稳定的排序方法。对排序方法的稳定性，应从本身的原理上去理解，而不应拘泥于死记硬背。</p>\n<p><strong>应用</strong>：</p>\n<ol>\n<li>若n较小时(n&lt;=50)，则可以采用直接插入排序或简单选择排序。</li>\n<li>若文件的初始状态已按关键字基本有序，则选用直接插入或冒泡排序。</li>\n<li>若n较大，则应采用时同复杂度为O(nlog2n)的排序方法快速排序、堆排序、归并排序。快速排序被认为是目前基于比较的内部排序法中最好的方法。若要求排序稳定且时间复杂度为O(nlog2n),则可选用归并排序。</li>\n<li>若n很大，记录的关键字位数较少且可以分解时，采用基数排序较好。</li>\n<li>当记录本身信息量较大时，为避免耗费大量时间移动记录，可用链表作为存储结</li>\n</ol>\n<h3 id=\"4-二叉树前序、中序、后序遍历相互求法\"><a href=\"#4-二叉树前序、中序、后序遍历相互求法\" class=\"headerlink\" title=\"4.二叉树前序、中序、后序遍历相互求法\"></a>4.二叉树前序、中序、后序遍历相互求法</h3><p>例：</p>\n<p>前序遍历:         GDAFEMHZ</p>\n<p>中序遍历:         ADEFGHMZ</p>\n<p><strong>画树求法：</strong>第一步，根据前序遍历的特点，我们知道根结点为G</p>\n<p>第二步，观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。</p>\n<p> 第三步，观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。</p>\n<p>第四步，同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。</p>\n<p>第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：</p>\n<p>1 确定根,确定左子树，确定右子树。</p>\n<p>2 在左子树中递归。</p>\n<p>3 在右子树中递归。</p>\n<p>4 打印当前根。</p>\n<p>那么，我们可以画出这个二叉树的形状：</p>\n<p><img src=\"http://www.cr173.com/up/2013-1/2013010715404717978.jpg\" alt=\"img\"></p>\n<p>那么，根据后序的遍历规则，我们可以知道，后序遍历顺序为：AEFDHZMG.</p>\n","site":{"data":{}},"excerpt":"<p>8月26号辞去实习，回学校准备校招，刷了一些题目。在此做个自己认为常考题的总结。</p>\n<h3 id=\"1-在32位系统下char-p-10-char-p1-10-，sizeof-p-和sizeof-p1-分别值为？\"><a href=\"#1-在32位系统下char-p-10-char-p1-10-，sizeof-p-和sizeof-p1-分别值为？\" class=\"headerlink\" title=\"1.在32位系统下char p[10]; char(p1)[10]，sizeof(p)和sizeof (p1)分别值为？\"></a>1.在32位系统下char<em> p[10]; char(</em>p1)[10]，sizeof(p)和sizeof (p1)分别值为？</h3><p><img src=\"https://wx4.sinaimg.cn/large/aacc02d8ly1fxvowcbqaqj20ie0b6dgo.jpg\" alt=\"image\"></p>","more":"<h3 id=\"2-C-类的内存大小计算\"><a href=\"#2-C-类的内存大小计算\" class=\"headerlink\" title=\"2.C++类的内存大小计算\"></a>2.C++类的内存大小计算</h3><p><img src=\"https://wx2.sinaimg.cn/large/aacc02d8ly1fxvowk1t20j20tx0gnjva.jpg\" alt=\"image\"></p>\n<p><img src=\"https://ws3.sinaimg.cn/large/aacc02d8ly1fxvowq8xj4j20tg076myx.jpg\" alt=\"image\"></p>\n<h3 id=\"3-排序算法性能的比较及应用\"><a href=\"#3-排序算法性能的比较及应用\" class=\"headerlink\" title=\"3.排序算法性能的比较及应用\"></a>3.排序算法性能的比较及应用</h3><p><strong>时间复杂度</strong>：简单选择排序、直接插入排序和冒泡排序的平均情况下的时间复杂度都为O(n^2),实现过程较简单，但直接插入排序和冒泡排序在最好的情况下时间复杂度可以达到O(n)，而简单选择排序则与序列的初始状态无关。希尔排序作为插入排序的拓展，对较大规模的排序都可以达到很高的效率，但是目前未得出其精确的渐近时间。堆排序是利用了一种称为堆，可以在线性时间内完成建堆，并且在O(nlog2n)内完成排序过程。快速排序是基于分治的思想，最坏情况下快速排序时间会达到O(n^2)，但快速排序平均性能可以达到O(nlog2n)，实际应用中常常优于其他排序算法。归并排序同样是基于分治的思想，最坏和平均时间复杂度均为O(nlog2n)。</p>\n<p><strong>空间复杂度</strong>：简单选择排序、插入排序、冒泡排序、希尔排序和堆排序仅需借助常数个辅助空间。快速排序在空间上只使用一个小的辅助栈，用于实现递归，平均情况大小为O(log2n)，最坏的情况下可能会增长到O(n)。二路归并排序需要借助较多的辅助空间用于元素复制，大小为O(n)。</p>\n<p><strong>稳定性</strong>：插入排序、冒泡排序、归并排序和基数排序是稳定的排序方法，而简单选择排序、快速排序、希尔排序和堆排序都是不稳定的排序方法。对排序方法的稳定性，应从本身的原理上去理解，而不应拘泥于死记硬背。</p>\n<p><strong>应用</strong>：</p>\n<ol>\n<li>若n较小时(n&lt;=50)，则可以采用直接插入排序或简单选择排序。</li>\n<li>若文件的初始状态已按关键字基本有序，则选用直接插入或冒泡排序。</li>\n<li>若n较大，则应采用时同复杂度为O(nlog2n)的排序方法快速排序、堆排序、归并排序。快速排序被认为是目前基于比较的内部排序法中最好的方法。若要求排序稳定且时间复杂度为O(nlog2n),则可选用归并排序。</li>\n<li>若n很大，记录的关键字位数较少且可以分解时，采用基数排序较好。</li>\n<li>当记录本身信息量较大时，为避免耗费大量时间移动记录，可用链表作为存储结</li>\n</ol>\n<h3 id=\"4-二叉树前序、中序、后序遍历相互求法\"><a href=\"#4-二叉树前序、中序、后序遍历相互求法\" class=\"headerlink\" title=\"4.二叉树前序、中序、后序遍历相互求法\"></a>4.二叉树前序、中序、后序遍历相互求法</h3><p>例：</p>\n<p>前序遍历:         GDAFEMHZ</p>\n<p>中序遍历:         ADEFGHMZ</p>\n<p><strong>画树求法：</strong>第一步，根据前序遍历的特点，我们知道根结点为G</p>\n<p>第二步，观察中序遍历ADEFGHMZ。其中root节点G左侧的ADEF必然是root的左子树，G右侧的HMZ必然是root的右子树。</p>\n<p> 第三步，观察左子树ADEF，左子树的中的根节点必然是大树的root的leftchild。在前序遍历中，大树的root的leftchild位于root之后，所以左子树的根节点为D。</p>\n<p>第四步，同样的道理，root的右子树节点HMZ中的根节点也可以通过前序遍历求得。在前序遍历中，一定是先把root和root的所有左子树节点遍历完之后才会遍历右子树，并且遍历的左子树的第一个节点就是左子树的根节点。同理，遍历的右子树的第一个节点就是右子树的根节点。</p>\n<p>第五步，观察发现，上面的过程是递归的。先找到当前树的根节点，然后划分为左子树，右子树，然后进入左子树重复上面的过程，然后进入右子树重复上面的过程。最后就可以还原一棵树了。该步递归的过程可以简洁表达如下：</p>\n<p>1 确定根,确定左子树，确定右子树。</p>\n<p>2 在左子树中递归。</p>\n<p>3 在右子树中递归。</p>\n<p>4 打印当前根。</p>\n<p>那么，我们可以画出这个二叉树的形状：</p>\n<p><img src=\"http://www.cr173.com/up/2013-1/2013010715404717978.jpg\" alt=\"img\"></p>\n<p>那么，根据后序的遍历规则，我们可以知道，后序遍历顺序为：AEFDHZMG.</p>"},{"title":"泛型类与泛型方法","author":"Zhang Peng","date":"2018-07-09T01:03:00.000Z","_content":"### 1 泛型类\n\n泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。 \n\n设计这个类的时候，在类的声明上，加上一个<T>，表示该类支持泛型。 T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。 \n\n<!--more--> \n\n#### 实例\n\n如下实例演示了我们如何定义一个泛型类:\n\n```java\npublic class Box<T> {\n   \n  private T t;\n \n  public void add(T t) {\n    this.t = t;\n  }\n \n  public T get() {\n    return t;\n  }\n \n  public static void main(String[] args) {\n    Box<Integer> integerBox = new Box<Integer>();\n    Box<String> stringBox = new Box<String>();\n \n    integerBox.add(new Integer(10));\n    stringBox.add(new String(\"菜鸟教程\"));\n \n    System.out.printf(\"整型值为 :%d\\n\\n\", integerBox.get());\n    System.out.printf(\"字符串为 :%s\\n\", stringBox.get());\n  }\n}\n\n```\n\n### 2 泛型方法\n\n- 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的< T > ）。\n\n```java\n    public static <T> T jsonToEntity (String json, Class<T> targertClass) {\n\n        if(!StringUtils.isEmpty(json)) {\n            T entity = JSON.parseObject(json, targertClass);\n            return entity;\n        }\n        return null;\n    }\n```\n\n","source":"_posts/泛型类与泛型方法.md","raw":"title: 泛型类与泛型方法\nauthor: Zhang Peng\ntags:\n  - JAVA\ncategories: []\ndate: 2018-07-09 09:03:00\n---\n### 1 泛型类\n\n泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。 \n\n设计这个类的时候，在类的声明上，加上一个<T>，表示该类支持泛型。 T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。 \n\n<!--more--> \n\n#### 实例\n\n如下实例演示了我们如何定义一个泛型类:\n\n```java\npublic class Box<T> {\n   \n  private T t;\n \n  public void add(T t) {\n    this.t = t;\n  }\n \n  public T get() {\n    return t;\n  }\n \n  public static void main(String[] args) {\n    Box<Integer> integerBox = new Box<Integer>();\n    Box<String> stringBox = new Box<String>();\n \n    integerBox.add(new Integer(10));\n    stringBox.add(new String(\"菜鸟教程\"));\n \n    System.out.printf(\"整型值为 :%d\\n\\n\", integerBox.get());\n    System.out.printf(\"字符串为 :%s\\n\", stringBox.get());\n  }\n}\n\n```\n\n### 2 泛型方法\n\n- 所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的< T > ）。\n\n```java\n    public static <T> T jsonToEntity (String json, Class<T> targertClass) {\n\n        if(!StringUtils.isEmpty(json)) {\n            T entity = JSON.parseObject(json, targertClass);\n            return entity;\n        }\n        return null;\n    }\n```\n\n","slug":"泛型类与泛型方法","published":1,"updated":"2019-04-28T07:04:47.604Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0gj000hbwwi9kvqgk8m","content":"<h3 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1 泛型类\"></a>1 泛型类</h3><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。 </p>\n<p>设计这个类的时候，在类的声明上，加上一个<t>，表示该类支持泛型。 T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。 </t></p>\n<a id=\"more\"></a> \n<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>如下实例演示了我们如何定义一个泛型类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">private</span> T t;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Box&lt;Integer&gt; integerBox = <span class=\"keyword\">new</span> Box&lt;Integer&gt;();</span><br><span class=\"line\">    Box&lt;String&gt; stringBox = <span class=\"keyword\">new</span> Box&lt;String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">    integerBox.add(<span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>));</span><br><span class=\"line\">    stringBox.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"菜鸟教程\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.printf(<span class=\"string\">\"整型值为 :%d\\n\\n\"</span>, integerBox.get());</span><br><span class=\"line\">    System.out.printf(<span class=\"string\">\"字符串为 :%s\\n\"</span>, stringBox.get());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2 泛型方法\"></a>2 泛型方法</h3><ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的&lt; T &gt; ）。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToEntity</span> <span class=\"params\">(String json, Class&lt;T&gt; targertClass)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!StringUtils.isEmpty(json)) &#123;</span><br><span class=\"line\">        T entity = JSON.parseObject(json, targertClass);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-泛型类\"><a href=\"#1-泛型类\" class=\"headerlink\" title=\"1 泛型类\"></a>1 泛型类</h3><p>泛型类的声明和非泛型类的声明类似，除了在类名后面添加了类型参数声明部分。 </p>\n<p>设计这个类的时候，在类的声明上，加上一个<t>，表示该类支持泛型。 T是type的缩写，也可以使用任何其他的合法的变量，比如A,B,X都可以，但是一般约定成俗使用T，代表类型。 </t></p>","more":"<h4 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h4><p>如下实例演示了我们如何定义一个泛型类:</p>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Box</span>&lt;<span class=\"title\">T</span>&gt; </span>&#123;</span><br><span class=\"line\">   </span><br><span class=\"line\">  <span class=\"keyword\">private</span> T t;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> <span class=\"title\">add</span><span class=\"params\">(T t)</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">this</span>.t = t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> T <span class=\"title\">get</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> t;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">void</span> <span class=\"title\">main</span><span class=\"params\">(String[] args)</span> </span>&#123;</span><br><span class=\"line\">    Box&lt;Integer&gt; integerBox = <span class=\"keyword\">new</span> Box&lt;Integer&gt;();</span><br><span class=\"line\">    Box&lt;String&gt; stringBox = <span class=\"keyword\">new</span> Box&lt;String&gt;();</span><br><span class=\"line\"> </span><br><span class=\"line\">    integerBox.add(<span class=\"keyword\">new</span> Integer(<span class=\"number\">10</span>));</span><br><span class=\"line\">    stringBox.add(<span class=\"keyword\">new</span> String(<span class=\"string\">\"菜鸟教程\"</span>));</span><br><span class=\"line\"> </span><br><span class=\"line\">    System.out.printf(<span class=\"string\">\"整型值为 :%d\\n\\n\"</span>, integerBox.get());</span><br><span class=\"line\">    System.out.printf(<span class=\"string\">\"字符串为 :%s\\n\"</span>, stringBox.get());</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"2-泛型方法\"><a href=\"#2-泛型方法\" class=\"headerlink\" title=\"2 泛型方法\"></a>2 泛型方法</h3><ul>\n<li>所有泛型方法声明都有一个类型参数声明部分（由尖括号分隔），该类型参数声明部分在方法返回类型之前（在下面例子中的&lt; T &gt; ）。</li>\n</ul>\n<figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">static</span> &lt;T&gt; <span class=\"function\">T <span class=\"title\">jsonToEntity</span> <span class=\"params\">(String json, Class&lt;T&gt; targertClass)</span> </span>&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"keyword\">if</span>(!StringUtils.isEmpty(json)) &#123;</span><br><span class=\"line\">        T entity = JSON.parseObject(json, targertClass);</span><br><span class=\"line\">        <span class=\"keyword\">return</span> entity;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"layout":"post","title":"编程笔面试题","date":"2017-10-05T06:58:00.000Z","comments":1,"reward":true,"_content":"\n### 1.字符串复制函数(strcpy)\n\n```c++\nchar* strcpy(char* dst, const char* src)   \n{\n\tassert(dst != NULL && src != NULL);    \n\tchar *ret = dst;  \n\twhile ((*dst++ = *src++) != '\\0'); \n\treturn ret;\n}\n```\n\n<!--more--> \n\n### 2.内存复制函数(memcpy)\n\n```c++\nvoid* memcpy2(void* dest, const void* src, int count)\n{\n\tchar* d;\n\tconst char* s;\n\tif (dest >= ((char *)src + count) || dest <= src)\n\t{\n\t\td = (char *)dest;\n\t\ts = (char *)src;\n\t\twhile (count--)\n\t\t\t*d++ = *s++;\n\t}\n\telse //memory overlap\n\t{\n\t\td = (char*)dest + count - 1;\n\t\ts = (char*)src + count - 1;\n\t\twhile (count--)\n\t\t\t*d-- = *s--;\n\t}\n\treturn dest;\n}\n```\n\n### 3.合并两个有序的链表\n\n```c++\nNode* listMerge(Node* head1, Node* head2)\n{\n\tif(head1 == NULL)\n  \t\treturn head2;\n  \tif(head2 == NULL)\n  \t\treturn head1\n  \tNode* head = NULL;\n  \tif(head1.val > head2.val)\n  \t{\n      head = head2;\n      head->next = listMerge(head1, head2->next);\n  \t}else\n  \t{\n      head = head1;\n      head->next = listMerge(head1->next, head2);\n  \t}\n  \treturn head;\n}\n```\n\n### 4.逆转链表\n\n```c++\nNode* reverseList(Node* head)\n{\n\tNode* pre = NULL;\n\tNode* res = NULL;\n  \twhile(head != NULL)\n  \t{\n  \t\tres = head->next;\n  \t\thead->next = pre;\n  \t\tpre = head;\n  \t\thead = res;\n  \t}\n  return pre;\n}\n```\n\n","source":"_posts/编程笔面试题.md","raw":"---\nlayout: post\ntitle: \"编程笔面试题\"\ndate: 2017-10-05 14:58\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n\n### 1.字符串复制函数(strcpy)\n\n```c++\nchar* strcpy(char* dst, const char* src)   \n{\n\tassert(dst != NULL && src != NULL);    \n\tchar *ret = dst;  \n\twhile ((*dst++ = *src++) != '\\0'); \n\treturn ret;\n}\n```\n\n<!--more--> \n\n### 2.内存复制函数(memcpy)\n\n```c++\nvoid* memcpy2(void* dest, const void* src, int count)\n{\n\tchar* d;\n\tconst char* s;\n\tif (dest >= ((char *)src + count) || dest <= src)\n\t{\n\t\td = (char *)dest;\n\t\ts = (char *)src;\n\t\twhile (count--)\n\t\t\t*d++ = *s++;\n\t}\n\telse //memory overlap\n\t{\n\t\td = (char*)dest + count - 1;\n\t\ts = (char*)src + count - 1;\n\t\twhile (count--)\n\t\t\t*d-- = *s--;\n\t}\n\treturn dest;\n}\n```\n\n### 3.合并两个有序的链表\n\n```c++\nNode* listMerge(Node* head1, Node* head2)\n{\n\tif(head1 == NULL)\n  \t\treturn head2;\n  \tif(head2 == NULL)\n  \t\treturn head1\n  \tNode* head = NULL;\n  \tif(head1.val > head2.val)\n  \t{\n      head = head2;\n      head->next = listMerge(head1, head2->next);\n  \t}else\n  \t{\n      head = head1;\n      head->next = listMerge(head1->next, head2);\n  \t}\n  \treturn head;\n}\n```\n\n### 4.逆转链表\n\n```c++\nNode* reverseList(Node* head)\n{\n\tNode* pre = NULL;\n\tNode* res = NULL;\n  \twhile(head != NULL)\n  \t{\n  \t\tres = head->next;\n  \t\thead->next = pre;\n  \t\tpre = head;\n  \t\thead = res;\n  \t}\n  return pre;\n}\n```\n\n","slug":"编程笔面试题","published":1,"updated":"2019-04-28T07:04:47.615Z","photos":[],"link":"","_id":"cjv0ur0gk000jbwwij8mq4v73","content":"<h3 id=\"1-字符串复制函数-strcpy\"><a href=\"#1-字符串复制函数-strcpy\" class=\"headerlink\" title=\"1.字符串复制函数(strcpy)\"></a>1.字符串复制函数(strcpy)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"keyword\">char</span>* dst, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src)</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(dst != <span class=\"literal\">NULL</span> &amp;&amp; src != <span class=\"literal\">NULL</span>);    </span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ret = dst;  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((*dst++ = *src++) != <span class=\"string\">'\\0'</span>); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<h3 id=\"2-内存复制函数-memcpy\"><a href=\"#2-内存复制函数-memcpy\" class=\"headerlink\" title=\"2.内存复制函数(memcpy)\"></a>2.内存复制函数(memcpy)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">memcpy2</span><span class=\"params\">(<span class=\"keyword\">void</span>* dest, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* src, <span class=\"keyword\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* d;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dest &gt;= ((<span class=\"keyword\">char</span> *)src + count) || dest &lt;= src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td = (<span class=\"keyword\">char</span> *)dest;</span><br><span class=\"line\">\t\ts = (<span class=\"keyword\">char</span> *)src;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (count--)</span><br><span class=\"line\">\t\t\t*d++ = *s++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"comment\">//memory overlap</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td = (<span class=\"keyword\">char</span>*)dest + count - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ts = (<span class=\"keyword\">char</span>*)src + count - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (count--)</span><br><span class=\"line\">\t\t\t*d-- = *s--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-合并两个有序的链表\"><a href=\"#3-合并两个有序的链表\" class=\"headerlink\" title=\"3.合并两个有序的链表\"></a>3.合并两个有序的链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">listMerge</span><span class=\"params\">(Node* head1, Node* head2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head1 == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> head2;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(head2 == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> head1</span><br><span class=\"line\">  \tNode* head = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(head1.val &gt; head2.val)</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      head = head2;</span><br><span class=\"line\">      head-&gt;next = listMerge(head1, head2-&gt;next);</span><br><span class=\"line\">  \t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      head = head1;</span><br><span class=\"line\">      head-&gt;next = listMerge(head1-&gt;next, head2);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-逆转链表\"><a href=\"#4-逆转链表\" class=\"headerlink\" title=\"4.逆转链表\"></a>4.逆转链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">reverseList</span><span class=\"params\">(Node* head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode* pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tNode* res = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(head != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t\tres = head-&gt;next;</span><br><span class=\"line\">  \t\thead-&gt;next = pre;</span><br><span class=\"line\">  \t\tpre = head;</span><br><span class=\"line\">  \t\thead = res;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-字符串复制函数-strcpy\"><a href=\"#1-字符串复制函数-strcpy\" class=\"headerlink\" title=\"1.字符串复制函数(strcpy)\"></a>1.字符串复制函数(strcpy)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">char</span>* <span class=\"title\">strcpy</span><span class=\"params\">(<span class=\"keyword\">char</span>* dst, <span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* src)</span>   </span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tassert(dst != <span class=\"literal\">NULL</span> &amp;&amp; src != <span class=\"literal\">NULL</span>);    </span><br><span class=\"line\">\t<span class=\"keyword\">char</span> *ret = dst;  </span><br><span class=\"line\">\t<span class=\"keyword\">while</span> ((*dst++ = *src++) != <span class=\"string\">'\\0'</span>); </span><br><span class=\"line\">\t<span class=\"keyword\">return</span> ret;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h3 id=\"2-内存复制函数-memcpy\"><a href=\"#2-内存复制函数-memcpy\" class=\"headerlink\" title=\"2.内存复制函数(memcpy)\"></a>2.内存复制函数(memcpy)</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span>* <span class=\"title\">memcpy2</span><span class=\"params\">(<span class=\"keyword\">void</span>* dest, <span class=\"keyword\">const</span> <span class=\"keyword\">void</span>* src, <span class=\"keyword\">int</span> count)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">char</span>* d;</span><br><span class=\"line\">\t<span class=\"keyword\">const</span> <span class=\"keyword\">char</span>* s;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (dest &gt;= ((<span class=\"keyword\">char</span> *)src + count) || dest &lt;= src)</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td = (<span class=\"keyword\">char</span> *)dest;</span><br><span class=\"line\">\t\ts = (<span class=\"keyword\">char</span> *)src;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (count--)</span><br><span class=\"line\">\t\t\t*d++ = *s++;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"comment\">//memory overlap</span></span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t\td = (<span class=\"keyword\">char</span>*)dest + count - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\ts = (<span class=\"keyword\">char</span>*)src + count - <span class=\"number\">1</span>;</span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (count--)</span><br><span class=\"line\">\t\t\t*d-- = *s--;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">return</span> dest;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-合并两个有序的链表\"><a href=\"#3-合并两个有序的链表\" class=\"headerlink\" title=\"3.合并两个有序的链表\"></a>3.合并两个有序的链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">listMerge</span><span class=\"params\">(Node* head1, Node* head2)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span>(head1 == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> head2;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(head2 == <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t\t<span class=\"keyword\">return</span> head1</span><br><span class=\"line\">  \tNode* head = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">if</span>(head1.val &gt; head2.val)</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      head = head2;</span><br><span class=\"line\">      head-&gt;next = listMerge(head1, head2-&gt;next);</span><br><span class=\"line\">  \t&#125;<span class=\"keyword\">else</span></span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">      head = head1;</span><br><span class=\"line\">      head-&gt;next = listMerge(head1-&gt;next, head2);</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  \t<span class=\"keyword\">return</span> head;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"4-逆转链表\"><a href=\"#4-逆转链表\" class=\"headerlink\" title=\"4.逆转链表\"></a>4.逆转链表</h3><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\">Node* <span class=\"title\">reverseList</span><span class=\"params\">(Node* head)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\tNode* pre = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">\tNode* res = <span class=\"literal\">NULL</span>;</span><br><span class=\"line\">  \t<span class=\"keyword\">while</span>(head != <span class=\"literal\">NULL</span>)</span><br><span class=\"line\">  \t&#123;</span><br><span class=\"line\">  \t\tres = head-&gt;next;</span><br><span class=\"line\">  \t\thead-&gt;next = pre;</span><br><span class=\"line\">  \t\tpre = head;</span><br><span class=\"line\">  \t\thead = res;</span><br><span class=\"line\">  \t&#125;</span><br><span class=\"line\">  <span class=\"keyword\">return</span> pre;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"自我提升总结","author":"Zhang Peng","date":"2018-07-26T03:13:00.000Z","_content":"说明：文章是基于结构性思维写出的，下图将文章进行高度概括，详细内容可见全文（选择性阅读即可）。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1at98fsj21dy096dga.jpg)\n\n#### **序言**\n\n随着公司的规模的扩大，应届生的数量也逐渐增长。然而，从学校刚进入公司的我们，难免会有多多少少的不适应。我们如何能尽快的适应职场环境和更好的成长了？上个星期，公司特与智联教育学院合作，为我们制定了为期5天的培训课程，取得了非常好的效果。\n\n#### **结论**\n\n在这5天的培训课程中，使我的认知、沟通和思考方式得以提升。\n\n#### **1. 学校到职场的转变**\n<!--more--> \n**1.1 个人与团队**\n\n在学校更多的是以个体为单位，我们以自我为中心去上课，心情不好就直接翘课，没有约束。在公司更多是以团队为单位，自己的服务的客户会影响整个团队的绩效，自己写的代码会影响整个团队的开发效率。**自己做的事情将不再再仅仅影响个人，还会影响整个团队**。同时，个人积极的作用会带动起整个团队，反之，则会拖团队的后退。\n\n**1.2 兴趣与职业**\n\n学生的生活更多是凭借自己的兴趣与情绪，我们往往会对自己感兴趣的课程认真听讲，而对无聊乏味的课程则在下面玩手机。但是在公司，我们从事相应的职业，是为他人服务，形成绩效。这是我们职责所在而不在是凭借兴趣，并且**我们应当从追求快乐转变为追求责任**。\n\n**1.3 思维与行动**\n\n学生的思维都很活跃，新点子层出不穷。学校中学习知识，往往是以训练思维为主，注重的是成绩。而在公司，是需要将我们的思维转换为产品，将知识转为绩效，注重的是可行性和商业价值。\n\n**1.4 性格自知**\n\n通过性格色彩测试，了解自己，改变自己。人生嘛，本就是一场提升心智的旅程。\n\n#### **2.时间管理**\n\n**2.1 重要紧急理论**\n\n​\t我们生活中所碰到的事情可以分为以下四类：\n\n​\t重要且紧急—立刻亲自处理\n\n​\t重要但不紧急（这一点最重要）—计划性处理\n\n​\t紧急但不重要—授权委任\n\n​\t不重要且不紧急—当作没看见\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv0xopdelj20iq0estfl.jpg)\n\n**2.2 为什么重要但不紧急的事是最需要关注的了？**\n\n我们在生活中会遇到这种场景，每天都很忙碌。但忙完一阵子会发现，自己都不知道在忙什么了，然后心里有时候会安慰自己：反正我没有在玩，我在忙就行了。静下心来就会觉得我们是在沉溺于这种虚幻的充实满足感，做事时依靠的是自己的偏好和外界压力。根据重要紧急理论分析，这种情况就是一直在做重要且紧急的事情和紧急但不重要的事情。为了解除这种困境，对于重要且紧急的事情尽量减少，重要但不紧急的是通过列清单（To do list）来解决。重要但不紧急的事情则要规划好，有了规划，就知道了自己昨天完成了什么，今天在做什么，明天要干什么。每完成规划中的一个阶段，都可以明确知道，还可以知道距离多久能完成这个规划。其本质就是**让规划的事情可视化**。\n\n#### **3.目标管理**\n\n**3.1目标分析法**\n\n说到目标也是说白了也是要规划，要**对目标有全局的考虑**。最常见的误区是碰到一件事时拿起来就干；订下目标后，一来就开始朝着目标前进。可以根据鱼骨分析法按照先整体后细节对目标进行分解，根据SMART原则制定出具体的（Specific），可测量的（Measurable ），可达到的（Attainable），相关的（Relevant），有时间的（Time based ）的目标。当目标产生冲突时，根据目标矩阵发来选择最优解。通过上述3种方法，这样会清楚的知道自己要按照怎样的流程来朝着目标前进。\n\n**3.2 三个Flag**\n\n​\ta.四周时间看完剩下的《SpringBoot微信点餐系统》\n\n​\tb.每天中午休息时间看5分钟的书\n\n​\tc.每天10个深蹲\n\n#### **4.结构性思维**\n\n有时候我说话会了一堆，可是很多人还是不明白。其背后的主要原因是自己没有想清楚，就开口说了，想到哪里就说到哪里。结构性思维会是很好的解决方法。结构性思维是采用的总分形式，其结构就像高中的议论文一样。先进行背景介绍（即序言）提出主要观点，然后对其展开并进行论证。在与他人沟通时，会**想的清楚，说的明白**。让听者也会清楚的知道你想表达的意思。\n\n#### **5.高品质沟通**\n\n每个人来自不同的地方，成长于不同的环境。当然两人会对一件事情会有不同的看法。当双方都怀着：你听我的，你听我的！这种心态来沟通，想必双方彼此都不能了解对方的想法，甚至可能会导致不愉快的事情出现。如果将”你听我的“转换成”**我知道了你的观点，我的观点**“，同时想一下对方所说的话其原因是什么？最终彼此都会很好的知道了对方的想法。\n\n#### 6.心态管理\n\n**6.1 心态的三驾马车**\n\n我们平常所说的**心态，其具体表现形式是认知，情感，行为**。这三者相辅相存，互相影响。例如：当做一件事情时，我们觉得很无聊，接着就会想到这件事没有意义，最终结果就是不去做这件事情。我们再细想一下这个情景：如果当感到无聊的时，我们想到的是做这件事情可以磨砺我们，使我们成长，其最终结果是我们把这件事做完。\n\n同样的事情，认知的不同产生了不同的结果。这让我想到ABC理论。\n\n**6.2 情绪ABC理论** \n\n![http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&690](http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&690)\n\n情绪ABC理论框架：A（Antecedent）指事情的前因，C（Consequence）指事情的后果，有前因必有后果，但是有同样的前因A，产生了不一样的后果C1和C2。这是因为从前因到后果之间，一定会透过一座桥梁B（Bridge），这座桥梁就是认知和我们对情境的评价与解释。又因为，同一情境之下（A），不同的人的认知以及评价与解释不同（B1和B2），所以会得到不同结果（C1和C2）。\n\n因此，事情发生的一切根源缘于我们的认知(认知是指人们对事件的想法，解释和评价等）。**事物的本身并不影响人，人们只受对事物看法的影响。**\n\n\n\n听了这么多道理，**好好去做才是正道**。成功不必在我，而功力必不唐捐。\n\n#### 参考资料：\n\n​        1. [从学校到职场的转变](https://wenku.baidu.com/view/028ca126376baf1ffc4fad5a.html)\n\n​        2. [为什么时间管理上讲优先做的事情是最重要但不紧急的事情？By黛西瓜](https://www.zhihu.com/question/20247508/answer/41385012)\n\n​        3. [湖畔大学梁宁将情绪ABC理论神谕为“人的底层操作系统”，比能力强大100倍！By水伯](https://zhuanlan.zhihu.com/p/38532813)\n\n​        4. [结构性思维 By浩翊](https://zhuanlan.zhihu.com/p/22035979)\n\n​        5. [赠与今年的大学毕业生(1932年6月27日) By胡适](https://www.douban.com/note/86761045/)\n\n","source":"_posts/自我提升总结.md","raw":"---\ntitle: 自我提升总结\nauthor: Zhang Peng\ntags: \n\t- 个人提升\ndate: 2018-07-26 11:13:00\n---\n说明：文章是基于结构性思维写出的，下图将文章进行高度概括，详细内容可见全文（选择性阅读即可）。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1at98fsj21dy096dga.jpg)\n\n#### **序言**\n\n随着公司的规模的扩大，应届生的数量也逐渐增长。然而，从学校刚进入公司的我们，难免会有多多少少的不适应。我们如何能尽快的适应职场环境和更好的成长了？上个星期，公司特与智联教育学院合作，为我们制定了为期5天的培训课程，取得了非常好的效果。\n\n#### **结论**\n\n在这5天的培训课程中，使我的认知、沟通和思考方式得以提升。\n\n#### **1. 学校到职场的转变**\n<!--more--> \n**1.1 个人与团队**\n\n在学校更多的是以个体为单位，我们以自我为中心去上课，心情不好就直接翘课，没有约束。在公司更多是以团队为单位，自己的服务的客户会影响整个团队的绩效，自己写的代码会影响整个团队的开发效率。**自己做的事情将不再再仅仅影响个人，还会影响整个团队**。同时，个人积极的作用会带动起整个团队，反之，则会拖团队的后退。\n\n**1.2 兴趣与职业**\n\n学生的生活更多是凭借自己的兴趣与情绪，我们往往会对自己感兴趣的课程认真听讲，而对无聊乏味的课程则在下面玩手机。但是在公司，我们从事相应的职业，是为他人服务，形成绩效。这是我们职责所在而不在是凭借兴趣，并且**我们应当从追求快乐转变为追求责任**。\n\n**1.3 思维与行动**\n\n学生的思维都很活跃，新点子层出不穷。学校中学习知识，往往是以训练思维为主，注重的是成绩。而在公司，是需要将我们的思维转换为产品，将知识转为绩效，注重的是可行性和商业价值。\n\n**1.4 性格自知**\n\n通过性格色彩测试，了解自己，改变自己。人生嘛，本就是一场提升心智的旅程。\n\n#### **2.时间管理**\n\n**2.1 重要紧急理论**\n\n​\t我们生活中所碰到的事情可以分为以下四类：\n\n​\t重要且紧急—立刻亲自处理\n\n​\t重要但不紧急（这一点最重要）—计划性处理\n\n​\t紧急但不重要—授权委任\n\n​\t不重要且不紧急—当作没看见\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv0xopdelj20iq0estfl.jpg)\n\n**2.2 为什么重要但不紧急的事是最需要关注的了？**\n\n我们在生活中会遇到这种场景，每天都很忙碌。但忙完一阵子会发现，自己都不知道在忙什么了，然后心里有时候会安慰自己：反正我没有在玩，我在忙就行了。静下心来就会觉得我们是在沉溺于这种虚幻的充实满足感，做事时依靠的是自己的偏好和外界压力。根据重要紧急理论分析，这种情况就是一直在做重要且紧急的事情和紧急但不重要的事情。为了解除这种困境，对于重要且紧急的事情尽量减少，重要但不紧急的是通过列清单（To do list）来解决。重要但不紧急的事情则要规划好，有了规划，就知道了自己昨天完成了什么，今天在做什么，明天要干什么。每完成规划中的一个阶段，都可以明确知道，还可以知道距离多久能完成这个规划。其本质就是**让规划的事情可视化**。\n\n#### **3.目标管理**\n\n**3.1目标分析法**\n\n说到目标也是说白了也是要规划，要**对目标有全局的考虑**。最常见的误区是碰到一件事时拿起来就干；订下目标后，一来就开始朝着目标前进。可以根据鱼骨分析法按照先整体后细节对目标进行分解，根据SMART原则制定出具体的（Specific），可测量的（Measurable ），可达到的（Attainable），相关的（Relevant），有时间的（Time based ）的目标。当目标产生冲突时，根据目标矩阵发来选择最优解。通过上述3种方法，这样会清楚的知道自己要按照怎样的流程来朝着目标前进。\n\n**3.2 三个Flag**\n\n​\ta.四周时间看完剩下的《SpringBoot微信点餐系统》\n\n​\tb.每天中午休息时间看5分钟的书\n\n​\tc.每天10个深蹲\n\n#### **4.结构性思维**\n\n有时候我说话会了一堆，可是很多人还是不明白。其背后的主要原因是自己没有想清楚，就开口说了，想到哪里就说到哪里。结构性思维会是很好的解决方法。结构性思维是采用的总分形式，其结构就像高中的议论文一样。先进行背景介绍（即序言）提出主要观点，然后对其展开并进行论证。在与他人沟通时，会**想的清楚，说的明白**。让听者也会清楚的知道你想表达的意思。\n\n#### **5.高品质沟通**\n\n每个人来自不同的地方，成长于不同的环境。当然两人会对一件事情会有不同的看法。当双方都怀着：你听我的，你听我的！这种心态来沟通，想必双方彼此都不能了解对方的想法，甚至可能会导致不愉快的事情出现。如果将”你听我的“转换成”**我知道了你的观点，我的观点**“，同时想一下对方所说的话其原因是什么？最终彼此都会很好的知道了对方的想法。\n\n#### 6.心态管理\n\n**6.1 心态的三驾马车**\n\n我们平常所说的**心态，其具体表现形式是认知，情感，行为**。这三者相辅相存，互相影响。例如：当做一件事情时，我们觉得很无聊，接着就会想到这件事没有意义，最终结果就是不去做这件事情。我们再细想一下这个情景：如果当感到无聊的时，我们想到的是做这件事情可以磨砺我们，使我们成长，其最终结果是我们把这件事做完。\n\n同样的事情，认知的不同产生了不同的结果。这让我想到ABC理论。\n\n**6.2 情绪ABC理论** \n\n![http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&690](http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&690)\n\n情绪ABC理论框架：A（Antecedent）指事情的前因，C（Consequence）指事情的后果，有前因必有后果，但是有同样的前因A，产生了不一样的后果C1和C2。这是因为从前因到后果之间，一定会透过一座桥梁B（Bridge），这座桥梁就是认知和我们对情境的评价与解释。又因为，同一情境之下（A），不同的人的认知以及评价与解释不同（B1和B2），所以会得到不同结果（C1和C2）。\n\n因此，事情发生的一切根源缘于我们的认知(认知是指人们对事件的想法，解释和评价等）。**事物的本身并不影响人，人们只受对事物看法的影响。**\n\n\n\n听了这么多道理，**好好去做才是正道**。成功不必在我，而功力必不唐捐。\n\n#### 参考资料：\n\n​        1. [从学校到职场的转变](https://wenku.baidu.com/view/028ca126376baf1ffc4fad5a.html)\n\n​        2. [为什么时间管理上讲优先做的事情是最重要但不紧急的事情？By黛西瓜](https://www.zhihu.com/question/20247508/answer/41385012)\n\n​        3. [湖畔大学梁宁将情绪ABC理论神谕为“人的底层操作系统”，比能力强大100倍！By水伯](https://zhuanlan.zhihu.com/p/38532813)\n\n​        4. [结构性思维 By浩翊](https://zhuanlan.zhihu.com/p/22035979)\n\n​        5. [赠与今年的大学毕业生(1932年6月27日) By胡适](https://www.douban.com/note/86761045/)\n\n","slug":"自我提升总结","published":1,"updated":"2019-04-28T07:04:47.617Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0gm000mbwwixr7lycga","content":"<p>说明：文章是基于结构性思维写出的，下图将文章进行高度概括，详细内容可见全文（选择性阅读即可）。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1at98fsj21dy096dga.jpg\" alt></p>\n<h4 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a><strong>序言</strong></h4><p>随着公司的规模的扩大，应届生的数量也逐渐增长。然而，从学校刚进入公司的我们，难免会有多多少少的不适应。我们如何能尽快的适应职场环境和更好的成长了？上个星期，公司特与智联教育学院合作，为我们制定了为期5天的培训课程，取得了非常好的效果。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在这5天的培训课程中，使我的认知、沟通和思考方式得以提升。</p>\n<h4 id=\"1-学校到职场的转变\"><a href=\"#1-学校到职场的转变\" class=\"headerlink\" title=\"1. 学校到职场的转变\"></a><strong>1. 学校到职场的转变</strong></h4><a id=\"more\"></a> \n<p><strong>1.1 个人与团队</strong></p>\n<p>在学校更多的是以个体为单位，我们以自我为中心去上课，心情不好就直接翘课，没有约束。在公司更多是以团队为单位，自己的服务的客户会影响整个团队的绩效，自己写的代码会影响整个团队的开发效率。<strong>自己做的事情将不再再仅仅影响个人，还会影响整个团队</strong>。同时，个人积极的作用会带动起整个团队，反之，则会拖团队的后退。</p>\n<p><strong>1.2 兴趣与职业</strong></p>\n<p>学生的生活更多是凭借自己的兴趣与情绪，我们往往会对自己感兴趣的课程认真听讲，而对无聊乏味的课程则在下面玩手机。但是在公司，我们从事相应的职业，是为他人服务，形成绩效。这是我们职责所在而不在是凭借兴趣，并且<strong>我们应当从追求快乐转变为追求责任</strong>。</p>\n<p><strong>1.3 思维与行动</strong></p>\n<p>学生的思维都很活跃，新点子层出不穷。学校中学习知识，往往是以训练思维为主，注重的是成绩。而在公司，是需要将我们的思维转换为产品，将知识转为绩效，注重的是可行性和商业价值。</p>\n<p><strong>1.4 性格自知</strong></p>\n<p>通过性格色彩测试，了解自己，改变自己。人生嘛，本就是一场提升心智的旅程。</p>\n<h4 id=\"2-时间管理\"><a href=\"#2-时间管理\" class=\"headerlink\" title=\"2.时间管理\"></a><strong>2.时间管理</strong></h4><p><strong>2.1 重要紧急理论</strong></p>\n<p>​    我们生活中所碰到的事情可以分为以下四类：</p>\n<p>​    重要且紧急—立刻亲自处理</p>\n<p>​    重要但不紧急（这一点最重要）—计划性处理</p>\n<p>​    紧急但不重要—授权委任</p>\n<p>​    不重要且不紧急—当作没看见</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv0xopdelj20iq0estfl.jpg\" alt></p>\n<p><strong>2.2 为什么重要但不紧急的事是最需要关注的了？</strong></p>\n<p>我们在生活中会遇到这种场景，每天都很忙碌。但忙完一阵子会发现，自己都不知道在忙什么了，然后心里有时候会安慰自己：反正我没有在玩，我在忙就行了。静下心来就会觉得我们是在沉溺于这种虚幻的充实满足感，做事时依靠的是自己的偏好和外界压力。根据重要紧急理论分析，这种情况就是一直在做重要且紧急的事情和紧急但不重要的事情。为了解除这种困境，对于重要且紧急的事情尽量减少，重要但不紧急的是通过列清单（To do list）来解决。重要但不紧急的事情则要规划好，有了规划，就知道了自己昨天完成了什么，今天在做什么，明天要干什么。每完成规划中的一个阶段，都可以明确知道，还可以知道距离多久能完成这个规划。其本质就是<strong>让规划的事情可视化</strong>。</p>\n<h4 id=\"3-目标管理\"><a href=\"#3-目标管理\" class=\"headerlink\" title=\"3.目标管理\"></a><strong>3.目标管理</strong></h4><p><strong>3.1目标分析法</strong></p>\n<p>说到目标也是说白了也是要规划，要<strong>对目标有全局的考虑</strong>。最常见的误区是碰到一件事时拿起来就干；订下目标后，一来就开始朝着目标前进。可以根据鱼骨分析法按照先整体后细节对目标进行分解，根据SMART原则制定出具体的（Specific），可测量的（Measurable ），可达到的（Attainable），相关的（Relevant），有时间的（Time based ）的目标。当目标产生冲突时，根据目标矩阵发来选择最优解。通过上述3种方法，这样会清楚的知道自己要按照怎样的流程来朝着目标前进。</p>\n<p><strong>3.2 三个Flag</strong></p>\n<p>​    a.四周时间看完剩下的《SpringBoot微信点餐系统》</p>\n<p>​    b.每天中午休息时间看5分钟的书</p>\n<p>​    c.每天10个深蹲</p>\n<h4 id=\"4-结构性思维\"><a href=\"#4-结构性思维\" class=\"headerlink\" title=\"4.结构性思维\"></a><strong>4.结构性思维</strong></h4><p>有时候我说话会了一堆，可是很多人还是不明白。其背后的主要原因是自己没有想清楚，就开口说了，想到哪里就说到哪里。结构性思维会是很好的解决方法。结构性思维是采用的总分形式，其结构就像高中的议论文一样。先进行背景介绍（即序言）提出主要观点，然后对其展开并进行论证。在与他人沟通时，会<strong>想的清楚，说的明白</strong>。让听者也会清楚的知道你想表达的意思。</p>\n<h4 id=\"5-高品质沟通\"><a href=\"#5-高品质沟通\" class=\"headerlink\" title=\"5.高品质沟通\"></a><strong>5.高品质沟通</strong></h4><p>每个人来自不同的地方，成长于不同的环境。当然两人会对一件事情会有不同的看法。当双方都怀着：你听我的，你听我的！这种心态来沟通，想必双方彼此都不能了解对方的想法，甚至可能会导致不愉快的事情出现。如果将”你听我的“转换成”<strong>我知道了你的观点，我的观点</strong>“，同时想一下对方所说的话其原因是什么？最终彼此都会很好的知道了对方的想法。</p>\n<h4 id=\"6-心态管理\"><a href=\"#6-心态管理\" class=\"headerlink\" title=\"6.心态管理\"></a>6.心态管理</h4><p><strong>6.1 心态的三驾马车</strong></p>\n<p>我们平常所说的<strong>心态，其具体表现形式是认知，情感，行为</strong>。这三者相辅相存，互相影响。例如：当做一件事情时，我们觉得很无聊，接着就会想到这件事没有意义，最终结果就是不去做这件事情。我们再细想一下这个情景：如果当感到无聊的时，我们想到的是做这件事情可以磨砺我们，使我们成长，其最终结果是我们把这件事做完。</p>\n<p>同样的事情，认知的不同产生了不同的结果。这让我想到ABC理论。</p>\n<p><strong>6.2 情绪ABC理论</strong> </p>\n<p><img src=\"http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&amp;690\" alt=\"http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&amp;690\"></p>\n<p>情绪ABC理论框架：A（Antecedent）指事情的前因，C（Consequence）指事情的后果，有前因必有后果，但是有同样的前因A，产生了不一样的后果C1和C2。这是因为从前因到后果之间，一定会透过一座桥梁B（Bridge），这座桥梁就是认知和我们对情境的评价与解释。又因为，同一情境之下（A），不同的人的认知以及评价与解释不同（B1和B2），所以会得到不同结果（C1和C2）。</p>\n<p>因此，事情发生的一切根源缘于我们的认知(认知是指人们对事件的想法，解释和评价等）。<strong>事物的本身并不影响人，人们只受对事物看法的影响。</strong></p>\n<p>听了这么多道理，<strong>好好去做才是正道</strong>。成功不必在我，而功力必不唐捐。</p>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p>​        1. <a href=\"https://wenku.baidu.com/view/028ca126376baf1ffc4fad5a.html\" target=\"_blank\" rel=\"noopener\">从学校到职场的转变</a></p>\n<p>​        2. <a href=\"https://www.zhihu.com/question/20247508/answer/41385012\" target=\"_blank\" rel=\"noopener\">为什么时间管理上讲优先做的事情是最重要但不紧急的事情？By黛西瓜</a></p>\n<p>​        3. <a href=\"https://zhuanlan.zhihu.com/p/38532813\" target=\"_blank\" rel=\"noopener\">湖畔大学梁宁将情绪ABC理论神谕为“人的底层操作系统”，比能力强大100倍！By水伯</a></p>\n<p>​        4. <a href=\"https://zhuanlan.zhihu.com/p/22035979\" target=\"_blank\" rel=\"noopener\">结构性思维 By浩翊</a></p>\n<p>​        5. <a href=\"https://www.douban.com/note/86761045/\" target=\"_blank\" rel=\"noopener\">赠与今年的大学毕业生(1932年6月27日) By胡适</a></p>\n","site":{"data":{}},"excerpt":"<p>说明：文章是基于结构性思维写出的，下图将文章进行高度概括，详细内容可见全文（选择性阅读即可）。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1at98fsj21dy096dga.jpg\" alt></p>\n<h4 id=\"序言\"><a href=\"#序言\" class=\"headerlink\" title=\"序言\"></a><strong>序言</strong></h4><p>随着公司的规模的扩大，应届生的数量也逐渐增长。然而，从学校刚进入公司的我们，难免会有多多少少的不适应。我们如何能尽快的适应职场环境和更好的成长了？上个星期，公司特与智联教育学院合作，为我们制定了为期5天的培训课程，取得了非常好的效果。</p>\n<h4 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a><strong>结论</strong></h4><p>在这5天的培训课程中，使我的认知、沟通和思考方式得以提升。</p>\n<h4 id=\"1-学校到职场的转变\"><a href=\"#1-学校到职场的转变\" class=\"headerlink\" title=\"1. 学校到职场的转变\"></a><strong>1. 学校到职场的转变</strong></h4>","more":"<p><strong>1.1 个人与团队</strong></p>\n<p>在学校更多的是以个体为单位，我们以自我为中心去上课，心情不好就直接翘课，没有约束。在公司更多是以团队为单位，自己的服务的客户会影响整个团队的绩效，自己写的代码会影响整个团队的开发效率。<strong>自己做的事情将不再再仅仅影响个人，还会影响整个团队</strong>。同时，个人积极的作用会带动起整个团队，反之，则会拖团队的后退。</p>\n<p><strong>1.2 兴趣与职业</strong></p>\n<p>学生的生活更多是凭借自己的兴趣与情绪，我们往往会对自己感兴趣的课程认真听讲，而对无聊乏味的课程则在下面玩手机。但是在公司，我们从事相应的职业，是为他人服务，形成绩效。这是我们职责所在而不在是凭借兴趣，并且<strong>我们应当从追求快乐转变为追求责任</strong>。</p>\n<p><strong>1.3 思维与行动</strong></p>\n<p>学生的思维都很活跃，新点子层出不穷。学校中学习知识，往往是以训练思维为主，注重的是成绩。而在公司，是需要将我们的思维转换为产品，将知识转为绩效，注重的是可行性和商业价值。</p>\n<p><strong>1.4 性格自知</strong></p>\n<p>通过性格色彩测试，了解自己，改变自己。人生嘛，本就是一场提升心智的旅程。</p>\n<h4 id=\"2-时间管理\"><a href=\"#2-时间管理\" class=\"headerlink\" title=\"2.时间管理\"></a><strong>2.时间管理</strong></h4><p><strong>2.1 重要紧急理论</strong></p>\n<p>​    我们生活中所碰到的事情可以分为以下四类：</p>\n<p>​    重要且紧急—立刻亲自处理</p>\n<p>​    重要但不紧急（这一点最重要）—计划性处理</p>\n<p>​    紧急但不重要—授权委任</p>\n<p>​    不重要且不紧急—当作没看见</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv0xopdelj20iq0estfl.jpg\" alt></p>\n<p><strong>2.2 为什么重要但不紧急的事是最需要关注的了？</strong></p>\n<p>我们在生活中会遇到这种场景，每天都很忙碌。但忙完一阵子会发现，自己都不知道在忙什么了，然后心里有时候会安慰自己：反正我没有在玩，我在忙就行了。静下心来就会觉得我们是在沉溺于这种虚幻的充实满足感，做事时依靠的是自己的偏好和外界压力。根据重要紧急理论分析，这种情况就是一直在做重要且紧急的事情和紧急但不重要的事情。为了解除这种困境，对于重要且紧急的事情尽量减少，重要但不紧急的是通过列清单（To do list）来解决。重要但不紧急的事情则要规划好，有了规划，就知道了自己昨天完成了什么，今天在做什么，明天要干什么。每完成规划中的一个阶段，都可以明确知道，还可以知道距离多久能完成这个规划。其本质就是<strong>让规划的事情可视化</strong>。</p>\n<h4 id=\"3-目标管理\"><a href=\"#3-目标管理\" class=\"headerlink\" title=\"3.目标管理\"></a><strong>3.目标管理</strong></h4><p><strong>3.1目标分析法</strong></p>\n<p>说到目标也是说白了也是要规划，要<strong>对目标有全局的考虑</strong>。最常见的误区是碰到一件事时拿起来就干；订下目标后，一来就开始朝着目标前进。可以根据鱼骨分析法按照先整体后细节对目标进行分解，根据SMART原则制定出具体的（Specific），可测量的（Measurable ），可达到的（Attainable），相关的（Relevant），有时间的（Time based ）的目标。当目标产生冲突时，根据目标矩阵发来选择最优解。通过上述3种方法，这样会清楚的知道自己要按照怎样的流程来朝着目标前进。</p>\n<p><strong>3.2 三个Flag</strong></p>\n<p>​    a.四周时间看完剩下的《SpringBoot微信点餐系统》</p>\n<p>​    b.每天中午休息时间看5分钟的书</p>\n<p>​    c.每天10个深蹲</p>\n<h4 id=\"4-结构性思维\"><a href=\"#4-结构性思维\" class=\"headerlink\" title=\"4.结构性思维\"></a><strong>4.结构性思维</strong></h4><p>有时候我说话会了一堆，可是很多人还是不明白。其背后的主要原因是自己没有想清楚，就开口说了，想到哪里就说到哪里。结构性思维会是很好的解决方法。结构性思维是采用的总分形式，其结构就像高中的议论文一样。先进行背景介绍（即序言）提出主要观点，然后对其展开并进行论证。在与他人沟通时，会<strong>想的清楚，说的明白</strong>。让听者也会清楚的知道你想表达的意思。</p>\n<h4 id=\"5-高品质沟通\"><a href=\"#5-高品质沟通\" class=\"headerlink\" title=\"5.高品质沟通\"></a><strong>5.高品质沟通</strong></h4><p>每个人来自不同的地方，成长于不同的环境。当然两人会对一件事情会有不同的看法。当双方都怀着：你听我的，你听我的！这种心态来沟通，想必双方彼此都不能了解对方的想法，甚至可能会导致不愉快的事情出现。如果将”你听我的“转换成”<strong>我知道了你的观点，我的观点</strong>“，同时想一下对方所说的话其原因是什么？最终彼此都会很好的知道了对方的想法。</p>\n<h4 id=\"6-心态管理\"><a href=\"#6-心态管理\" class=\"headerlink\" title=\"6.心态管理\"></a>6.心态管理</h4><p><strong>6.1 心态的三驾马车</strong></p>\n<p>我们平常所说的<strong>心态，其具体表现形式是认知，情感，行为</strong>。这三者相辅相存，互相影响。例如：当做一件事情时，我们觉得很无聊，接着就会想到这件事没有意义，最终结果就是不去做这件事情。我们再细想一下这个情景：如果当感到无聊的时，我们想到的是做这件事情可以磨砺我们，使我们成长，其最终结果是我们把这件事做完。</p>\n<p>同样的事情，认知的不同产生了不同的结果。这让我想到ABC理论。</p>\n<p><strong>6.2 情绪ABC理论</strong> </p>\n<p><img src=\"http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&amp;690\" alt=\"http://s3.sinaimg.cn/mw690/86499eb1ge0f71c009592&amp;690\"></p>\n<p>情绪ABC理论框架：A（Antecedent）指事情的前因，C（Consequence）指事情的后果，有前因必有后果，但是有同样的前因A，产生了不一样的后果C1和C2。这是因为从前因到后果之间，一定会透过一座桥梁B（Bridge），这座桥梁就是认知和我们对情境的评价与解释。又因为，同一情境之下（A），不同的人的认知以及评价与解释不同（B1和B2），所以会得到不同结果（C1和C2）。</p>\n<p>因此，事情发生的一切根源缘于我们的认知(认知是指人们对事件的想法，解释和评价等）。<strong>事物的本身并不影响人，人们只受对事物看法的影响。</strong></p>\n<p>听了这么多道理，<strong>好好去做才是正道</strong>。成功不必在我，而功力必不唐捐。</p>\n<h4 id=\"参考资料：\"><a href=\"#参考资料：\" class=\"headerlink\" title=\"参考资料：\"></a>参考资料：</h4><p>​        1. <a href=\"https://wenku.baidu.com/view/028ca126376baf1ffc4fad5a.html\" target=\"_blank\" rel=\"noopener\">从学校到职场的转变</a></p>\n<p>​        2. <a href=\"https://www.zhihu.com/question/20247508/answer/41385012\" target=\"_blank\" rel=\"noopener\">为什么时间管理上讲优先做的事情是最重要但不紧急的事情？By黛西瓜</a></p>\n<p>​        3. <a href=\"https://zhuanlan.zhihu.com/p/38532813\" target=\"_blank\" rel=\"noopener\">湖畔大学梁宁将情绪ABC理论神谕为“人的底层操作系统”，比能力强大100倍！By水伯</a></p>\n<p>​        4. <a href=\"https://zhuanlan.zhihu.com/p/22035979\" target=\"_blank\" rel=\"noopener\">结构性思维 By浩翊</a></p>\n<p>​        5. <a href=\"https://www.douban.com/note/86761045/\" target=\"_blank\" rel=\"noopener\">赠与今年的大学毕业生(1932年6月27日) By胡适</a></p>"},{"layout":"post","title":"计算机网络笔试题目总结","date":"2017-09-08T13:58:00.000Z","comments":1,"reward":true,"_content":"\n### 1.OSI和TCP/IP的体系结构，以及各层协议\n\nOSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。\nTCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。\n\n<!--more--> \n\n每一层的协议如下：\n物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）\n数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）\n网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）\n传输层：TCP、UDP、SPX\n会话层：NFS、SQL、NETBIOS、RPC\n表示层：JPEG、MPEG、ASII\n应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS\n每一层的作用如下：\n物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）\n数据链路层：将比特组装成帧和点到点的传递（帧Frame）\n网络层：负责数据包从源到宿的传递和网际互连（包PackeT）\n传输层：提供端到端的可靠报文传递和错误恢复（段Segment）\n会话层：建立、管理和终止会话（会话协议数据单元SPDU）\n表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）\n应用层：允许访问OSI环境的手段（应用协议数据单元APDU）\n\n### 2.TCP的三次握手与四次分手\n\n#### 摘自于http://www.jellythink.com/archives/705\n\n#### 三次握手是什么？\n\nTCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的**TCP三次握手**。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou01vjyj20go0ilmy4.jpg)\n\n多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。\n\n1. 第一次握手：建立连接。客户端发送连接请求报文段，将`SYN`位置为1，`Sequence Number`为x；然后，客户端进入`SYN_SEND`状态，等待服务器的确认；\n2. 第二次握手：服务器收到`SYN`报文段。服务器收到客户端的`SYN`报文段，需要对这个`SYN`报文段进行确认，设置`Acknowledgment Number`为x+1(`Sequence Number`+1)；同时，自己自己还要发送`SYN`请求信息，将`SYN`位置为1，`Sequence Number`为y；服务器端将上述所有信息放到一个报文段（即`SYN+ACK`报文段）中，一并发送给客户端，此时服务器进入`SYN_RECV`状态；\n3. 第三次握手：客户端收到服务器的`SYN+ACK`报文段。然后将`Acknowledgment Number`设置为y+1，向服务器发送`ACK`报文段，这个报文段发送完毕以后，客户端和服务器端都进入`ESTABLISHED`状态，完成TCP三次握手。\n\n完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。\n\n**为了加深理解，举个例子。**\n\n**A和B之间建立了TCP连接，A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101，数据部分包含7个字节，那么在B对该报文的确认报文段中（）。**\n\n**A. seq=301, ACK=101  B. seq=301, ACK=108  C.seq=101, ACK =107  D .seq=101, ACK= 307**\n\n**解析：**\n\nA向B发送报文段，其中序号字段seq=300，确认号字段ACK =101。\n\nA对B说：“我已经收到你第100个序列号了，下个序列号要从101开始。我现在给你要以300序列号开始，给7个字节数据。“\n\nB这时应该对A说：”好的，我这就给你发送101的序列号，我这里收到了以300为起点，306为终点的数据了，我现在要307序列号了。“\n\n所以B对该报文的确认报文段中 seq=101, ACK= 307. 选D.\n\n#### 那四次分手呢？\n\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n\n1. 第一次分手：主机1（可以使客户端，也可以是服务器端），设置`Sequence Number`和`Acknowledgment Number`，向主机2发送一个`FIN`报文段；此时，主机1进入`FIN_WAIT_1`状态；这表示主机1没有数据要发送给主机2了；\n\n2. 第二次分手：主机2收到了主机1发送的`FIN`报文段，向主机1回一个`ACK`报文段，`Acknowledgment Number`为`Sequence Number`加1；主机1进入`FIN_WAIT_2`状态；主机2告诉主机1，我“同意”你的关闭请求；\n\n3. 第三次分手：主机2向主机1发送`FIN`报文段，请求关闭连接，同时主机2进入`LAST_ACK`状态；\n\n4. 第四次分手：主机1收到主机2发送的`FIN`报文段，向主机2发送`ACK`报文段，然后主机1进入`TIME_WAIT`状态；主机2收到主机1的`ACK`报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n\n   ​\n\n### 3.子网划分\n\n#### 现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。\n\n202.203.204.0 分成4 个平均的子网，这是个C类的网络 ，平均分成4个的话，也就是每个子网有64台机器。\n\n2的2次方=4 ，所以需要借2个主机位表示 网络 ，等于是26位的子网掩码.\n\n子网掩码: 202.203.204.192\n\n子网号 **00** 202.203.204.1 ~ 202.203.204.63\n\n子网号 **01** 202.203.204.64 ~ 202.203.204.127\n\n子网号 **10** 202.203.204.128 ~ 202.203.204.191\n\n子网号 **11** 202.203.204.192 ~ 202.203.204.254\n\n### 4. IP地址分为哪几类？简单说一下各个分类\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou9520rj20go05q3ze.jpg)\n\n​                                       IPv6 -- 采用128bit，首部固定部分为40字节。","source":"_posts/计算机网络笔试题目总结.md","raw":"---\nlayout: post\ntitle: \"计算机网络笔试题目总结\"\ndate: 2017-9-8 21:58\ncomments: true\nreward: true\ntags: \n\t- 校招\n---\n\n### 1.OSI和TCP/IP的体系结构，以及各层协议\n\nOSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。\nTCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。\n\n<!--more--> \n\n每一层的协议如下：\n物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）\n数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）\n网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）\n传输层：TCP、UDP、SPX\n会话层：NFS、SQL、NETBIOS、RPC\n表示层：JPEG、MPEG、ASII\n应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS\n每一层的作用如下：\n物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）\n数据链路层：将比特组装成帧和点到点的传递（帧Frame）\n网络层：负责数据包从源到宿的传递和网际互连（包PackeT）\n传输层：提供端到端的可靠报文传递和错误恢复（段Segment）\n会话层：建立、管理和终止会话（会话协议数据单元SPDU）\n表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）\n应用层：允许访问OSI环境的手段（应用协议数据单元APDU）\n\n### 2.TCP的三次握手与四次分手\n\n#### 摘自于http://www.jellythink.com/archives/705\n\n#### 三次握手是什么？\n\nTCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的**TCP三次握手**。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou01vjyj20go0ilmy4.jpg)\n\n多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。\n\n1. 第一次握手：建立连接。客户端发送连接请求报文段，将`SYN`位置为1，`Sequence Number`为x；然后，客户端进入`SYN_SEND`状态，等待服务器的确认；\n2. 第二次握手：服务器收到`SYN`报文段。服务器收到客户端的`SYN`报文段，需要对这个`SYN`报文段进行确认，设置`Acknowledgment Number`为x+1(`Sequence Number`+1)；同时，自己自己还要发送`SYN`请求信息，将`SYN`位置为1，`Sequence Number`为y；服务器端将上述所有信息放到一个报文段（即`SYN+ACK`报文段）中，一并发送给客户端，此时服务器进入`SYN_RECV`状态；\n3. 第三次握手：客户端收到服务器的`SYN+ACK`报文段。然后将`Acknowledgment Number`设置为y+1，向服务器发送`ACK`报文段，这个报文段发送完毕以后，客户端和服务器端都进入`ESTABLISHED`状态，完成TCP三次握手。\n\n完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。\n\n**为了加深理解，举个例子。**\n\n**A和B之间建立了TCP连接，A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101，数据部分包含7个字节，那么在B对该报文的确认报文段中（）。**\n\n**A. seq=301, ACK=101  B. seq=301, ACK=108  C.seq=101, ACK =107  D .seq=101, ACK= 307**\n\n**解析：**\n\nA向B发送报文段，其中序号字段seq=300，确认号字段ACK =101。\n\nA对B说：“我已经收到你第100个序列号了，下个序列号要从101开始。我现在给你要以300序列号开始，给7个字节数据。“\n\nB这时应该对A说：”好的，我这就给你发送101的序列号，我这里收到了以300为起点，306为终点的数据了，我现在要307序列号了。“\n\n所以B对该报文的确认报文段中 seq=101, ACK= 307. 选D.\n\n#### 那四次分手呢？\n\n当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。\n\n1. 第一次分手：主机1（可以使客户端，也可以是服务器端），设置`Sequence Number`和`Acknowledgment Number`，向主机2发送一个`FIN`报文段；此时，主机1进入`FIN_WAIT_1`状态；这表示主机1没有数据要发送给主机2了；\n\n2. 第二次分手：主机2收到了主机1发送的`FIN`报文段，向主机1回一个`ACK`报文段，`Acknowledgment Number`为`Sequence Number`加1；主机1进入`FIN_WAIT_2`状态；主机2告诉主机1，我“同意”你的关闭请求；\n\n3. 第三次分手：主机2向主机1发送`FIN`报文段，请求关闭连接，同时主机2进入`LAST_ACK`状态；\n\n4. 第四次分手：主机1收到主机2发送的`FIN`报文段，向主机2发送`ACK`报文段，然后主机1进入`TIME_WAIT`状态；主机2收到主机1的`ACK`报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。\n\n   ​\n\n### 3.子网划分\n\n#### 现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。\n\n202.203.204.0 分成4 个平均的子网，这是个C类的网络 ，平均分成4个的话，也就是每个子网有64台机器。\n\n2的2次方=4 ，所以需要借2个主机位表示 网络 ，等于是26位的子网掩码.\n\n子网掩码: 202.203.204.192\n\n子网号 **00** 202.203.204.1 ~ 202.203.204.63\n\n子网号 **01** 202.203.204.64 ~ 202.203.204.127\n\n子网号 **10** 202.203.204.128 ~ 202.203.204.191\n\n子网号 **11** 202.203.204.192 ~ 202.203.204.254\n\n### 4. IP地址分为哪几类？简单说一下各个分类\n\n![image](https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou9520rj20go05q3ze.jpg)\n\n​                                       IPv6 -- 采用128bit，首部固定部分为40字节。","slug":"计算机网络笔试题目总结","published":1,"updated":"2019-04-28T07:04:47.619Z","photos":[],"link":"","_id":"cjv0ur0gn000obwwiy0hs2vgs","content":"<h3 id=\"1-OSI和TCP-IP的体系结构，以及各层协议\"><a href=\"#1-OSI和TCP-IP的体系结构，以及各层协议\" class=\"headerlink\" title=\"1.OSI和TCP/IP的体系结构，以及各层协议\"></a>1.OSI和TCP/IP的体系结构，以及各层协议</h3><p>OSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。<br>TCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。</p>\n<a id=\"more\"></a> \n<p>每一层的协议如下：<br>物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）<br>数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）<br>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）<br>传输层：TCP、UDP、SPX<br>会话层：NFS、SQL、NETBIOS、RPC<br>表示层：JPEG、MPEG、ASII<br>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS<br>每一层的作用如下：<br>物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）<br>数据链路层：将比特组装成帧和点到点的传递（帧Frame）<br>网络层：负责数据包从源到宿的传递和网际互连（包PackeT）<br>传输层：提供端到端的可靠报文传递和错误恢复（段Segment）<br>会话层：建立、管理和终止会话（会话协议数据单元SPDU）<br>表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）<br>应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</p>\n<h3 id=\"2-TCP的三次握手与四次分手\"><a href=\"#2-TCP的三次握手与四次分手\" class=\"headerlink\" title=\"2.TCP的三次握手与四次分手\"></a>2.TCP的三次握手与四次分手</h3><h4 id=\"摘自于http-www-jellythink-com-archives-705\"><a href=\"#摘自于http-www-jellythink-com-archives-705\" class=\"headerlink\" title=\"摘自于http://www.jellythink.com/archives/705\"></a>摘自于<a href=\"http://www.jellythink.com/archives/705\" target=\"_blank\" rel=\"noopener\">http://www.jellythink.com/archives/705</a></h4><h4 id=\"三次握手是什么？\"><a href=\"#三次握手是什么？\" class=\"headerlink\" title=\"三次握手是什么？\"></a>三次握手是什么？</h4><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的<strong>TCP三次握手</strong>。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou01vjyj20go0ilmy4.jpg\" alt=\"image\"></p>\n<p>多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。</p>\n<ol>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将<code>SYN</code>位置为1，<code>Sequence Number</code>为x；然后，客户端进入<code>SYN_SEND</code>状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到<code>SYN</code>报文段。服务器收到客户端的<code>SYN</code>报文段，需要对这个<code>SYN</code>报文段进行确认，设置<code>Acknowledgment Number</code>为x+1(<code>Sequence Number</code>+1)；同时，自己自己还要发送<code>SYN</code>请求信息，将<code>SYN</code>位置为1，<code>Sequence Number</code>为y；服务器端将上述所有信息放到一个报文段（即<code>SYN+ACK</code>报文段）中，一并发送给客户端，此时服务器进入<code>SYN_RECV</code>状态；</li>\n<li>第三次握手：客户端收到服务器的<code>SYN+ACK</code>报文段。然后将<code>Acknowledgment Number</code>设置为y+1，向服务器发送<code>ACK</code>报文段，这个报文段发送完毕以后，客户端和服务器端都进入<code>ESTABLISHED</code>状态，完成TCP三次握手。</li>\n</ol>\n<p>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</p>\n<p><strong>为了加深理解，举个例子。</strong></p>\n<p><strong>A和B之间建立了TCP连接，A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101，数据部分包含7个字节，那么在B对该报文的确认报文段中（）。</strong></p>\n<p><strong>A. seq=301, ACK=101  B. seq=301, ACK=108  C.seq=101, ACK =107  D .seq=101, ACK= 307</strong></p>\n<p><strong>解析：</strong></p>\n<p>A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101。</p>\n<p>A对B说：“我已经收到你第100个序列号了，下个序列号要从101开始。我现在给你要以300序列号开始，给7个字节数据。“</p>\n<p>B这时应该对A说：”好的，我这就给你发送101的序列号，我这里收到了以300为起点，306为终点的数据了，我现在要307序列号了。“</p>\n<p>所以B对该报文的确认报文段中 seq=101, ACK= 307. 选D.</p>\n<h4 id=\"那四次分手呢？\"><a href=\"#那四次分手呢？\" class=\"headerlink\" title=\"那四次分手呢？\"></a>那四次分手呢？</h4><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>\n<ol>\n<li><p>第一次分手：主机1（可以使客户端，也可以是服务器端），设置<code>Sequence Number</code>和<code>Acknowledgment Number</code>，向主机2发送一个<code>FIN</code>报文段；此时，主机1进入<code>FIN_WAIT_1</code>状态；这表示主机1没有数据要发送给主机2了；</p>\n</li>\n<li><p>第二次分手：主机2收到了主机1发送的<code>FIN</code>报文段，向主机1回一个<code>ACK</code>报文段，<code>Acknowledgment Number</code>为<code>Sequence Number</code>加1；主机1进入<code>FIN_WAIT_2</code>状态；主机2告诉主机1，我“同意”你的关闭请求；</p>\n</li>\n<li><p>第三次分手：主机2向主机1发送<code>FIN</code>报文段，请求关闭连接，同时主机2进入<code>LAST_ACK</code>状态；</p>\n</li>\n<li><p>第四次分手：主机1收到主机2发送的<code>FIN</code>报文段，向主机2发送<code>ACK</code>报文段，然后主机1进入<code>TIME_WAIT</code>状态；主机2收到主机1的<code>ACK</code>报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"3-子网划分\"><a href=\"#3-子网划分\" class=\"headerlink\" title=\"3.子网划分\"></a>3.子网划分</h3><h4 id=\"现有两个-C-类网，202-203-204-0-，把它平均分成-4-个子网，写出每个子网的起始、终结-IP-和子网掩码。\"><a href=\"#现有两个-C-类网，202-203-204-0-，把它平均分成-4-个子网，写出每个子网的起始、终结-IP-和子网掩码。\" class=\"headerlink\" title=\"现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。\"></a>现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。</h4><p>202.203.204.0 分成4 个平均的子网，这是个C类的网络 ，平均分成4个的话，也就是每个子网有64台机器。</p>\n<p>2的2次方=4 ，所以需要借2个主机位表示 网络 ，等于是26位的子网掩码.</p>\n<p>子网掩码: 202.203.204.192</p>\n<p>子网号 <strong>00</strong> 202.203.204.1 ~ 202.203.204.63</p>\n<p>子网号 <strong>01</strong> 202.203.204.64 ~ 202.203.204.127</p>\n<p>子网号 <strong>10</strong> 202.203.204.128 ~ 202.203.204.191</p>\n<p>子网号 <strong>11</strong> 202.203.204.192 ~ 202.203.204.254</p>\n<h3 id=\"4-IP地址分为哪几类？简单说一下各个分类\"><a href=\"#4-IP地址分为哪几类？简单说一下各个分类\" class=\"headerlink\" title=\"4. IP地址分为哪几类？简单说一下各个分类\"></a>4. IP地址分为哪几类？简单说一下各个分类</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou9520rj20go05q3ze.jpg\" alt=\"image\"></p>\n<p>​                                       IPv6 – 采用128bit，首部固定部分为40字节。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-OSI和TCP-IP的体系结构，以及各层协议\"><a href=\"#1-OSI和TCP-IP的体系结构，以及各层协议\" class=\"headerlink\" title=\"1.OSI和TCP/IP的体系结构，以及各层协议\"></a>1.OSI和TCP/IP的体系结构，以及各层协议</h3><p>OSI分层 （7层）：物理层、数据链路层、网络层、传输层、会话层、表示层、应用层。<br>TCP/IP分层（4层）：网络接口层、 网际层、运输层、 应用层。</p>","more":"<p>每一层的协议如下：<br>物理层：RJ45、CLOCK、IEEE802.3 （中继器，集线器）<br>数据链路：PPP、FR、HDLC、VLAN、MAC （网桥，交换机）<br>网络层：IP、ICMP、ARP、RARP、OSPF、IPX、RIP、IGRP、 （路由器）<br>传输层：TCP、UDP、SPX<br>会话层：NFS、SQL、NETBIOS、RPC<br>表示层：JPEG、MPEG、ASII<br>应用层：FTP、DNS、Telnet、SMTP、HTTP、WWW、NFS<br>每一层的作用如下：<br>物理层：通过媒介传输比特,确定机械及电气规范（比特Bit）<br>数据链路层：将比特组装成帧和点到点的传递（帧Frame）<br>网络层：负责数据包从源到宿的传递和网际互连（包PackeT）<br>传输层：提供端到端的可靠报文传递和错误恢复（段Segment）<br>会话层：建立、管理和终止会话（会话协议数据单元SPDU）<br>表示层：对数据进行翻译、加密和压缩（表示协议数据单元PPDU）<br>应用层：允许访问OSI环境的手段（应用协议数据单元APDU）</p>\n<h3 id=\"2-TCP的三次握手与四次分手\"><a href=\"#2-TCP的三次握手与四次分手\" class=\"headerlink\" title=\"2.TCP的三次握手与四次分手\"></a>2.TCP的三次握手与四次分手</h3><h4 id=\"摘自于http-www-jellythink-com-archives-705\"><a href=\"#摘自于http-www-jellythink-com-archives-705\" class=\"headerlink\" title=\"摘自于http://www.jellythink.com/archives/705\"></a>摘自于<a href=\"http://www.jellythink.com/archives/705\" target=\"_blank\" rel=\"noopener\">http://www.jellythink.com/archives/705</a></h4><h4 id=\"三次握手是什么？\"><a href=\"#三次握手是什么？\" class=\"headerlink\" title=\"三次握手是什么？\"></a>三次握手是什么？</h4><p>TCP是面向连接的，无论哪一方向另一方发送数据之前，都必须先在双方之间建立一条连接。在TCP/IP协议中，TCP协议提供可靠的连接服务，连接是通过三次握手进行初始化的。三次握手的目的是同步连接双方的序列号和确认号并交换 TCP窗口大小信息。这就是面试中经常会被问到的<strong>TCP三次握手</strong>。只是了解TCP三次握手的概念，对你获得一份工作是没有任何帮助的，你需要去了解TCP三次握手中的一些细节。先来看图说话。</p>\n<p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou01vjyj20go0ilmy4.jpg\" alt=\"image\"></p>\n<p>多么清晰的一张图，当然了，也不是我画的，我也只是引用过来说明问题了。</p>\n<ol>\n<li>第一次握手：建立连接。客户端发送连接请求报文段，将<code>SYN</code>位置为1，<code>Sequence Number</code>为x；然后，客户端进入<code>SYN_SEND</code>状态，等待服务器的确认；</li>\n<li>第二次握手：服务器收到<code>SYN</code>报文段。服务器收到客户端的<code>SYN</code>报文段，需要对这个<code>SYN</code>报文段进行确认，设置<code>Acknowledgment Number</code>为x+1(<code>Sequence Number</code>+1)；同时，自己自己还要发送<code>SYN</code>请求信息，将<code>SYN</code>位置为1，<code>Sequence Number</code>为y；服务器端将上述所有信息放到一个报文段（即<code>SYN+ACK</code>报文段）中，一并发送给客户端，此时服务器进入<code>SYN_RECV</code>状态；</li>\n<li>第三次握手：客户端收到服务器的<code>SYN+ACK</code>报文段。然后将<code>Acknowledgment Number</code>设置为y+1，向服务器发送<code>ACK</code>报文段，这个报文段发送完毕以后，客户端和服务器端都进入<code>ESTABLISHED</code>状态，完成TCP三次握手。</li>\n</ol>\n<p>完成了三次握手，客户端和服务器端就可以开始传送数据。以上就是TCP三次握手的总体介绍。</p>\n<p><strong>为了加深理解，举个例子。</strong></p>\n<p><strong>A和B之间建立了TCP连接，A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101，数据部分包含7个字节，那么在B对该报文的确认报文段中（）。</strong></p>\n<p><strong>A. seq=301, ACK=101  B. seq=301, ACK=108  C.seq=101, ACK =107  D .seq=101, ACK= 307</strong></p>\n<p><strong>解析：</strong></p>\n<p>A向B发送报文段，其中序号字段seq=300，确认号字段ACK =101。</p>\n<p>A对B说：“我已经收到你第100个序列号了，下个序列号要从101开始。我现在给你要以300序列号开始，给7个字节数据。“</p>\n<p>B这时应该对A说：”好的，我这就给你发送101的序列号，我这里收到了以300为起点，306为终点的数据了，我现在要307序列号了。“</p>\n<p>所以B对该报文的确认报文段中 seq=101, ACK= 307. 选D.</p>\n<h4 id=\"那四次分手呢？\"><a href=\"#那四次分手呢？\" class=\"headerlink\" title=\"那四次分手呢？\"></a>那四次分手呢？</h4><p>当客户端和服务器通过三次握手建立了TCP连接以后，当数据传送完毕，肯定是要断开TCP连接的啊。那对于TCP的断开连接，这里就有了神秘的“四次分手”。</p>\n<ol>\n<li><p>第一次分手：主机1（可以使客户端，也可以是服务器端），设置<code>Sequence Number</code>和<code>Acknowledgment Number</code>，向主机2发送一个<code>FIN</code>报文段；此时，主机1进入<code>FIN_WAIT_1</code>状态；这表示主机1没有数据要发送给主机2了；</p>\n</li>\n<li><p>第二次分手：主机2收到了主机1发送的<code>FIN</code>报文段，向主机1回一个<code>ACK</code>报文段，<code>Acknowledgment Number</code>为<code>Sequence Number</code>加1；主机1进入<code>FIN_WAIT_2</code>状态；主机2告诉主机1，我“同意”你的关闭请求；</p>\n</li>\n<li><p>第三次分手：主机2向主机1发送<code>FIN</code>报文段，请求关闭连接，同时主机2进入<code>LAST_ACK</code>状态；</p>\n</li>\n<li><p>第四次分手：主机1收到主机2发送的<code>FIN</code>报文段，向主机2发送<code>ACK</code>报文段，然后主机1进入<code>TIME_WAIT</code>状态；主机2收到主机1的<code>ACK</code>报文段以后，就关闭连接；此时，主机1等待2MSL后依然没有收到回复，则证明Server端已正常关闭，那好，主机1也可以关闭连接了。</p>\n<p>​</p>\n</li>\n</ol>\n<h3 id=\"3-子网划分\"><a href=\"#3-子网划分\" class=\"headerlink\" title=\"3.子网划分\"></a>3.子网划分</h3><h4 id=\"现有两个-C-类网，202-203-204-0-，把它平均分成-4-个子网，写出每个子网的起始、终结-IP-和子网掩码。\"><a href=\"#现有两个-C-类网，202-203-204-0-，把它平均分成-4-个子网，写出每个子网的起始、终结-IP-和子网掩码。\" class=\"headerlink\" title=\"现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。\"></a>现有两个 C 类网，202.203.204.0 ，把它平均分成 4 个子网，写出每个子网的起始、终结 IP 和子网掩码。</h4><p>202.203.204.0 分成4 个平均的子网，这是个C类的网络 ，平均分成4个的话，也就是每个子网有64台机器。</p>\n<p>2的2次方=4 ，所以需要借2个主机位表示 网络 ，等于是26位的子网掩码.</p>\n<p>子网掩码: 202.203.204.192</p>\n<p>子网号 <strong>00</strong> 202.203.204.1 ~ 202.203.204.63</p>\n<p>子网号 <strong>01</strong> 202.203.204.64 ~ 202.203.204.127</p>\n<p>子网号 <strong>10</strong> 202.203.204.128 ~ 202.203.204.191</p>\n<p>子网号 <strong>11</strong> 202.203.204.192 ~ 202.203.204.254</p>\n<h3 id=\"4-IP地址分为哪几类？简单说一下各个分类\"><a href=\"#4-IP地址分为哪几类？简单说一下各个分类\" class=\"headerlink\" title=\"4. IP地址分为哪几类？简单说一下各个分类\"></a>4. IP地址分为哪几类？简单说一下各个分类</h3><p><img src=\"https://ws1.sinaimg.cn/large/aacc02d8ly1fxvou9520rj20go05q3ze.jpg\" alt=\"image\"></p>\n<p>​                                       IPv6 – 采用128bit，首部固定部分为40字节。</p>"},{"layout":"post","title":"C++基础概念","date":"2018-03-26T13:19:00.000Z","_content":"字符，字符串/字符数组\n\nchar ch = ‘A’;\n\nchar str1[20] = \"Helloworld!\";  \n\nchar str2[ ] = \"Have a niceday!\";\n\n<!--more--> \n\n•数组、函数与指针\n\nint *a[10]; \n\nint (*a)[10]; \n\nint (*a)(int); \n\nint (*a[10])(int); \n\n\n\n–非静态成员数据每个对象都有自己的，互相独立，静态成员数据所有对象只有一份\n\n–非静态成员函数，传递了this指针，指向调用对象，所以在函数内可以操作非静态成员数据。静态成员函数没有this指针，因而不能操作非静态成员数据\n\n抽象类不能实例化。\n\n### 附：计算机面试常考算法题目类型\n\n- 深度优先搜索算法/广度优先搜索算法\n- 贪心算法\n- 滑动窗口算法\n- 分治算法\n- 递归算法\n- 动态规划算法（01背包）","source":"_posts/C++/C++Review.md","raw":"layout: post\ntitle: C++基础概念\ntags:\n  - C++\ncategories: []\ndate: 2018-03-26 21:19:00\n---\n字符，字符串/字符数组\n\nchar ch = ‘A’;\n\nchar str1[20] = \"Helloworld!\";  \n\nchar str2[ ] = \"Have a niceday!\";\n\n<!--more--> \n\n•数组、函数与指针\n\nint *a[10]; \n\nint (*a)[10]; \n\nint (*a)(int); \n\nint (*a[10])(int); \n\n\n\n–非静态成员数据每个对象都有自己的，互相独立，静态成员数据所有对象只有一份\n\n–非静态成员函数，传递了this指针，指向调用对象，所以在函数内可以操作非静态成员数据。静态成员函数没有this指针，因而不能操作非静态成员数据\n\n抽象类不能实例化。\n\n### 附：计算机面试常考算法题目类型\n\n- 深度优先搜索算法/广度优先搜索算法\n- 贪心算法\n- 滑动窗口算法\n- 分治算法\n- 递归算法\n- 动态规划算法（01背包）","slug":"C++/C++Review","published":1,"updated":"2019-04-28T07:04:47.519Z","comments":1,"photos":[],"link":"","_id":"cjv0ur0nw000wbwwil78jyjah","content":"<p>字符，字符串/字符数组</p>\n<p>char ch = ‘A’;</p>\n<p>char str1[20] = “Helloworld!”;  </p>\n<p>char str2[ ] = “Have a niceday!”;</p>\n<a id=\"more\"></a> \n<p>•数组、函数与指针</p>\n<p>int *a[10]; </p>\n<p>int (*a)[10]; </p>\n<p>int (*a)(int); </p>\n<p>int (*a[10])(int); </p>\n<p>–非静态成员数据每个对象都有自己的，互相独立，静态成员数据所有对象只有一份</p>\n<p>–非静态成员函数，传递了this指针，指向调用对象，所以在函数内可以操作非静态成员数据。静态成员函数没有this指针，因而不能操作非静态成员数据</p>\n<p>抽象类不能实例化。</p>\n<h3 id=\"附：计算机面试常考算法题目类型\"><a href=\"#附：计算机面试常考算法题目类型\" class=\"headerlink\" title=\"附：计算机面试常考算法题目类型\"></a>附：计算机面试常考算法题目类型</h3><ul>\n<li>深度优先搜索算法/广度优先搜索算法</li>\n<li>贪心算法</li>\n<li>滑动窗口算法</li>\n<li>分治算法</li>\n<li>递归算法</li>\n<li>动态规划算法（01背包）</li>\n</ul>\n","site":{"data":{}},"excerpt":"<p>字符，字符串/字符数组</p>\n<p>char ch = ‘A’;</p>\n<p>char str1[20] = “Helloworld!”;  </p>\n<p>char str2[ ] = “Have a niceday!”;</p>","more":"<p>•数组、函数与指针</p>\n<p>int *a[10]; </p>\n<p>int (*a)[10]; </p>\n<p>int (*a)(int); </p>\n<p>int (*a[10])(int); </p>\n<p>–非静态成员数据每个对象都有自己的，互相独立，静态成员数据所有对象只有一份</p>\n<p>–非静态成员函数，传递了this指针，指向调用对象，所以在函数内可以操作非静态成员数据。静态成员函数没有this指针，因而不能操作非静态成员数据</p>\n<p>抽象类不能实例化。</p>\n<h3 id=\"附：计算机面试常考算法题目类型\"><a href=\"#附：计算机面试常考算法题目类型\" class=\"headerlink\" title=\"附：计算机面试常考算法题目类型\"></a>附：计算机面试常考算法题目类型</h3><ul>\n<li>深度优先搜索算法/广度优先搜索算法</li>\n<li>贪心算法</li>\n<li>滑动窗口算法</li>\n<li>分治算法</li>\n<li>递归算法</li>\n<li>动态规划算法（01背包）</li>\n</ul>"},{"layout":"post","title":"C++笔面试题目","date":"2017-09-18T08:42:00.000Z","comments":1,"reward":true,"_content":"\n### 1.函数指针\n\na.获取函数地址\n\n```c++\nprocess(think);//passes address of think() to process()\nthought(think);//passes return value of think to thought()\n```\n\n<!--more--> \n\nb.声明函数指针\n\n```C++\ndouble pam(int);//prototype\ndouble (*pf)(int);//pf points to a function that takes\n\t\t\t\t//one int argument and that \n\t\t\t\t//return type double\npf = pam;//pf now points to the pam() function\n```\n\n为提供正确的运算符优先级，必须在声明中使用括号将* pf括起。括号的优先级比*运算符高。\n\n```c++\ndouble (*pf)(int);//pf points to a function that returns double\ndouble *pf(int); //pf() a function that return a pointer-to-double\n```\n\n注意，pam()的参数列表和返回类型必须与pf相同。如果不相同，编译器将拒绝这种赋值：\n\n```c++\ndouble ned(double);\nint ted(int);\ndouble (*pf)(int);\npf = ned;//invalid -- mismatched signature\npf = ted;//invalid -- mismatched return type\n```\n\nc.使用指针来调用函数\n\n```c++\ndouble pam(int);//prototype\ndouble (*pf)(int);//pf points to a function that takes\n\t\t\t\t//one int argument and that \n\t\t\t\t//return type double\npf = pam;//pf now points to the pam() function\ndouble x = pam(4);//call pam() using the function name\ndouble y = (*pf)(5);//call pam() using the pointer pf\ndouble y = pf(5);//also call pam() using the pointer pf\n```\n\n### 2.虚函数工作原理：\n\n编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表(virtual function table，vtbl)。**虚函数表中存储了为类对象进行声明的虚函数地址。**\n\n![image](https://wx2.sinaimg.cn/large/aacc02d8ly1fxvoewmi1hj20rp0ludnv.jpg)\n\n### 3.**结构体内存对齐**\n\n#### **1.什么是内存对齐**\n\n#### 假设我们同时声明两个变量：char a;short b;用&（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\n\n但是如果b的地址为0x0002，那么CPU只需一次读操作就可以获得b的值了。**所以编译器为了优化代码，往往会根据变量的大小，将其指定到合适的位置，即称为内存对齐（对变量b做内存对齐，a、b之间的内存被浪费，a并未多占内存）。**\n\n#### **2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）**\n\n结构体所占用的内存与其成员在结构体中的声明顺序有关，其成员的内存对齐规则如下：\n\n（1）每个成员分别按自己的对齐字节数和PPB（指定的对齐字节数，32位机默认为4）两个字节数最小的那个对齐，这样可以最小化长度。如在32bit的机器上，int的大小为4，因此int存储的位置都是4的整数倍的位置开始存储。\n\n（2）复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式，这样在成员是复杂类型时，结构体数组的时候，可以最小化长度。\n\n（3）结构体对齐后的长度必须是成员中最大的对齐参数（PPB）的整数倍，这样在处理数组时可以保证每一项都边界对齐。 \n\n（4）结构体作为数据成员的对齐规则：在一个struct中包含另一个struct，内部struct应该以它的最大数据成员大小的整数倍开始存储。如 struct A 中包含 struct B, struct B 中包含数据成员 char, int, double，则 struct B 应该以sizeof(double)=8的整数倍为起始地址。\n\n#### **3.实例演示：**\n\n```c++\nstruct A\n{\nchar a;　　　//内存位置:  [0]\ndouble b;　  // 内存位置: [8]...[15]\nint c;　　　　// 内存位置: [16]...[19]　　----　　规则1\n};　　　　　　　 // 内存大小：sizeof(A) = (1+7) + 8 + (4+4) = 24, 补齐[20]...[23]　　----　　规则3\n\nstruct B\n{\nint a,　　　　// 内存位置: [0]...[3]\nA b,　    　　// 内存位置: [8]...[31]　　----　　规则2\nchar c,　　　// 内存位置: [32]\n};　　　　　　　  // 内存大小：sizeof(B) = (4+4) + 24 + (1+7) = 40, 补齐[33]...[39]\n```\n\n*注释：(1+7)表示该数据成员大小为1，补齐7位；(4+4)同理。","source":"_posts/C++/C++笔面试题目.md","raw":"---\nlayout: post\ntitle: \"C++笔面试题目\"\ndate: 2017-09-18 16:42\ncomments: true\nreward: true\ntags: \n\t- C++\n---\n\n### 1.函数指针\n\na.获取函数地址\n\n```c++\nprocess(think);//passes address of think() to process()\nthought(think);//passes return value of think to thought()\n```\n\n<!--more--> \n\nb.声明函数指针\n\n```C++\ndouble pam(int);//prototype\ndouble (*pf)(int);//pf points to a function that takes\n\t\t\t\t//one int argument and that \n\t\t\t\t//return type double\npf = pam;//pf now points to the pam() function\n```\n\n为提供正确的运算符优先级，必须在声明中使用括号将* pf括起。括号的优先级比*运算符高。\n\n```c++\ndouble (*pf)(int);//pf points to a function that returns double\ndouble *pf(int); //pf() a function that return a pointer-to-double\n```\n\n注意，pam()的参数列表和返回类型必须与pf相同。如果不相同，编译器将拒绝这种赋值：\n\n```c++\ndouble ned(double);\nint ted(int);\ndouble (*pf)(int);\npf = ned;//invalid -- mismatched signature\npf = ted;//invalid -- mismatched return type\n```\n\nc.使用指针来调用函数\n\n```c++\ndouble pam(int);//prototype\ndouble (*pf)(int);//pf points to a function that takes\n\t\t\t\t//one int argument and that \n\t\t\t\t//return type double\npf = pam;//pf now points to the pam() function\ndouble x = pam(4);//call pam() using the function name\ndouble y = (*pf)(5);//call pam() using the pointer pf\ndouble y = pf(5);//also call pam() using the pointer pf\n```\n\n### 2.虚函数工作原理：\n\n编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表(virtual function table，vtbl)。**虚函数表中存储了为类对象进行声明的虚函数地址。**\n\n![image](https://wx2.sinaimg.cn/large/aacc02d8ly1fxvoewmi1hj20rp0ludnv.jpg)\n\n### 3.**结构体内存对齐**\n\n#### **1.什么是内存对齐**\n\n#### 假设我们同时声明两个变量：char a;short b;用&（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\n\n但是如果b的地址为0x0002，那么CPU只需一次读操作就可以获得b的值了。**所以编译器为了优化代码，往往会根据变量的大小，将其指定到合适的位置，即称为内存对齐（对变量b做内存对齐，a、b之间的内存被浪费，a并未多占内存）。**\n\n#### **2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）**\n\n结构体所占用的内存与其成员在结构体中的声明顺序有关，其成员的内存对齐规则如下：\n\n（1）每个成员分别按自己的对齐字节数和PPB（指定的对齐字节数，32位机默认为4）两个字节数最小的那个对齐，这样可以最小化长度。如在32bit的机器上，int的大小为4，因此int存储的位置都是4的整数倍的位置开始存储。\n\n（2）复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式，这样在成员是复杂类型时，结构体数组的时候，可以最小化长度。\n\n（3）结构体对齐后的长度必须是成员中最大的对齐参数（PPB）的整数倍，这样在处理数组时可以保证每一项都边界对齐。 \n\n（4）结构体作为数据成员的对齐规则：在一个struct中包含另一个struct，内部struct应该以它的最大数据成员大小的整数倍开始存储。如 struct A 中包含 struct B, struct B 中包含数据成员 char, int, double，则 struct B 应该以sizeof(double)=8的整数倍为起始地址。\n\n#### **3.实例演示：**\n\n```c++\nstruct A\n{\nchar a;　　　//内存位置:  [0]\ndouble b;　  // 内存位置: [8]...[15]\nint c;　　　　// 内存位置: [16]...[19]　　----　　规则1\n};　　　　　　　 // 内存大小：sizeof(A) = (1+7) + 8 + (4+4) = 24, 补齐[20]...[23]　　----　　规则3\n\nstruct B\n{\nint a,　　　　// 内存位置: [0]...[3]\nA b,　    　　// 内存位置: [8]...[31]　　----　　规则2\nchar c,　　　// 内存位置: [32]\n};　　　　　　　  // 内存大小：sizeof(B) = (4+4) + 24 + (1+7) = 40, 补齐[33]...[39]\n```\n\n*注释：(1+7)表示该数据成员大小为1，补齐7位；(4+4)同理。","slug":"C++/C++笔面试题目","published":1,"updated":"2019-04-28T07:04:47.523Z","photos":[],"link":"","_id":"cjv0ur0nx000xbwwipz9prnby","content":"<h3 id=\"1-函数指针\"><a href=\"#1-函数指针\" class=\"headerlink\" title=\"1.函数指针\"></a>1.函数指针</h3><p>a.获取函数地址</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process(think);<span class=\"comment\">//passes address of think() to process()</span></span><br><span class=\"line\">thought(think);<span class=\"comment\">//passes return value of think to thought()</span></span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<p>b.声明函数指针</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pam</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;<span class=\"comment\">//prototype</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that takes</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//one int argument and that </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//return type double</span></span><br><span class=\"line\">pf = pam;<span class=\"comment\">//pf now points to the pam() function</span></span><br></pre></td></tr></table></figure>\n<p>为提供正确的运算符优先级，必须在声明中使用括号将<em> pf括起。括号的优先级比</em>运算符高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that returns double</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> *<span class=\"title\">pf</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>; <span class=\"comment\">//pf() a function that return a pointer-to-double</span></span><br></pre></td></tr></table></figure>\n<p>注意，pam()的参数列表和返回类型必须与pf相同。如果不相同，编译器将拒绝这种赋值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">ned</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ted</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">pf = ned;<span class=\"comment\">//invalid -- mismatched signature</span></span><br><span class=\"line\">pf = ted;<span class=\"comment\">//invalid -- mismatched return type</span></span><br></pre></td></tr></table></figure>\n<p>c.使用指针来调用函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pam</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;<span class=\"comment\">//prototype</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that takes</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//one int argument and that </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//return type double</span></span><br><span class=\"line\">pf = pam;<span class=\"comment\">//pf now points to the pam() function</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> x = pam(<span class=\"number\">4</span>);<span class=\"comment\">//call pam() using the function name</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> y = (*pf)(<span class=\"number\">5</span>);<span class=\"comment\">//call pam() using the pointer pf</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> y = pf(<span class=\"number\">5</span>);<span class=\"comment\">//also call pam() using the pointer pf</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-虚函数工作原理：\"><a href=\"#2-虚函数工作原理：\" class=\"headerlink\" title=\"2.虚函数工作原理：\"></a>2.虚函数工作原理：</h3><p>编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表(virtual function table，vtbl)。<strong>虚函数表中存储了为类对象进行声明的虚函数地址。</strong></p>\n<p><img src=\"https://wx2.sinaimg.cn/large/aacc02d8ly1fxvoewmi1hj20rp0ludnv.jpg\" alt=\"image\"></p>\n<h3 id=\"3-结构体内存对齐\"><a href=\"#3-结构体内存对齐\" class=\"headerlink\" title=\"3.结构体内存对齐\"></a>3.<strong>结构体内存对齐</strong></h3><h4 id=\"1-什么是内存对齐\"><a href=\"#1-什么是内存对齐\" class=\"headerlink\" title=\"1.什么是内存对齐\"></a><strong>1.什么是内存对齐</strong></h4><h4 id=\"假设我们同时声明两个变量：char-a-short-b-用-amp-（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？-答案就是它确实没被使用。-因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\"><a href=\"#假设我们同时声明两个变量：char-a-short-b-用-amp-（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？-答案就是它确实没被使用。-因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\" class=\"headerlink\" title=\"假设我们同时声明两个变量：char a;short b;用&amp;（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\"></a>假设我们同时声明两个变量：char a;short b;用&amp;（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。</h4><p>但是如果b的地址为0x0002，那么CPU只需一次读操作就可以获得b的值了。<strong>所以编译器为了优化代码，往往会根据变量的大小，将其指定到合适的位置，即称为内存对齐（对变量b做内存对齐，a、b之间的内存被浪费，a并未多占内存）。</strong></p>\n<h4 id=\"2-结构体内存对齐规则（请记住三条内存规则-在没有-pragam-pack宏的情况下）\"><a href=\"#2-结构体内存对齐规则（请记住三条内存规则-在没有-pragam-pack宏的情况下）\" class=\"headerlink\" title=\"2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）\"></a><strong>2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）</strong></h4><p>结构体所占用的内存与其成员在结构体中的声明顺序有关，其成员的内存对齐规则如下：</p>\n<p>（1）每个成员分别按自己的对齐字节数和PPB（指定的对齐字节数，32位机默认为4）两个字节数最小的那个对齐，这样可以最小化长度。如在32bit的机器上，int的大小为4，因此int存储的位置都是4的整数倍的位置开始存储。</p>\n<p>（2）复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式，这样在成员是复杂类型时，结构体数组的时候，可以最小化长度。</p>\n<p>（3）结构体对齐后的长度必须是成员中最大的对齐参数（PPB）的整数倍，这样在处理数组时可以保证每一项都边界对齐。 </p>\n<p>（4）结构体作为数据成员的对齐规则：在一个struct中包含另一个struct，内部struct应该以它的最大数据成员大小的整数倍开始存储。如 struct A 中包含 struct B, struct B 中包含数据成员 char, int, double，则 struct B 应该以sizeof(double)=8的整数倍为起始地址。</p>\n<h4 id=\"3-实例演示：\"><a href=\"#3-实例演示：\" class=\"headerlink\" title=\"3.实例演示：\"></a><strong>3.实例演示：</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a;　　　<span class=\"comment\">//内存位置:  [0]</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> b;　  <span class=\"comment\">// 内存位置: [8]...[15]</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c;　　　　<span class=\"comment\">// 内存位置: [16]...[19]　　----　　规则1</span></span><br><span class=\"line\">&#125;;　　　　　　　 <span class=\"comment\">// 内存大小：sizeof(A) = (1+7) + 8 + (4+4) = 24, 补齐[20]...[23]　　----　　规则3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a,　　　　<span class=\"comment\">// 内存位置: [0]...[3]</span></span><br><span class=\"line\">A b,　    　　<span class=\"comment\">// 内存位置: [8]...[31]　　----　　规则2</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c,　　　<span class=\"comment\">// 内存位置: [32]</span></span><br><span class=\"line\">&#125;;　　　　　　　  <span class=\"comment\">// 内存大小：sizeof(B) = (4+4) + 24 + (1+7) = 40, 补齐[33]...[39]</span></span><br></pre></td></tr></table></figure>\n<p>*注释：(1+7)表示该数据成员大小为1，补齐7位；(4+4)同理。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"1-函数指针\"><a href=\"#1-函数指针\" class=\"headerlink\" title=\"1.函数指针\"></a>1.函数指针</h3><p>a.获取函数地址</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">process(think);<span class=\"comment\">//passes address of think() to process()</span></span><br><span class=\"line\">thought(think);<span class=\"comment\">//passes return value of think to thought()</span></span><br></pre></td></tr></table></figure>","more":"<p>b.声明函数指针</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pam</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;<span class=\"comment\">//prototype</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that takes</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//one int argument and that </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//return type double</span></span><br><span class=\"line\">pf = pam;<span class=\"comment\">//pf now points to the pam() function</span></span><br></pre></td></tr></table></figure>\n<p>为提供正确的运算符优先级，必须在声明中使用括号将<em> pf括起。括号的优先级比</em>运算符高。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that returns double</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> *<span class=\"title\">pf</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>; <span class=\"comment\">//pf() a function that return a pointer-to-double</span></span><br></pre></td></tr></table></figure>\n<p>注意，pam()的参数列表和返回类型必须与pf相同。如果不相同，编译器将拒绝这种赋值：</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">ned</span><span class=\"params\">(<span class=\"keyword\">double</span>)</span></span>;</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">ted</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;</span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);</span><br><span class=\"line\">pf = ned;<span class=\"comment\">//invalid -- mismatched signature</span></span><br><span class=\"line\">pf = ted;<span class=\"comment\">//invalid -- mismatched return type</span></span><br></pre></td></tr></table></figure>\n<p>c.使用指针来调用函数</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">double</span> <span class=\"title\">pam</span><span class=\"params\">(<span class=\"keyword\">int</span>)</span></span>;<span class=\"comment\">//prototype</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> (*pf)(<span class=\"keyword\">int</span>);<span class=\"comment\">//pf points to a function that takes</span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//one int argument and that </span></span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//return type double</span></span><br><span class=\"line\">pf = pam;<span class=\"comment\">//pf now points to the pam() function</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> x = pam(<span class=\"number\">4</span>);<span class=\"comment\">//call pam() using the function name</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> y = (*pf)(<span class=\"number\">5</span>);<span class=\"comment\">//call pam() using the pointer pf</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> y = pf(<span class=\"number\">5</span>);<span class=\"comment\">//also call pam() using the pointer pf</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"2-虚函数工作原理：\"><a href=\"#2-虚函数工作原理：\" class=\"headerlink\" title=\"2.虚函数工作原理：\"></a>2.虚函数工作原理：</h3><p>编译器处理虚函数的方法是：给每个对象添加一个隐藏成员。隐藏成员中保存了一个指向函数地址数组的指针。这种数组称为虚函数表(virtual function table，vtbl)。<strong>虚函数表中存储了为类对象进行声明的虚函数地址。</strong></p>\n<p><img src=\"https://wx2.sinaimg.cn/large/aacc02d8ly1fxvoewmi1hj20rp0ludnv.jpg\" alt=\"image\"></p>\n<h3 id=\"3-结构体内存对齐\"><a href=\"#3-结构体内存对齐\" class=\"headerlink\" title=\"3.结构体内存对齐\"></a>3.<strong>结构体内存对齐</strong></h3><h4 id=\"1-什么是内存对齐\"><a href=\"#1-什么是内存对齐\" class=\"headerlink\" title=\"1.什么是内存对齐\"></a><strong>1.什么是内存对齐</strong></h4><h4 id=\"假设我们同时声明两个变量：char-a-short-b-用-amp-（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？-答案就是它确实没被使用。-因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\"><a href=\"#假设我们同时声明两个变量：char-a-short-b-用-amp-（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？-答案就是它确实没被使用。-因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\" class=\"headerlink\" title=\"假设我们同时声明两个变量：char a;short b;用&amp;（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。\"></a>假设我们同时声明两个变量：char a;short b;用&amp;（取地址符号）观察变量a，b的地址的话，我们会发现（以16位CPU为例）：如果a的地址是0x0000，那么b的地址将会是0x0002或者是0x0004。那么就出现这样一个问题：0x0001这个地址没有被使用，那它干什么去了？ 答案就是它确实没被使用。 因为CPU每次都是从以2字节（16位CPU）或是4字节（32位CPU）的整数倍的内存地址中读进数据的。如果变量b的地址是0x0001的话，那么CPU就需要先从0x0000中读取一个short，取它的高8位放入b的低8位，然后再从0x0002中读取下一个short，取它的低8位放入b的高8位中，这样的话，为了获得b的值，CPU需要进行了两次读操作。</h4><p>但是如果b的地址为0x0002，那么CPU只需一次读操作就可以获得b的值了。<strong>所以编译器为了优化代码，往往会根据变量的大小，将其指定到合适的位置，即称为内存对齐（对变量b做内存对齐，a、b之间的内存被浪费，a并未多占内存）。</strong></p>\n<h4 id=\"2-结构体内存对齐规则（请记住三条内存规则-在没有-pragam-pack宏的情况下）\"><a href=\"#2-结构体内存对齐规则（请记住三条内存规则-在没有-pragam-pack宏的情况下）\" class=\"headerlink\" title=\"2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）\"></a><strong>2.结构体内存对齐规则（请记住三条内存规则(在没有#pragam pack宏的情况下）</strong></h4><p>结构体所占用的内存与其成员在结构体中的声明顺序有关，其成员的内存对齐规则如下：</p>\n<p>（1）每个成员分别按自己的对齐字节数和PPB（指定的对齐字节数，32位机默认为4）两个字节数最小的那个对齐，这样可以最小化长度。如在32bit的机器上，int的大小为4，因此int存储的位置都是4的整数倍的位置开始存储。</p>\n<p>（2）复杂类型(如结构)的默认对齐方式是它最长的成员的对齐方式，这样在成员是复杂类型时，结构体数组的时候，可以最小化长度。</p>\n<p>（3）结构体对齐后的长度必须是成员中最大的对齐参数（PPB）的整数倍，这样在处理数组时可以保证每一项都边界对齐。 </p>\n<p>（4）结构体作为数据成员的对齐规则：在一个struct中包含另一个struct，内部struct应该以它的最大数据成员大小的整数倍开始存储。如 struct A 中包含 struct B, struct B 中包含数据成员 char, int, double，则 struct B 应该以sizeof(double)=8的整数倍为起始地址。</p>\n<h4 id=\"3-实例演示：\"><a href=\"#3-实例演示：\" class=\"headerlink\" title=\"3.实例演示：\"></a><strong>3.实例演示：</strong></h4><figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">A</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> a;　　　<span class=\"comment\">//内存位置:  [0]</span></span><br><span class=\"line\"><span class=\"keyword\">double</span> b;　  <span class=\"comment\">// 内存位置: [8]...[15]</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> c;　　　　<span class=\"comment\">// 内存位置: [16]...[19]　　----　　规则1</span></span><br><span class=\"line\">&#125;;　　　　　　　 <span class=\"comment\">// 内存大小：sizeof(A) = (1+7) + 8 + (4+4) = 24, 补齐[20]...[23]　　----　　规则3</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">B</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\"><span class=\"keyword\">int</span> a,　　　　<span class=\"comment\">// 内存位置: [0]...[3]</span></span><br><span class=\"line\">A b,　    　　<span class=\"comment\">// 内存位置: [8]...[31]　　----　　规则2</span></span><br><span class=\"line\"><span class=\"keyword\">char</span> c,　　　<span class=\"comment\">// 内存位置: [32]</span></span><br><span class=\"line\">&#125;;　　　　　　　  <span class=\"comment\">// 内存大小：sizeof(B) = (4+4) + 24 + (1+7) = 40, 补齐[33]...[39]</span></span><br></pre></td></tr></table></figure>\n<p>*注释：(1+7)表示该数据成员大小为1，补齐7位；(4+4)同理。</p>"},{"layout":"post","title":"Matrix multiply","_content":"如果直接按矩阵乘法定义来计算的话需要MNP次乘法\n\n```c\nstruct matrix\n{\n    int a[2][2];\n};\nmatrix mul(matrix x,matrix y)\n{\n    matrix temp;\n    memset(temp.a,0,sizeof(temp.a));\n    for(int i=0;i<2;i++)\n        for(int j=0;j<2;j++)\n        for(int k=0;k<2;k++)\n        temp.a[i][j]=(temp.a[i][j]+x.a[i][k]*y.a[k][j])%M;\n    return temp;\n}\nmatrix mpow(matrix A,int n)\n{\n    matrix B;\n    memset(B.a,0,sizeof(B.a));\n    for(int i=0;i<2;i++)\n        B.a[i][i]=1;\n    while(n>0)\n    {\n        if(n&1)\n            B=mul(B,A);\n        A=mul(A,A);\n        n>>=1;\n    }\n    return B;\n}\n```\n\n<!--more--> \n\n## 有一个产生1~5的随机数，怎么产生1~7的随机数\n\n### 特殊：\n\n已知有个rand7()的函数，返回1到7随机自然数，怎样利用这个rand7()构造rand10()，随机1~10。产生随机数的主要原则是每个数出现的概率是相等的，如果可以得到一组等概率出现的数字，那么就可以从中找到映射为1~10的方法。rand7()返回1~7的自然数，构造新的函数 (rand7()-1)*7 + rand7()，这个函数会随机产生1~49的自然数。原因是1~49中的每个数只有唯一的第一个rand7()的值和第二个rand7()的值表示，于是它们出现的概率是相等。但是这里的数字太多，可以丢弃41~49的数字，把1~40的数字分成10组，每组映射成1~10中的一个，于是可以得到随机的结果。具体方法是，利用(rand7()-1)*7 + rand7()产生随机数x，如果大于40则继续随机直到小于等于40为止，如果小于等于40，则产生的随机数为(x-1)/4+1。\n\n### 一般：\n\n已知有个randM()的函数，返回1到M随机自然数，怎样利用这个randM()构造randN()，随机1~N。上题的扩展。当N<=M时可以直接得到。当N>M时，类似构造(randM()-1)*M + randM()，可以产生1~M^2（即randM^2），可以在M^2中选出N个构造1~N的映射。如果M^2还是没有N大，则可以对于randM^2继续构造，直到成功为止。","source":"_posts/C++/Matrix multiply.md","raw":"---\nlayout: post\ntitle: \"Matrix multiply\"\ntags: \n\t- C++\n---\n如果直接按矩阵乘法定义来计算的话需要MNP次乘法\n\n```c\nstruct matrix\n{\n    int a[2][2];\n};\nmatrix mul(matrix x,matrix y)\n{\n    matrix temp;\n    memset(temp.a,0,sizeof(temp.a));\n    for(int i=0;i<2;i++)\n        for(int j=0;j<2;j++)\n        for(int k=0;k<2;k++)\n        temp.a[i][j]=(temp.a[i][j]+x.a[i][k]*y.a[k][j])%M;\n    return temp;\n}\nmatrix mpow(matrix A,int n)\n{\n    matrix B;\n    memset(B.a,0,sizeof(B.a));\n    for(int i=0;i<2;i++)\n        B.a[i][i]=1;\n    while(n>0)\n    {\n        if(n&1)\n            B=mul(B,A);\n        A=mul(A,A);\n        n>>=1;\n    }\n    return B;\n}\n```\n\n<!--more--> \n\n## 有一个产生1~5的随机数，怎么产生1~7的随机数\n\n### 特殊：\n\n已知有个rand7()的函数，返回1到7随机自然数，怎样利用这个rand7()构造rand10()，随机1~10。产生随机数的主要原则是每个数出现的概率是相等的，如果可以得到一组等概率出现的数字，那么就可以从中找到映射为1~10的方法。rand7()返回1~7的自然数，构造新的函数 (rand7()-1)*7 + rand7()，这个函数会随机产生1~49的自然数。原因是1~49中的每个数只有唯一的第一个rand7()的值和第二个rand7()的值表示，于是它们出现的概率是相等。但是这里的数字太多，可以丢弃41~49的数字，把1~40的数字分成10组，每组映射成1~10中的一个，于是可以得到随机的结果。具体方法是，利用(rand7()-1)*7 + rand7()产生随机数x，如果大于40则继续随机直到小于等于40为止，如果小于等于40，则产生的随机数为(x-1)/4+1。\n\n### 一般：\n\n已知有个randM()的函数，返回1到M随机自然数，怎样利用这个randM()构造randN()，随机1~N。上题的扩展。当N<=M时可以直接得到。当N>M时，类似构造(randM()-1)*M + randM()，可以产生1~M^2（即randM^2），可以在M^2中选出N个构造1~N的映射。如果M^2还是没有N大，则可以对于randM^2继续构造，直到成功为止。","slug":"C++/Matrix multiply","published":1,"date":"2019-04-28T07:04:47.536Z","updated":"2019-04-28T07:04:47.537Z","comments":1,"photos":[],"link":"","_id":"cjv0ur0ny000zbwwid3nnhhi9","content":"<p>如果直接按矩阵乘法定义来计算的话需要MNP次乘法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matrix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">mul</span><span class=\"params\">(matrix x,matrix y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    matrix temp;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(temp.a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(temp.a));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">2</span>;k++)</span><br><span class=\"line\">        temp.a[i][j]=(temp.a[i][j]+x.a[i][k]*y.a[k][j])%M;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">mpow</span><span class=\"params\">(matrix A,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    matrix B;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(B.a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(B.a));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        B.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            B=mul(B,A);</span><br><span class=\"line\">        A=mul(A,A);</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<h2 id=\"有一个产生1-5的随机数，怎么产生1-7的随机数\"><a href=\"#有一个产生1-5的随机数，怎么产生1-7的随机数\" class=\"headerlink\" title=\"有一个产生1~5的随机数，怎么产生1~7的随机数\"></a>有一个产生1~5的随机数，怎么产生1~7的随机数</h2><h3 id=\"特殊：\"><a href=\"#特殊：\" class=\"headerlink\" title=\"特殊：\"></a>特殊：</h3><p>已知有个rand7()的函数，返回1到7随机自然数，怎样利用这个rand7()构造rand10()，随机1~10。产生随机数的主要原则是每个数出现的概率是相等的，如果可以得到一组等概率出现的数字，那么就可以从中找到映射为1~10的方法。rand7()返回1~7的自然数，构造新的函数 (rand7()-1)<em>7 + rand7()，这个函数会随机产生1~49的自然数。原因是1~49中的每个数只有唯一的第一个rand7()的值和第二个rand7()的值表示，于是它们出现的概率是相等。但是这里的数字太多，可以丢弃41~49的数字，把1~40的数字分成10组，每组映射成1~10中的一个，于是可以得到随机的结果。具体方法是，利用(rand7()-1)</em>7 + rand7()产生随机数x，如果大于40则继续随机直到小于等于40为止，如果小于等于40，则产生的随机数为(x-1)/4+1。</p>\n<h3 id=\"一般：\"><a href=\"#一般：\" class=\"headerlink\" title=\"一般：\"></a>一般：</h3><p>已知有个randM()的函数，返回1到M随机自然数，怎样利用这个randM()构造randN()，随机1~N。上题的扩展。当N&lt;=M时可以直接得到。当N&gt;M时，类似构造(randM()-1)*M + randM()，可以产生1~M^2（即randM^2），可以在M^2中选出N个构造1~N的映射。如果M^2还是没有N大，则可以对于randM^2继续构造，直到成功为止。</p>\n","site":{"data":{}},"excerpt":"<p>如果直接按矩阵乘法定义来计算的话需要MNP次乘法</p>\n<figure class=\"highlight c\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">struct</span> <span class=\"title\">matrix</span></span></span><br><span class=\"line\"><span class=\"class\">&#123;</span></span><br><span class=\"line\">    <span class=\"keyword\">int</span> a[<span class=\"number\">2</span>][<span class=\"number\">2</span>];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">mul</span><span class=\"params\">(matrix x,matrix y)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    matrix temp;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(temp.a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(temp.a));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> j=<span class=\"number\">0</span>;j&lt;<span class=\"number\">2</span>;j++)</span><br><span class=\"line\">        <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> k=<span class=\"number\">0</span>;k&lt;<span class=\"number\">2</span>;k++)</span><br><span class=\"line\">        temp.a[i][j]=(temp.a[i][j]+x.a[i][k]*y.a[k][j])%M;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> temp;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"><span class=\"function\">matrix <span class=\"title\">mpow</span><span class=\"params\">(matrix A,<span class=\"keyword\">int</span> n)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">    matrix B;</span><br><span class=\"line\">    <span class=\"built_in\">memset</span>(B.a,<span class=\"number\">0</span>,<span class=\"keyword\">sizeof</span>(B.a));</span><br><span class=\"line\">    <span class=\"keyword\">for</span>(<span class=\"keyword\">int</span> i=<span class=\"number\">0</span>;i&lt;<span class=\"number\">2</span>;i++)</span><br><span class=\"line\">        B.a[i][i]=<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(n&gt;<span class=\"number\">0</span>)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(n&amp;<span class=\"number\">1</span>)</span><br><span class=\"line\">            B=mul(B,A);</span><br><span class=\"line\">        A=mul(A,A);</span><br><span class=\"line\">        n&gt;&gt;=<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> B;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<h2 id=\"有一个产生1-5的随机数，怎么产生1-7的随机数\"><a href=\"#有一个产生1-5的随机数，怎么产生1-7的随机数\" class=\"headerlink\" title=\"有一个产生1~5的随机数，怎么产生1~7的随机数\"></a>有一个产生1~5的随机数，怎么产生1~7的随机数</h2><h3 id=\"特殊：\"><a href=\"#特殊：\" class=\"headerlink\" title=\"特殊：\"></a>特殊：</h3><p>已知有个rand7()的函数，返回1到7随机自然数，怎样利用这个rand7()构造rand10()，随机1~10。产生随机数的主要原则是每个数出现的概率是相等的，如果可以得到一组等概率出现的数字，那么就可以从中找到映射为1~10的方法。rand7()返回1~7的自然数，构造新的函数 (rand7()-1)<em>7 + rand7()，这个函数会随机产生1~49的自然数。原因是1~49中的每个数只有唯一的第一个rand7()的值和第二个rand7()的值表示，于是它们出现的概率是相等。但是这里的数字太多，可以丢弃41~49的数字，把1~40的数字分成10组，每组映射成1~10中的一个，于是可以得到随机的结果。具体方法是，利用(rand7()-1)</em>7 + rand7()产生随机数x，如果大于40则继续随机直到小于等于40为止，如果小于等于40，则产生的随机数为(x-1)/4+1。</p>\n<h3 id=\"一般：\"><a href=\"#一般：\" class=\"headerlink\" title=\"一般：\"></a>一般：</h3><p>已知有个randM()的函数，返回1到M随机自然数，怎样利用这个randM()构造randN()，随机1~N。上题的扩展。当N&lt;=M时可以直接得到。当N&gt;M时，类似构造(randM()-1)*M + randM()，可以产生1~M^2（即randM^2），可以在M^2中选出N个构造1~N的映射。如果M^2还是没有N大，则可以对于randM^2继续构造，直到成功为止。</p>"},{"layout":"post","title":"双指针逼近法","date":"2017-09-11T11:58:00.000Z","comments":1,"reward":true,"_content":"\n#### 双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\n\n#### leetcode-15.3Sum\n\nGiven an array *S* of *n* integers, are there elements *a*, *b*, *c* in *S* such that *a* + *b* + *c* = 0? Find all unique triplets in the array which gives the sum of zero.\n\n**Note:** The solution set must not contain duplicate triplets.\n\n```\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n题意：在给定的一个数组中找到三个之数为0的组合。\n\n<!--more--> \n\nNote：1.用暴力的方法，时间复杂度会达到O(n^3),用双指针逼近法将时间复杂度降到O(n^2)。\n\n​\t    2.三个数的组合中有相同的组合，要考虑到去除重复的。\n\n```C++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n            vector<vector<int>> sum; //save three elements whose sum = 0;\n        \tsort(nums.begin(), nums.end());\n            int temp_a=-1;int temp_b=-1; int temp_c = -1;\n\t        for (int i = 0; i < nums.size(); i++)\n            {\n                if (i!=0 &&nums[i] == nums[i-1])//avoid duplicate nums[i]\n                    continue;\n                int aa = nums[i];\n                int l = i+1; int r = nums.size()-1;//two pointer\n                while(l<r)\n                {\n                    int temp = aa+nums[l]+nums[r];\n                    if(temp == 0)\n                    {\n                        //avoid duplicate triplets\n                        if(temp_a != aa || temp_b != nums[l] || temp_c != nums[r])\n                        {\n                            temp_a=aa;\n                            temp_b=nums[l];\n                            temp_c=nums[r];\n                            vector<int>temp_sum;\n                            temp_sum.push_back(temp_a);\n                            temp_sum.push_back(temp_b);\n                            temp_sum.push_back(temp_c);\n                            sum.push_back(temp_sum);\n                            temp_sum.clear();\n                        }\n\t\t\t\t\t    l++;//move pointer\n\t\t\t\t\t    r--;\n                    }\n                    else if(temp < 0)//move pointer\n                            l++;\n                        else\n                            r--;\n                }\n            }\n        return sum;\n    }\n};\n```\n\n#### leetcode-11.Container With Most Water\n\nGiven *n* non-negative integers *a1*, *a2*, ..., *an*, where each represents a point at coordinate (*i*, *ai*). *n* vertical lines are drawn such that the two endpoints of line *i* is at (*i*, *ai*) and (*i*, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and *n* is at least 2.\n\nNote:每个点之间的横坐标是等间隔的。要求出最大的容器，是由“短板”高来决定的和宽，所以这里采用双指针逼近法一开始将两个指针分别指向首和尾，然后逐渐向中间逼近求出最大容器。\n\n```c++\nclass Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int l = 0;\n        int r = height.size()-1;//two pointer\n        int ans = 0 ;\n        while(l < r)\n        {\n            int temp = (r-l)*min(height[l],height[r]);//calculating formula \n            if(temp > ans)\n                ans = temp;\n            if(height[l] == height[r])\n                if(height[r-1] > height[l+1])\n                    r--;//pointer move\n                else\n                    l++;\n            else if(height[l] < height[r])\n                    l++;\n                else\n                    r--;\n        }\n        return ans;\n    }\n};\n```\n\n---\n\n### 快速排序\n\n做完这两个题，使我快排的认识比以前认识更深了，因为快排中也用到类似的双指针逼近法。\n\n```c++\nvoid quick_sort(int a[], int l, int r)\n{\n\tif (l < r){\n\t\tint x = a[l];//chose a pivot\n\t\tint i = l; int j = r;//two pointer\n\t\twhile (i < j)\n\t\t{\n\t\t\twhile (i < j && x <= a[j])//find a number which is less than pivot\n\t\t\t\tj--;\n\t\t\tif (i<j)//find a number\n\t\t\t\ta[i] = a[j];\n\t\t\twhile (i < j && x > a[i])\n\t\t\t\ti++;\n\t\t\tif (i<j)\n\t\t\ta[j] = a[i];\t\t\n\t\t}\n\t\ta[i] = x;\n\t\tquick_sort(a, l, i - 1);\n\t\tquick_sort(a, i + 1, r); \n\t}\n}\n```\n\n[白话经典算法系列之六 快速排序 快速搞定](http://blog.csdn.net/morewindows/article/details/6684558)\n\n","source":"_posts/C++/两个指针在算法中的应用.md","raw":"---\nlayout: post\ntitle: \"双指针逼近法\"\ndate: 2017-09-11 19:58\ncomments: true\nreward: true\ntags: \n\t- leetcode\n\t- C++\n---\n\n#### 双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\n\n#### leetcode-15.3Sum\n\nGiven an array *S* of *n* integers, are there elements *a*, *b*, *c* in *S* such that *a* + *b* + *c* = 0? Find all unique triplets in the array which gives the sum of zero.\n\n**Note:** The solution set must not contain duplicate triplets.\n\n```\nFor example, given array S = [-1, 0, 1, 2, -1, -4],\n\nA solution set is:\n[\n  [-1, 0, 1],\n  [-1, -1, 2]\n]\n```\n\n题意：在给定的一个数组中找到三个之数为0的组合。\n\n<!--more--> \n\nNote：1.用暴力的方法，时间复杂度会达到O(n^3),用双指针逼近法将时间复杂度降到O(n^2)。\n\n​\t    2.三个数的组合中有相同的组合，要考虑到去除重复的。\n\n```C++\nclass Solution {\npublic:\n    vector<vector<int>> threeSum(vector<int>& nums) {\n        \n            vector<vector<int>> sum; //save three elements whose sum = 0;\n        \tsort(nums.begin(), nums.end());\n            int temp_a=-1;int temp_b=-1; int temp_c = -1;\n\t        for (int i = 0; i < nums.size(); i++)\n            {\n                if (i!=0 &&nums[i] == nums[i-1])//avoid duplicate nums[i]\n                    continue;\n                int aa = nums[i];\n                int l = i+1; int r = nums.size()-1;//two pointer\n                while(l<r)\n                {\n                    int temp = aa+nums[l]+nums[r];\n                    if(temp == 0)\n                    {\n                        //avoid duplicate triplets\n                        if(temp_a != aa || temp_b != nums[l] || temp_c != nums[r])\n                        {\n                            temp_a=aa;\n                            temp_b=nums[l];\n                            temp_c=nums[r];\n                            vector<int>temp_sum;\n                            temp_sum.push_back(temp_a);\n                            temp_sum.push_back(temp_b);\n                            temp_sum.push_back(temp_c);\n                            sum.push_back(temp_sum);\n                            temp_sum.clear();\n                        }\n\t\t\t\t\t    l++;//move pointer\n\t\t\t\t\t    r--;\n                    }\n                    else if(temp < 0)//move pointer\n                            l++;\n                        else\n                            r--;\n                }\n            }\n        return sum;\n    }\n};\n```\n\n#### leetcode-11.Container With Most Water\n\nGiven *n* non-negative integers *a1*, *a2*, ..., *an*, where each represents a point at coordinate (*i*, *ai*). *n* vertical lines are drawn such that the two endpoints of line *i* is at (*i*, *ai*) and (*i*, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.\n\nNote: You may not slant the container and *n* is at least 2.\n\nNote:每个点之间的横坐标是等间隔的。要求出最大的容器，是由“短板”高来决定的和宽，所以这里采用双指针逼近法一开始将两个指针分别指向首和尾，然后逐渐向中间逼近求出最大容器。\n\n```c++\nclass Solution {\npublic:\n    int maxArea(vector<int>& height) {\n        int l = 0;\n        int r = height.size()-1;//two pointer\n        int ans = 0 ;\n        while(l < r)\n        {\n            int temp = (r-l)*min(height[l],height[r]);//calculating formula \n            if(temp > ans)\n                ans = temp;\n            if(height[l] == height[r])\n                if(height[r-1] > height[l+1])\n                    r--;//pointer move\n                else\n                    l++;\n            else if(height[l] < height[r])\n                    l++;\n                else\n                    r--;\n        }\n        return ans;\n    }\n};\n```\n\n---\n\n### 快速排序\n\n做完这两个题，使我快排的认识比以前认识更深了，因为快排中也用到类似的双指针逼近法。\n\n```c++\nvoid quick_sort(int a[], int l, int r)\n{\n\tif (l < r){\n\t\tint x = a[l];//chose a pivot\n\t\tint i = l; int j = r;//two pointer\n\t\twhile (i < j)\n\t\t{\n\t\t\twhile (i < j && x <= a[j])//find a number which is less than pivot\n\t\t\t\tj--;\n\t\t\tif (i<j)//find a number\n\t\t\t\ta[i] = a[j];\n\t\t\twhile (i < j && x > a[i])\n\t\t\t\ti++;\n\t\t\tif (i<j)\n\t\t\ta[j] = a[i];\t\t\n\t\t}\n\t\ta[i] = x;\n\t\tquick_sort(a, l, i - 1);\n\t\tquick_sort(a, i + 1, r); \n\t}\n}\n```\n\n[白话经典算法系列之六 快速排序 快速搞定](http://blog.csdn.net/morewindows/article/details/6684558)\n\n","slug":"C++/两个指针在算法中的应用","published":1,"updated":"2019-04-28T07:04:47.548Z","photos":[],"link":"","_id":"cjv0ur0nz0010bwwiwgw53p7z","content":"<h4 id=\"双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\"><a href=\"#双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\" class=\"headerlink\" title=\"双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\"></a>双指针逼近法：双指针相向夹逼，从两头开始向中间移动。</h4><h4 id=\"leetcode-15-3Sum\"><a href=\"#leetcode-15-3Sum\" class=\"headerlink\" title=\"leetcode-15.3Sum\"></a>leetcode-15.3Sum</h4><p>Given an array <em>S</em> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <em>S</em> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, given array S = [-1, 0, 1, 2, -1, -4],</span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [-1, 0, 1],</span><br><span class=\"line\">  [-1, -1, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>题意：在给定的一个数组中找到三个之数为0的组合。</p>\n<a id=\"more\"></a> \n<p>Note：1.用暴力的方法，时间复杂度会达到O(n^3),用双指针逼近法将时间复杂度降到O(n^2)。</p>\n<p>​        2.三个数的组合中有相同的组合，要考虑到去除重复的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; threeSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; sum; <span class=\"comment\">//save three elements whose sum = 0;</span></span><br><span class=\"line\">        \tsort(nums.begin(), nums.end());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp_a=<span class=\"number\">-1</span>;<span class=\"keyword\">int</span> temp_b=<span class=\"number\">-1</span>; <span class=\"keyword\">int</span> temp_c = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i!=<span class=\"number\">0</span> &amp;&amp;nums[i] == nums[i<span class=\"number\">-1</span>])<span class=\"comment\">//avoid duplicate nums[i]</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> aa = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l = i+<span class=\"number\">1</span>; <span class=\"keyword\">int</span> r = nums.size()<span class=\"number\">-1</span>;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = aa+nums[l]+nums[r];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//avoid duplicate triplets</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(temp_a != aa || temp_b != nums[l] || temp_c != nums[r])</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            temp_a=aa;</span><br><span class=\"line\">                            temp_b=nums[l];</span><br><span class=\"line\">                            temp_c=nums[r];</span><br><span class=\"line\">                            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;temp_sum;</span><br><span class=\"line\">                            temp_sum.push_back(temp_a);</span><br><span class=\"line\">                            temp_sum.push_back(temp_b);</span><br><span class=\"line\">                            temp_sum.push_back(temp_c);</span><br><span class=\"line\">                            sum.push_back(temp_sum);</span><br><span class=\"line\">                            temp_sum.clear();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">\t\t\t\t\t    l++;<span class=\"comment\">//move pointer</span></span><br><span class=\"line\">\t\t\t\t\t    r--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">0</span>)<span class=\"comment\">//move pointer</span></span><br><span class=\"line\">                            l++;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            r--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-11-Container-With-Most-Water\"><a href=\"#leetcode-11-Container-With-Most-Water\" class=\"headerlink\" title=\"leetcode-11.Container With Most Water\"></a>leetcode-11.Container With Most Water</h4><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em>, where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and <em>n</em> is at least 2.</p>\n<p>Note:每个点之间的横坐标是等间隔的。要求出最大的容器，是由“短板”高来决定的和宽，所以这里采用双指针逼近法一开始将两个指针分别指向首和尾，然后逐渐向中间逼近求出最大容器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = height.size()<span class=\"number\">-1</span>;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = (r-l)*min(height[l],height[r]);<span class=\"comment\">//calculating formula </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &gt; ans)</span><br><span class=\"line\">                ans = temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(height[l] == height[r])</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(height[r<span class=\"number\">-1</span>] &gt; height[l+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    r--;<span class=\"comment\">//pointer move</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(height[l] &lt; height[r])</span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>做完这两个题，使我快排的认识比以前认识更深了，因为快排中也用到类似的双指针逼近法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l &lt; r)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = a[l];<span class=\"comment\">//chose a pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = l; <span class=\"keyword\">int</span> j = r;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; x &lt;= a[j])<span class=\"comment\">//find a number which is less than pivot</span></span><br><span class=\"line\">\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i&lt;j)<span class=\"comment\">//find a number</span></span><br><span class=\"line\">\t\t\t\ta[i] = a[j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; x &gt; a[i])</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i&lt;j)</span><br><span class=\"line\">\t\t\ta[j] = a[i];\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[i] = x;</span><br><span class=\"line\">\t\tquick_sort(a, l, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tquick_sort(a, i + <span class=\"number\">1</span>, r); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/morewindows/article/details/6684558\" target=\"_blank\" rel=\"noopener\">白话经典算法系列之六 快速排序 快速搞定</a></p>\n","site":{"data":{}},"excerpt":"<h4 id=\"双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\"><a href=\"#双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\" class=\"headerlink\" title=\"双指针逼近法：双指针相向夹逼，从两头开始向中间移动。\"></a>双指针逼近法：双指针相向夹逼，从两头开始向中间移动。</h4><h4 id=\"leetcode-15-3Sum\"><a href=\"#leetcode-15-3Sum\" class=\"headerlink\" title=\"leetcode-15.3Sum\"></a>leetcode-15.3Sum</h4><p>Given an array <em>S</em> of <em>n</em> integers, are there elements <em>a</em>, <em>b</em>, <em>c</em> in <em>S</em> such that <em>a</em> + <em>b</em> + <em>c</em> = 0? Find all unique triplets in the array which gives the sum of zero.</p>\n<p><strong>Note:</strong> The solution set must not contain duplicate triplets.</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">For example, given array S = [-1, 0, 1, 2, -1, -4],</span><br><span class=\"line\"></span><br><span class=\"line\">A solution set is:</span><br><span class=\"line\">[</span><br><span class=\"line\">  [-1, 0, 1],</span><br><span class=\"line\">  [-1, -1, 2]</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n<p>题意：在给定的一个数组中找到三个之数为0的组合。</p>","more":"<p>Note：1.用暴力的方法，时间复杂度会达到O(n^3),用双指针逼近法将时间复杂度降到O(n^2)。</p>\n<p>​        2.三个数的组合中有相同的组合，要考虑到去除重复的。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; threeSum(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; nums) &#123;</span><br><span class=\"line\">        </span><br><span class=\"line\">            <span class=\"built_in\">vector</span>&lt;<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&gt; sum; <span class=\"comment\">//save three elements whose sum = 0;</span></span><br><span class=\"line\">        \tsort(nums.begin(), nums.end());</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp_a=<span class=\"number\">-1</span>;<span class=\"keyword\">int</span> temp_b=<span class=\"number\">-1</span>; <span class=\"keyword\">int</span> temp_c = <span class=\"number\">-1</span>;</span><br><span class=\"line\">\t        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; nums.size(); i++)</span><br><span class=\"line\">            &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (i!=<span class=\"number\">0</span> &amp;&amp;nums[i] == nums[i<span class=\"number\">-1</span>])<span class=\"comment\">//avoid duplicate nums[i]</span></span><br><span class=\"line\">                    <span class=\"keyword\">continue</span>;</span><br><span class=\"line\">                <span class=\"keyword\">int</span> aa = nums[i];</span><br><span class=\"line\">                <span class=\"keyword\">int</span> l = i+<span class=\"number\">1</span>; <span class=\"keyword\">int</span> r = nums.size()<span class=\"number\">-1</span>;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">                <span class=\"keyword\">while</span>(l&lt;r)</span><br><span class=\"line\">                &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">int</span> temp = aa+nums[l]+nums[r];</span><br><span class=\"line\">                    <span class=\"keyword\">if</span>(temp == <span class=\"number\">0</span>)</span><br><span class=\"line\">                    &#123;</span><br><span class=\"line\">                        <span class=\"comment\">//avoid duplicate triplets</span></span><br><span class=\"line\">                        <span class=\"keyword\">if</span>(temp_a != aa || temp_b != nums[l] || temp_c != nums[r])</span><br><span class=\"line\">                        &#123;</span><br><span class=\"line\">                            temp_a=aa;</span><br><span class=\"line\">                            temp_b=nums[l];</span><br><span class=\"line\">                            temp_c=nums[r];</span><br><span class=\"line\">                            <span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;temp_sum;</span><br><span class=\"line\">                            temp_sum.push_back(temp_a);</span><br><span class=\"line\">                            temp_sum.push_back(temp_b);</span><br><span class=\"line\">                            temp_sum.push_back(temp_c);</span><br><span class=\"line\">                            sum.push_back(temp_sum);</span><br><span class=\"line\">                            temp_sum.clear();</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">\t\t\t\t\t    l++;<span class=\"comment\">//move pointer</span></span><br><span class=\"line\">\t\t\t\t\t    r--;</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                    <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(temp &lt; <span class=\"number\">0</span>)<span class=\"comment\">//move pointer</span></span><br><span class=\"line\">                            l++;</span><br><span class=\"line\">                        <span class=\"keyword\">else</span></span><br><span class=\"line\">                            r--;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> sum;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<h4 id=\"leetcode-11-Container-With-Most-Water\"><a href=\"#leetcode-11-Container-With-Most-Water\" class=\"headerlink\" title=\"leetcode-11.Container With Most Water\"></a>leetcode-11.Container With Most Water</h4><p>Given <em>n</em> non-negative integers <em>a1</em>, <em>a2</em>, …, <em>an</em>, where each represents a point at coordinate (<em>i</em>, <em>ai</em>). <em>n</em> vertical lines are drawn such that the two endpoints of line <em>i</em> is at (<em>i</em>, <em>ai</em>) and (<em>i</em>, 0). Find two lines, which together with x-axis forms a container, such that the container contains the most water.</p>\n<p>Note: You may not slant the container and <em>n</em> is at least 2.</p>\n<p>Note:每个点之间的横坐标是等间隔的。要求出最大的容器，是由“短板”高来决定的和宽，所以这里采用双指针逼近法一开始将两个指针分别指向首和尾，然后逐渐向中间逼近求出最大容器。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">Solution</span> &#123;</span></span><br><span class=\"line\"><span class=\"keyword\">public</span>:</span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">int</span> <span class=\"title\">maxArea</span><span class=\"params\">(<span class=\"built_in\">vector</span>&lt;<span class=\"keyword\">int</span>&gt;&amp; height)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> l = <span class=\"number\">0</span>;</span><br><span class=\"line\">        <span class=\"keyword\">int</span> r = height.size()<span class=\"number\">-1</span>;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> ans = <span class=\"number\">0</span> ;</span><br><span class=\"line\">        <span class=\"keyword\">while</span>(l &lt; r)</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            <span class=\"keyword\">int</span> temp = (r-l)*min(height[l],height[r]);<span class=\"comment\">//calculating formula </span></span><br><span class=\"line\">            <span class=\"keyword\">if</span>(temp &gt; ans)</span><br><span class=\"line\">                ans = temp;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(height[l] == height[r])</span><br><span class=\"line\">                <span class=\"keyword\">if</span>(height[r<span class=\"number\">-1</span>] &gt; height[l+<span class=\"number\">1</span>])</span><br><span class=\"line\">                    r--;<span class=\"comment\">//pointer move</span></span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">            <span class=\"keyword\">else</span> <span class=\"keyword\">if</span>(height[l] &lt; height[r])</span><br><span class=\"line\">                    l++;</span><br><span class=\"line\">                <span class=\"keyword\">else</span></span><br><span class=\"line\">                    r--;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> ans;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h3><p>做完这两个题，使我快排的认识比以前认识更深了，因为快排中也用到类似的双指针逼近法。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">quick_sort</span><span class=\"params\">(<span class=\"keyword\">int</span> a[], <span class=\"keyword\">int</span> l, <span class=\"keyword\">int</span> r)</span></span></span><br><span class=\"line\"><span class=\"function\"></span>&#123;</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (l &lt; r)&#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> x = a[l];<span class=\"comment\">//chose a pivot</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">int</span> i = l; <span class=\"keyword\">int</span> j = r;<span class=\"comment\">//two pointer</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">while</span> (i &lt; j)</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; x &lt;= a[j])<span class=\"comment\">//find a number which is less than pivot</span></span><br><span class=\"line\">\t\t\t\tj--;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i&lt;j)<span class=\"comment\">//find a number</span></span><br><span class=\"line\">\t\t\t\ta[i] = a[j];</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">while</span> (i &lt; j &amp;&amp; x &gt; a[i])</span><br><span class=\"line\">\t\t\t\ti++;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">if</span> (i&lt;j)</span><br><span class=\"line\">\t\t\ta[j] = a[i];\t\t</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\ta[i] = x;</span><br><span class=\"line\">\t\tquick_sort(a, l, i - <span class=\"number\">1</span>);</span><br><span class=\"line\">\t\tquick_sort(a, i + <span class=\"number\">1</span>, r); </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><a href=\"http://blog.csdn.net/morewindows/article/details/6684558\" target=\"_blank\" rel=\"noopener\">白话经典算法系列之六 快速排序 快速搞定</a></p>"},{"layout":"post","title":"线性表面试题","_content":"1. 将两个有序顺序表合并成一个新的有序顺序表，并由函数返回结果顺序表。\n\n```c++\nbool Merge(SeqList A, SeqList B, SeqList &C){\n    if(A.length + B.length > C.maxSize)\n        return false;\n    int i = 0, j = 0, k = 0;\n    while(i < A.length && j < B.length){\n        if(A.data[i] <= B.data[j])\n            C.data[k++] = A.data[i++];\n        else\n            C.data[k++] = B.data[j++];\n    }\n    while(i < A.length)\n        C.data[k++] = A.data[i++];\n    while(j < B.length)\n        C.data[k++] = A.data[j++];\n    C.length = k+1;\n    return true;\n}\n```\n<!--more--> \n2. 设L为带头结点的单链表，编写算法实现从尾到头反向输出每个节点的值。\n\n   key: 想到调用栈这点很重要。\n\n   ```c++\n   void R_Print(LinkList L){\n       if(L->next != NULL){\n           R_Print(L->next);\n       }\n       printf(L->data);\n   }\n   ```\n","source":"_posts/C++/线性表面试.md","raw":"---\nlayout: post\ntitle: \"线性表面试题\"\ntags: \n\t- C++\n---\n1. 将两个有序顺序表合并成一个新的有序顺序表，并由函数返回结果顺序表。\n\n```c++\nbool Merge(SeqList A, SeqList B, SeqList &C){\n    if(A.length + B.length > C.maxSize)\n        return false;\n    int i = 0, j = 0, k = 0;\n    while(i < A.length && j < B.length){\n        if(A.data[i] <= B.data[j])\n            C.data[k++] = A.data[i++];\n        else\n            C.data[k++] = B.data[j++];\n    }\n    while(i < A.length)\n        C.data[k++] = A.data[i++];\n    while(j < B.length)\n        C.data[k++] = A.data[j++];\n    C.length = k+1;\n    return true;\n}\n```\n<!--more--> \n2. 设L为带头结点的单链表，编写算法实现从尾到头反向输出每个节点的值。\n\n   key: 想到调用栈这点很重要。\n\n   ```c++\n   void R_Print(LinkList L){\n       if(L->next != NULL){\n           R_Print(L->next);\n       }\n       printf(L->data);\n   }\n   ```\n","slug":"C++/线性表面试","published":1,"date":"2019-04-28T07:04:47.549Z","updated":"2019-04-28T07:04:47.550Z","comments":1,"photos":[],"link":"","_id":"cjv0ur0o10011bwwiifcsaoz5","content":"<ol>\n<li>将两个有序顺序表合并成一个新的有序顺序表，并由函数返回结果顺序表。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Merge</span><span class=\"params\">(SeqList A, SeqList B, SeqList &amp;C)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.length + B.length &gt; C.maxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A.data[i] &lt;= B.data[j])</span><br><span class=\"line\">            C.data[k++] = A.data[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            C.data[k++] = B.data[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; A.length)</span><br><span class=\"line\">        C.data[k++] = A.data[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; B.length)</span><br><span class=\"line\">        C.data[k++] = A.data[j++];</span><br><span class=\"line\">    C.length = k+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<a id=\"more\"></a> \n<ol start=\"2\">\n<li><p>设L为带头结点的单链表，编写算法实现从尾到头反向输出每个节点的值。</p>\n<p>key: 想到调用栈这点很重要。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_Print</span><span class=\"params\">(LinkList L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        R_Print(L-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(L-&gt;data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"<ol>\n<li>将两个有序顺序表合并成一个新的有序顺序表，并由函数返回结果顺序表。</li>\n</ol>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">bool</span> <span class=\"title\">Merge</span><span class=\"params\">(SeqList A, SeqList B, SeqList &amp;C)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(A.length + B.length &gt; C.maxSize)</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">    <span class=\"keyword\">int</span> i = <span class=\"number\">0</span>, j = <span class=\"number\">0</span>, k = <span class=\"number\">0</span>;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; A.length &amp;&amp; j &lt; B.length)&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span>(A.data[i] &lt;= B.data[j])</span><br><span class=\"line\">            C.data[k++] = A.data[i++];</span><br><span class=\"line\">        <span class=\"keyword\">else</span></span><br><span class=\"line\">            C.data[k++] = B.data[j++];</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(i &lt; A.length)</span><br><span class=\"line\">        C.data[k++] = A.data[i++];</span><br><span class=\"line\">    <span class=\"keyword\">while</span>(j &lt; B.length)</span><br><span class=\"line\">        C.data[k++] = A.data[j++];</span><br><span class=\"line\">    C.length = k+<span class=\"number\">1</span>;</span><br><span class=\"line\">    <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","more":"<ol start=\"2\">\n<li><p>设L为带头结点的单链表，编写算法实现从尾到头反向输出每个节点的值。</p>\n<p>key: 想到调用栈这点很重要。</p>\n<figure class=\"highlight c++\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">void</span> <span class=\"title\">R_Print</span><span class=\"params\">(LinkList L)</span></span>&#123;</span><br><span class=\"line\">    <span class=\"keyword\">if</span>(L-&gt;next != <span class=\"literal\">NULL</span>)&#123;</span><br><span class=\"line\">        R_Print(L-&gt;next);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    <span class=\"built_in\">printf</span>(L-&gt;data);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>"},{"layout":"post","title":"JVM内存分区","_content":"\n局部变量存在虚拟机栈中，常量存在方法区中，成员变量则随着对象一起存在堆中。\n\n虚拟机栈存的是方法，每个方法包括：局部变量表，操作数栈，动态链接（与其他方法相链接），出口。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyutofxmj20vw0lidrd.jpg)\n\n\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyvjd0o1j20qr0fddju.jpg)","source":"_posts/JAVA/JVM内存分区.md","raw":"---\nlayout: post\ntitle: \"JVM内存分区\"\ntags: \n\t- JAVA\n---\n\n局部变量存在虚拟机栈中，常量存在方法区中，成员变量则随着对象一起存在堆中。\n\n虚拟机栈存的是方法，每个方法包括：局部变量表，操作数栈，动态链接（与其他方法相链接），出口。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyutofxmj20vw0lidrd.jpg)\n\n\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyvjd0o1j20qr0fddju.jpg)","slug":"JAVA/JVM内存分区","published":1,"date":"2019-04-28T07:04:47.552Z","updated":"2019-04-28T07:04:47.553Z","comments":1,"photos":[],"link":"","_id":"cjv0ur0o40014bwwios9tmkyl","content":"<p>局部变量存在虚拟机栈中，常量存在方法区中，成员变量则随着对象一起存在堆中。</p>\n<p>虚拟机栈存的是方法，每个方法包括：局部变量表，操作数栈，动态链接（与其他方法相链接），出口。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyutofxmj20vw0lidrd.jpg\" alt></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyvjd0o1j20qr0fddju.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>局部变量存在虚拟机栈中，常量存在方法区中，成员变量则随着对象一起存在堆中。</p>\n<p>虚拟机栈存的是方法，每个方法包括：局部变量表，操作数栈，动态链接（与其他方法相链接），出口。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyutofxmj20vw0lidrd.jpg\" alt></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxuyvjd0o1j20qr0fddju.jpg\" alt></p>\n"},{"layout":"post","title":"SpringBoot中直接new对象为NULL值","date":"2019-04-28T07:56:00.000Z","comments":1,"reward":true,"_content":"\n在springBoot中如果直接new一个对象出来，那么在此对象使用了@Autowired注解都会为NULL值。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1g2ic3hf2v3j215g0le40u.jpg)\n\n为了解决这个问题，我们就要了解Spring容器机制了。\n\n@Autowired是适用于Spring容器的，直接new出来的对象不在Spring容器中，所以@Autowired失效了。\n\n在程序启动的过程中，Spring就创建了容器。我们可以根据ApplicationContext获取到容器中的所有对象。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1g2icmib810j20ov02ywep.jpg)\n\n","source":"_posts/JAVA/SpringBoot中直接new对象为NULL值.md","raw":"---\nlayout: post\ntitle: \"SpringBoot中直接new对象为NULL值\"\ndate: 2019-04-28 15:56\ncomments: true\nreward: true\ntags: \n\t- JAVA\n---\n\n在springBoot中如果直接new一个对象出来，那么在此对象使用了@Autowired注解都会为NULL值。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1g2ic3hf2v3j215g0le40u.jpg)\n\n为了解决这个问题，我们就要了解Spring容器机制了。\n\n@Autowired是适用于Spring容器的，直接new出来的对象不在Spring容器中，所以@Autowired失效了。\n\n在程序启动的过程中，Spring就创建了容器。我们可以根据ApplicationContext获取到容器中的所有对象。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1g2icmib810j20ov02ywep.jpg)\n\n","slug":"JAVA/SpringBoot中直接new对象为NULL值","published":1,"updated":"2019-04-28T12:48:11.369Z","_id":"cjv0ur0o50016bwwiy1d2e3oe","photos":[],"link":"","content":"<p>在springBoot中如果直接new一个对象出来，那么在此对象使用了@Autowired注解都会为NULL值。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1g2ic3hf2v3j215g0le40u.jpg\" alt></p>\n<p>为了解决这个问题，我们就要了解Spring容器机制了。</p>\n<p>@Autowired是适用于Spring容器的，直接new出来的对象不在Spring容器中，所以@Autowired失效了。</p>\n<p>在程序启动的过程中，Spring就创建了容器。我们可以根据ApplicationContext获取到容器中的所有对象。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1g2icmib810j20ov02ywep.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在springBoot中如果直接new一个对象出来，那么在此对象使用了@Autowired注解都会为NULL值。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1g2ic3hf2v3j215g0le40u.jpg\" alt></p>\n<p>为了解决这个问题，我们就要了解Spring容器机制了。</p>\n<p>@Autowired是适用于Spring容器的，直接new出来的对象不在Spring容器中，所以@Autowired失效了。</p>\n<p>在程序启动的过程中，Spring就创建了容器。我们可以根据ApplicationContext获取到容器中的所有对象。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1g2icmib810j20ov02ywep.jpg\" alt></p>\n"},{"layout":"post","title":"Spring学习笔记","comments":1,"reward":true,"_content":"抽象类：不可以多重继承。\n\n接口：可以多重继承。\n\n<!--more--> \n\n## IOC\n\nIOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。 \n\nSpring IOC的作用\n\n1. 不必自己创建对象了（不必new出来了）\n2. 面向接口编程\n\nSpring使用：单独使用Bean容器（Bean管理）。\n\nBean容器初始化基础：依赖两个包\n\n- org.springframework.beans 中的BeanFactory提供配置结构和基本功能，加载并初始化Bean\n- org.springframework.context 中的 ApplicationContext保存了Bean对象并在Spring中被广泛使用\n\nSpring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dg2ewfj20wp0c70ue.jpg)\n\n## AOP\n\n面向切面，所有业务都要处理的业务，如打印日志，登录拦截。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dpe89mj20ns0eajug.jpg)\n\n### JDBC数据库全过程\n\n1. 加载驱动\n2. 创建数据库链接\n3. 创建Statement对象\n4. **执行SQL获取数据（MyBatis关注这里）**\n5. 数据转化\n6. 资源释放","source":"_posts/JAVA/Spring学习笔记.md","raw":"---\nlayout: post\ntitle: \"Spring学习笔记\"\ncomments: true\nreward: true\ntags: \n\t- JAVA\n---\n抽象类：不可以多重继承。\n\n接口：可以多重继承。\n\n<!--more--> \n\n## IOC\n\nIOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。 \n\nSpring IOC的作用\n\n1. 不必自己创建对象了（不必new出来了）\n2. 面向接口编程\n\nSpring使用：单独使用Bean容器（Bean管理）。\n\nBean容器初始化基础：依赖两个包\n\n- org.springframework.beans 中的BeanFactory提供配置结构和基本功能，加载并初始化Bean\n- org.springframework.context 中的 ApplicationContext保存了Bean对象并在Spring中被广泛使用\n\nSpring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dg2ewfj20wp0c70ue.jpg)\n\n## AOP\n\n面向切面，所有业务都要处理的业务，如打印日志，登录拦截。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dpe89mj20ns0eajug.jpg)\n\n### JDBC数据库全过程\n\n1. 加载驱动\n2. 创建数据库链接\n3. 创建Statement对象\n4. **执行SQL获取数据（MyBatis关注这里）**\n5. 数据转化\n6. 资源释放","slug":"JAVA/Spring学习笔记","published":1,"date":"2019-04-28T07:04:47.555Z","updated":"2019-04-28T07:04:47.555Z","photos":[],"link":"","_id":"cjv0ur0o80019bwwiuvwkwpmt","content":"<p>抽象类：不可以多重继承。</p>\n<p>接口：可以多重继承。</p>\n<a id=\"more\"></a> \n<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><p>IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。 </p>\n<p>Spring IOC的作用</p>\n<ol>\n<li>不必自己创建对象了（不必new出来了）</li>\n<li>面向接口编程</li>\n</ol>\n<p>Spring使用：单独使用Bean容器（Bean管理）。</p>\n<p>Bean容器初始化基础：依赖两个包</p>\n<ul>\n<li>org.springframework.beans 中的BeanFactory提供配置结构和基本功能，加载并初始化Bean</li>\n<li>org.springframework.context 中的 ApplicationContext保存了Bean对象并在Spring中被广泛使用</li>\n</ul>\n<p>Spring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dg2ewfj20wp0c70ue.jpg\" alt></p>\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>面向切面，所有业务都要处理的业务，如打印日志，登录拦截。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dpe89mj20ns0eajug.jpg\" alt></p>\n<h3 id=\"JDBC数据库全过程\"><a href=\"#JDBC数据库全过程\" class=\"headerlink\" title=\"JDBC数据库全过程\"></a>JDBC数据库全过程</h3><ol>\n<li>加载驱动</li>\n<li>创建数据库链接</li>\n<li>创建Statement对象</li>\n<li><strong>执行SQL获取数据（MyBatis关注这里）</strong></li>\n<li>数据转化</li>\n<li>资源释放</li>\n</ol>\n","site":{"data":{}},"excerpt":"<p>抽象类：不可以多重继承。</p>\n<p>接口：可以多重继承。</p>","more":"<h2 id=\"IOC\"><a href=\"#IOC\" class=\"headerlink\" title=\"IOC\"></a>IOC</h2><p>IOC是反转控制 (Inversion Of Control)的缩写，就像控制权从本来在自己手里，交给了Spring。 </p>\n<p>Spring IOC的作用</p>\n<ol>\n<li>不必自己创建对象了（不必new出来了）</li>\n<li>面向接口编程</li>\n</ol>\n<p>Spring使用：单独使用Bean容器（Bean管理）。</p>\n<p>Bean容器初始化基础：依赖两个包</p>\n<ul>\n<li>org.springframework.beans 中的BeanFactory提供配置结构和基本功能，加载并初始化Bean</li>\n<li>org.springframework.context 中的 ApplicationContext保存了Bean对象并在Spring中被广泛使用</li>\n</ul>\n<p>Spring注入是指在启动Spring容器加载bean配置的时候，完成对变量的赋值行为。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dg2ewfj20wp0c70ue.jpg\" alt></p>\n<h2 id=\"AOP\"><a href=\"#AOP\" class=\"headerlink\" title=\"AOP\"></a>AOP</h2><p>面向切面，所有业务都要处理的业务，如打印日志，登录拦截。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1dpe89mj20ns0eajug.jpg\" alt></p>\n<h3 id=\"JDBC数据库全过程\"><a href=\"#JDBC数据库全过程\" class=\"headerlink\" title=\"JDBC数据库全过程\"></a>JDBC数据库全过程</h3><ol>\n<li>加载驱动</li>\n<li>创建数据库链接</li>\n<li>创建Statement对象</li>\n<li><strong>执行SQL获取数据（MyBatis关注这里）</strong></li>\n<li>数据转化</li>\n<li>资源释放</li>\n</ol>"},{"layout":"post","title":"Does money make you mean?","comments":1,"reward":true,"_content":"# Does money make you mean?\n\n### what are we facing? \n\nAmerican dream is an idea in which **we all have an equal opportunity to succeed and prosper, as long as we apply ourselves and work hard.** And a piece of that means that sometimes, you need to put your own interests above the interests and well-being of other people around you. But **what we're finding is that the wealthier you are, the more likely you are to pursue a vision of personal success, of achievement and accomplishment, to the detriment of others around you.**\n\n<!--more--> \n\nWe're at unprecedented levels of economic inequality. What that means is that wealth is not only becoming increasingly concentrated in the hands of a select group of individuals, but the American dream is becoming increasingly unattainable for an increasing majority of us. And if it's the case, as we've been finding, that **the wealthier you are, the more entitled you feel to that wealth, and the more likely you are to prioritize your own interests above the interests of other people, and be willing to do things to serve that self-interest.**\n\n### what do we do? \n\nwe've been finding in our own laboratory research that small psychological interventions, small changes to people's values, small nudges in certain directions,can restore levels of egalitarianism and empathy. For instance, **reminding people of the benefits of cooperation or the advantages of community, cause wealthier individuals to be just as egalitarian as poor people.** \n\nhttps://www.ted.com/talks/paul_piff_does_money_make_you_mean","source":"_posts/TED/Does money make you mean.md","raw":"---\nlayout: post\ntitle: \"Does money make you mean?\"\ncomments: true\nreward: true\ntags: \n\t- TED\n---\n# Does money make you mean?\n\n### what are we facing? \n\nAmerican dream is an idea in which **we all have an equal opportunity to succeed and prosper, as long as we apply ourselves and work hard.** And a piece of that means that sometimes, you need to put your own interests above the interests and well-being of other people around you. But **what we're finding is that the wealthier you are, the more likely you are to pursue a vision of personal success, of achievement and accomplishment, to the detriment of others around you.**\n\n<!--more--> \n\nWe're at unprecedented levels of economic inequality. What that means is that wealth is not only becoming increasingly concentrated in the hands of a select group of individuals, but the American dream is becoming increasingly unattainable for an increasing majority of us. And if it's the case, as we've been finding, that **the wealthier you are, the more entitled you feel to that wealth, and the more likely you are to prioritize your own interests above the interests of other people, and be willing to do things to serve that self-interest.**\n\n### what do we do? \n\nwe've been finding in our own laboratory research that small psychological interventions, small changes to people's values, small nudges in certain directions,can restore levels of egalitarianism and empathy. For instance, **reminding people of the benefits of cooperation or the advantages of community, cause wealthier individuals to be just as egalitarian as poor people.** \n\nhttps://www.ted.com/talks/paul_piff_does_money_make_you_mean","slug":"TED/Does money make you mean","published":1,"date":"2019-04-28T07:04:47.576Z","updated":"2019-04-28T07:04:47.576Z","photos":[],"link":"","_id":"cjv0ur0ob001bbwwij7ki6i2a","content":"<h1 id=\"Does-money-make-you-mean\"><a href=\"#Does-money-make-you-mean\" class=\"headerlink\" title=\"Does money make you mean?\"></a>Does money make you mean?</h1><h3 id=\"what-are-we-facing\"><a href=\"#what-are-we-facing\" class=\"headerlink\" title=\"what are we facing?\"></a>what are we facing?</h3><p>American dream is an idea in which <strong>we all have an equal opportunity to succeed and prosper, as long as we apply ourselves and work hard.</strong> And a piece of that means that sometimes, you need to put your own interests above the interests and well-being of other people around you. But <strong>what we’re finding is that the wealthier you are, the more likely you are to pursue a vision of personal success, of achievement and accomplishment, to the detriment of others around you.</strong></p>\n<a id=\"more\"></a> \n<p>We’re at unprecedented levels of economic inequality. What that means is that wealth is not only becoming increasingly concentrated in the hands of a select group of individuals, but the American dream is becoming increasingly unattainable for an increasing majority of us. And if it’s the case, as we’ve been finding, that <strong>the wealthier you are, the more entitled you feel to that wealth, and the more likely you are to prioritize your own interests above the interests of other people, and be willing to do things to serve that self-interest.</strong></p>\n<h3 id=\"what-do-we-do\"><a href=\"#what-do-we-do\" class=\"headerlink\" title=\"what do we do?\"></a>what do we do?</h3><p>we’ve been finding in our own laboratory research that small psychological interventions, small changes to people’s values, small nudges in certain directions,can restore levels of egalitarianism and empathy. For instance, <strong>reminding people of the benefits of cooperation or the advantages of community, cause wealthier individuals to be just as egalitarian as poor people.</strong> </p>\n<p><a href=\"https://www.ted.com/talks/paul_piff_does_money_make_you_mean\" target=\"_blank\" rel=\"noopener\">https://www.ted.com/talks/paul_piff_does_money_make_you_mean</a></p>\n","site":{"data":{}},"excerpt":"<h1 id=\"Does-money-make-you-mean\"><a href=\"#Does-money-make-you-mean\" class=\"headerlink\" title=\"Does money make you mean?\"></a>Does money make you mean?</h1><h3 id=\"what-are-we-facing\"><a href=\"#what-are-we-facing\" class=\"headerlink\" title=\"what are we facing?\"></a>what are we facing?</h3><p>American dream is an idea in which <strong>we all have an equal opportunity to succeed and prosper, as long as we apply ourselves and work hard.</strong> And a piece of that means that sometimes, you need to put your own interests above the interests and well-being of other people around you. But <strong>what we’re finding is that the wealthier you are, the more likely you are to pursue a vision of personal success, of achievement and accomplishment, to the detriment of others around you.</strong></p>","more":"<p>We’re at unprecedented levels of economic inequality. What that means is that wealth is not only becoming increasingly concentrated in the hands of a select group of individuals, but the American dream is becoming increasingly unattainable for an increasing majority of us. And if it’s the case, as we’ve been finding, that <strong>the wealthier you are, the more entitled you feel to that wealth, and the more likely you are to prioritize your own interests above the interests of other people, and be willing to do things to serve that self-interest.</strong></p>\n<h3 id=\"what-do-we-do\"><a href=\"#what-do-we-do\" class=\"headerlink\" title=\"what do we do?\"></a>what do we do?</h3><p>we’ve been finding in our own laboratory research that small psychological interventions, small changes to people’s values, small nudges in certain directions,can restore levels of egalitarianism and empathy. For instance, <strong>reminding people of the benefits of cooperation or the advantages of community, cause wealthier individuals to be just as egalitarian as poor people.</strong> </p>\n<p><a href=\"https://www.ted.com/talks/paul_piff_does_money_make_you_mean\" target=\"_blank\" rel=\"noopener\">https://www.ted.com/talks/paul_piff_does_money_make_you_mean</a></p>"},{"layout":"post","title":"How to see past your own perspective and find truth","comments":1,"reward":true,"_content":"You can't strive to inhabit that space if you don't already accept that you live in the same reality. To accept that, we've got to believe in truth, we've got to encourage more active ways of knowing. And we've got to have the humility to realize that we're not the measure of all things. \n\nhttps://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth","source":"_posts/TED/How to see past your own perspective and find truth.md","raw":"---\nlayout: post\ntitle: \"How to see past your own perspective and find truth\"\ncomments: true\nreward: true\ntags: \n\t- TED\n---\nYou can't strive to inhabit that space if you don't already accept that you live in the same reality. To accept that, we've got to believe in truth, we've got to encourage more active ways of knowing. And we've got to have the humility to realize that we're not the measure of all things. \n\nhttps://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth","slug":"TED/How to see past your own perspective and find truth","published":1,"date":"2019-04-28T07:04:47.577Z","updated":"2019-04-28T07:04:47.577Z","photos":[],"link":"","_id":"cjv0ur0of001dbwwilobldb4b","content":"<p>You can’t strive to inhabit that space if you don’t already accept that you live in the same reality. To accept that, we’ve got to believe in truth, we’ve got to encourage more active ways of knowing. And we’ve got to have the humility to realize that we’re not the measure of all things. </p>\n<p><a href=\"https://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth\" target=\"_blank\" rel=\"noopener\">https://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth</a></p>\n","site":{"data":{}},"excerpt":"","more":"<p>You can’t strive to inhabit that space if you don’t already accept that you live in the same reality. To accept that, we’ve got to believe in truth, we’ve got to encourage more active ways of knowing. And we’ve got to have the humility to realize that we’re not the measure of all things. </p>\n<p><a href=\"https://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth\" target=\"_blank\" rel=\"noopener\">https://www.ted.com/talks/michael_patrick_lynch_how_to_see_past_your_own_perspective_and_find_truth</a></p>\n"},{"layout":"post","title":"CSS定位 文档流 浮动","date":"2017-11-19T11:58:00.000Z","comments":1,"reward":true,"_content":"# ![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1ita8utj20n7028aa0.jpg)\n\n昨天写CSS的时候，发现div的高度不能自适应。然后在[CSS 浮动](http://www.cnblogs.com/jiqing9006/archive/2012/07/30/2615231.html)找到解决方案了。\n\n普通流就是正常的文档流，在HTML里面的写法就是从上到下，从左到右的排版布局。\n\n<!--more--> \n\n例：\n\n<div id=”01”></div><div id=”02”></div><div></div>\n\n很显然这是最普通的文档流，从左到右，一个挨一个按照顺序01先，02其次，03最后排列。\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014324651.jpg)\n\n一旦给其中的某个DIV进行FLOAT属性或者absolute定位（不包括static/relative，这两个依然保持正常的文档流），则它完全脱离文档流，不占空间。\n\n例：\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014343616.jpg)\n\n为了能更好辨认，我分别给01绿色，02灰色，03黄色。然后再给01左浮动。结果，01脱离了文档流，完全不占空间，所以02顺势顶替了01原来的位置，结果02被01盖住了。\n\n同理，absolute定位跟FLOAT一样，脱离了文档流，不再占原来文档流的空间了。再举一个大家在日常经常遇到的问题来印证—高度自适应\n\n反复想一想，高度自适应的原理其实就是这个：\n\n```\n<div id=”a”>\n\n<div id=”b”>这是b</div>\n\n<div id=”c”>这是c</div>\n\n</div>\n```\n\n这个结构是a包住b和c，颜色不变，a的高度为自动，b的高度为100，C的高度为500。b和c都为左浮动。\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014362919.jpg)\n\n很明显a没有被撑开了。原因是它们浮动了就不再占空间了。既然没有空间可占，那就等于容器里没有东西，所以不撑开。\n\n知道这个问题后，我就没有将b设置为浮动，高度就自适应到b的高度了。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1j866vyj20n7028q2w.jpg)","source":"_posts/前端/CSS定位 文档流 浮动流.md","raw":"---\nlayout: post\ntitle: \"CSS定位 文档流 浮动\"\ndate: 2017-11-19 19:58\ncomments: true\nreward: true\ntags: \n\t- 前端\n---\n# ![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1ita8utj20n7028aa0.jpg)\n\n昨天写CSS的时候，发现div的高度不能自适应。然后在[CSS 浮动](http://www.cnblogs.com/jiqing9006/archive/2012/07/30/2615231.html)找到解决方案了。\n\n普通流就是正常的文档流，在HTML里面的写法就是从上到下，从左到右的排版布局。\n\n<!--more--> \n\n例：\n\n<div id=”01”></div><div id=”02”></div><div></div>\n\n很显然这是最普通的文档流，从左到右，一个挨一个按照顺序01先，02其次，03最后排列。\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014324651.jpg)\n\n一旦给其中的某个DIV进行FLOAT属性或者absolute定位（不包括static/relative，这两个依然保持正常的文档流），则它完全脱离文档流，不占空间。\n\n例：\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014343616.jpg)\n\n为了能更好辨认，我分别给01绿色，02灰色，03黄色。然后再给01左浮动。结果，01脱离了文档流，完全不占空间，所以02顺势顶替了01原来的位置，结果02被01盖住了。\n\n同理，absolute定位跟FLOAT一样，脱离了文档流，不再占原来文档流的空间了。再举一个大家在日常经常遇到的问题来印证—高度自适应\n\n反复想一想，高度自适应的原理其实就是这个：\n\n```\n<div id=”a”>\n\n<div id=”b”>这是b</div>\n\n<div id=”c”>这是c</div>\n\n</div>\n```\n\n这个结构是a包住b和c，颜色不变，a的高度为自动，b的高度为100，C的高度为500。b和c都为左浮动。\n\n![img](http://pic002.cnblogs.com/images/2012/422101/2012073014362919.jpg)\n\n很明显a没有被撑开了。原因是它们浮动了就不再占空间了。既然没有空间可占，那就等于容器里没有东西，所以不撑开。\n\n知道这个问题后，我就没有将b设置为浮动，高度就自适应到b的高度了。\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1j866vyj20n7028q2w.jpg)","slug":"前端/CSS定位 文档流 浮动流","published":1,"updated":"2019-04-28T07:04:47.588Z","photos":[],"link":"","_id":"cjv0ur0oi001gbwwiyjakxhjk","content":"<h1 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1ita8utj20n7028aa0.jpg\" alt></h1><p>昨天写CSS的时候，发现div的高度不能自适应。然后在<a href=\"http://www.cnblogs.com/jiqing9006/archive/2012/07/30/2615231.html\" target=\"_blank\" rel=\"noopener\">CSS 浮动</a>找到解决方案了。</p>\n<p>普通流就是正常的文档流，在HTML里面的写法就是从上到下，从左到右的排版布局。</p>\n<a id=\"more\"></a> \n<p>例：</p>\n<div id=\"”01”\"></div><div id=\"”02”\"></div><div></div>\n\n<p>很显然这是最普通的文档流，从左到右，一个挨一个按照顺序01先，02其次，03最后排列。</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014324651.jpg\" alt=\"img\"></p>\n<p>一旦给其中的某个DIV进行FLOAT属性或者absolute定位（不包括static/relative，这两个依然保持正常的文档流），则它完全脱离文档流，不占空间。</p>\n<p>例：</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014343616.jpg\" alt=\"img\"></p>\n<p>为了能更好辨认，我分别给01绿色，02灰色，03黄色。然后再给01左浮动。结果，01脱离了文档流，完全不占空间，所以02顺势顶替了01原来的位置，结果02被01盖住了。</p>\n<p>同理，absolute定位跟FLOAT一样，脱离了文档流，不再占原来文档流的空间了。再举一个大家在日常经常遇到的问题来印证—高度自适应</p>\n<p>反复想一想，高度自适应的原理其实就是这个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=”a”&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=”b”&gt;这是b&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=”c”&gt;这是c&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这个结构是a包住b和c，颜色不变，a的高度为自动，b的高度为100，C的高度为500。b和c都为左浮动。</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014362919.jpg\" alt=\"img\"></p>\n<p>很明显a没有被撑开了。原因是它们浮动了就不再占空间了。既然没有空间可占，那就等于容器里没有东西，所以不撑开。</p>\n<p>知道这个问题后，我就没有将b设置为浮动，高度就自适应到b的高度了。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1j866vyj20n7028q2w.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<h1 id><a href=\"#\" class=\"headerlink\" title></a><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1ita8utj20n7028aa0.jpg\" alt></h1><p>昨天写CSS的时候，发现div的高度不能自适应。然后在<a href=\"http://www.cnblogs.com/jiqing9006/archive/2012/07/30/2615231.html\" target=\"_blank\" rel=\"noopener\">CSS 浮动</a>找到解决方案了。</p>\n<p>普通流就是正常的文档流，在HTML里面的写法就是从上到下，从左到右的排版布局。</p>","more":"<p>例：</p>\n<div id=\"”01”\"></div><div id=\"”02”\"></div><div></div>\n\n<p>很显然这是最普通的文档流，从左到右，一个挨一个按照顺序01先，02其次，03最后排列。</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014324651.jpg\" alt=\"img\"></p>\n<p>一旦给其中的某个DIV进行FLOAT属性或者absolute定位（不包括static/relative，这两个依然保持正常的文档流），则它完全脱离文档流，不占空间。</p>\n<p>例：</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014343616.jpg\" alt=\"img\"></p>\n<p>为了能更好辨认，我分别给01绿色，02灰色，03黄色。然后再给01左浮动。结果，01脱离了文档流，完全不占空间，所以02顺势顶替了01原来的位置，结果02被01盖住了。</p>\n<p>同理，absolute定位跟FLOAT一样，脱离了文档流，不再占原来文档流的空间了。再举一个大家在日常经常遇到的问题来印证—高度自适应</p>\n<p>反复想一想，高度自适应的原理其实就是这个：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=”a”&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=”b”&gt;这是b&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;div id=”c”&gt;这是c&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n<p>这个结构是a包住b和c，颜色不变，a的高度为自动，b的高度为100，C的高度为500。b和c都为左浮动。</p>\n<p><img src=\"http://pic002.cnblogs.com/images/2012/422101/2012073014362919.jpg\" alt=\"img\"></p>\n<p>很明显a没有被撑开了。原因是它们浮动了就不再占空间了。既然没有空间可占，那就等于容器里没有东西，所以不撑开。</p>\n<p>知道这个问题后，我就没有将b设置为浮动，高度就自适应到b的高度了。</p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1j866vyj20n7028q2w.jpg\" alt></p>"},{"title":"ajax学习","author":"Zhang Peng","date":"2018-07-03T03:51:00.000Z","_content":"Ajax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功。\n\n<!--more--> \n\n需求：点击登陆按钮时，提交账号和密码给后端，异步刷新显示返回的数据。\n\n**Demo代码：**\n\n```javascript\n<script>\n    $(function() {\n        $(\"#submitBtn\").click(function() {\n            if(0 == $(\"#username\").val().length || 0==$(\"#password\").val().length){\n                $(\"#errorMessage\").text(\"输入账号密码为空\");\n                $(\"#loginErrorMessageDiv\").css(\"visibility\",\"visible\");\n                return false;\n            }else{\n            var username = $(\"#username\").val(),\n                password = $(\"#password\").val();\n\n                $.ajax({\n                    type: \"POST\",\n                    data: {username: username, password: password}, //传输的数据\n                    dataType:\"json\", //传输的数据类型\n                    url: \"/loginsuccess\", //提交目的地址\n                    success: function (data) { //返回的数据为data对象，该对象有msg和code两个属性\n                        console.log(data);\n                        if (data.code == 1) {\n                            $(\"#errorMessage\").text(data.msg);\n                            $(\"#loginErrorMessageDiv\").css(\"visibility\",\"visible\");\n                            return false;\n                        } else {\n                            window.location.href=data.msg;\n                            return true;\n                        }\n                    },\n                    error: function (data) {\n                        alert(\"认证失败\");\n                    }\n                });\n            }\n        });\n\n        $(\"input\").keyup(function(){\n            $(\"#loginErrorMessageDiv\").css(\"visibility\",\"hidden\");\n        });\n    });\n</script>\n```\n\n**效果图：**\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1c35oiij20pu0a3gr3.jpg)","source":"_posts/前端/ajax学习.md","raw":"---\ntitle: ajax学习\nauthor: Zhang Peng\ntags:\n  - 前端\ncategories: []\ndate: 2018-07-03 11:51:00\n---\nAjax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功。\n\n<!--more--> \n\n需求：点击登陆按钮时，提交账号和密码给后端，异步刷新显示返回的数据。\n\n**Demo代码：**\n\n```javascript\n<script>\n    $(function() {\n        $(\"#submitBtn\").click(function() {\n            if(0 == $(\"#username\").val().length || 0==$(\"#password\").val().length){\n                $(\"#errorMessage\").text(\"输入账号密码为空\");\n                $(\"#loginErrorMessageDiv\").css(\"visibility\",\"visible\");\n                return false;\n            }else{\n            var username = $(\"#username\").val(),\n                password = $(\"#password\").val();\n\n                $.ajax({\n                    type: \"POST\",\n                    data: {username: username, password: password}, //传输的数据\n                    dataType:\"json\", //传输的数据类型\n                    url: \"/loginsuccess\", //提交目的地址\n                    success: function (data) { //返回的数据为data对象，该对象有msg和code两个属性\n                        console.log(data);\n                        if (data.code == 1) {\n                            $(\"#errorMessage\").text(data.msg);\n                            $(\"#loginErrorMessageDiv\").css(\"visibility\",\"visible\");\n                            return false;\n                        } else {\n                            window.location.href=data.msg;\n                            return true;\n                        }\n                    },\n                    error: function (data) {\n                        alert(\"认证失败\");\n                    }\n                });\n            }\n        });\n\n        $(\"input\").keyup(function(){\n            $(\"#loginErrorMessageDiv\").css(\"visibility\",\"hidden\");\n        });\n    });\n</script>\n```\n\n**效果图：**\n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1c35oiij20pu0a3gr3.jpg)","slug":"前端/ajax学习","published":1,"updated":"2019-04-28T07:04:47.589Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0ok001ibwwijcvhyb4w","content":"<p>Ajax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功。</p>\n<a id=\"more\"></a> \n<p>需求：点击登陆按钮时，提交账号和密码给后端，异步刷新显示返回的数据。</p>\n<p><strong>Demo代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\"#submitBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == $(<span class=\"string\">\"#username\"</span>).val().length || <span class=\"number\">0</span>==$(<span class=\"string\">\"#password\"</span>).val().length)&#123;</span><br><span class=\"line\">                $(<span class=\"string\">\"#errorMessage\"</span>).text(<span class=\"string\">\"输入账号密码为空\"</span>);</span><br><span class=\"line\">                $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"visible\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> username = $(<span class=\"string\">\"#username\"</span>).val(),</span><br><span class=\"line\">                password = $(<span class=\"string\">\"#password\"</span>).val();</span><br><span class=\"line\"></span><br><span class=\"line\">                $.ajax(&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">                    data: &#123;<span class=\"attr\">username</span>: username, <span class=\"attr\">password</span>: password&#125;, <span class=\"comment\">//传输的数据</span></span><br><span class=\"line\">                    dataType:<span class=\"string\">\"json\"</span>, <span class=\"comment\">//传输的数据类型</span></span><br><span class=\"line\">                    url: <span class=\"string\">\"/loginsuccess\"</span>, <span class=\"comment\">//提交目的地址</span></span><br><span class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123; <span class=\"comment\">//返回的数据为data对象，该对象有msg和code两个属性</span></span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (data.code == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            $(<span class=\"string\">\"#errorMessage\"</span>).text(data.msg);</span><br><span class=\"line\">                            $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"visible\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">window</span>.location.href=data.msg;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        alert(<span class=\"string\">\"认证失败\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">\"input\"</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"hidden\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果图：</strong></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1c35oiij20pu0a3gr3.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>Ajax是一种异步请求数据的web开发技术，对于改善用户的体验和页面性能很有帮助。简单地说，在不需要重新刷新页面的情况下，Ajax 通过异步请求加载后台数据，并在网页上呈现出来。常见运用场景有表单验证是否登入成功。</p>","more":"<p>需求：点击登陆按钮时，提交账号和密码给后端，异步刷新显示返回的数据。</p>\n<p><strong>Demo代码：</strong></p>\n<figure class=\"highlight javascript\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">    $(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">        $(<span class=\"string\">\"#submitBtn\"</span>).click(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>) </span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span>(<span class=\"number\">0</span> == $(<span class=\"string\">\"#username\"</span>).val().length || <span class=\"number\">0</span>==$(<span class=\"string\">\"#password\"</span>).val().length)&#123;</span><br><span class=\"line\">                $(<span class=\"string\">\"#errorMessage\"</span>).text(<span class=\"string\">\"输入账号密码为空\"</span>);</span><br><span class=\"line\">                $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"visible\"</span>);</span><br><span class=\"line\">                <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">            &#125;<span class=\"keyword\">else</span>&#123;</span><br><span class=\"line\">            <span class=\"keyword\">var</span> username = $(<span class=\"string\">\"#username\"</span>).val(),</span><br><span class=\"line\">                password = $(<span class=\"string\">\"#password\"</span>).val();</span><br><span class=\"line\"></span><br><span class=\"line\">                $.ajax(&#123;</span><br><span class=\"line\">                    type: <span class=\"string\">\"POST\"</span>,</span><br><span class=\"line\">                    data: &#123;<span class=\"attr\">username</span>: username, <span class=\"attr\">password</span>: password&#125;, <span class=\"comment\">//传输的数据</span></span><br><span class=\"line\">                    dataType:<span class=\"string\">\"json\"</span>, <span class=\"comment\">//传输的数据类型</span></span><br><span class=\"line\">                    url: <span class=\"string\">\"/loginsuccess\"</span>, <span class=\"comment\">//提交目的地址</span></span><br><span class=\"line\">                    success: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123; <span class=\"comment\">//返回的数据为data对象，该对象有msg和code两个属性</span></span><br><span class=\"line\">                        <span class=\"built_in\">console</span>.log(data);</span><br><span class=\"line\">                        <span class=\"keyword\">if</span> (data.code == <span class=\"number\">1</span>) &#123;</span><br><span class=\"line\">                            $(<span class=\"string\">\"#errorMessage\"</span>).text(data.msg);</span><br><span class=\"line\">                            $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"visible\"</span>);</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">false</span>;</span><br><span class=\"line\">                        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                            <span class=\"built_in\">window</span>.location.href=data.msg;</span><br><span class=\"line\">                            <span class=\"keyword\">return</span> <span class=\"literal\">true</span>;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">                    &#125;,</span><br><span class=\"line\">                    error: <span class=\"function\"><span class=\"keyword\">function</span> (<span class=\"params\">data</span>) </span>&#123;</span><br><span class=\"line\">                        alert(<span class=\"string\">\"认证失败\"</span>);</span><br><span class=\"line\">                    &#125;</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">        $(<span class=\"string\">\"input\"</span>).keyup(<span class=\"function\"><span class=\"keyword\">function</span>(<span class=\"params\"></span>)</span>&#123;</span><br><span class=\"line\">            $(<span class=\"string\">\"#loginErrorMessageDiv\"</span>).css(<span class=\"string\">\"visibility\"</span>,<span class=\"string\">\"hidden\"</span>);</span><br><span class=\"line\">        &#125;);</span><br><span class=\"line\">    &#125;);</span><br><span class=\"line\">&lt;<span class=\"regexp\">/script&gt;</span></span><br></pre></td></tr></table></figure>\n<p><strong>效果图：</strong></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1c35oiij20pu0a3gr3.jpg\" alt></p>"},{"layout":"post","title":"校园照片","date":"2016-12-29T11:58:00.000Z","comments":1,"reward":true,"_content":"\n拍的一些校园照片。\n\n<!-- more -->\n\n![](http://i.imgur.com/E2IO9ng.jpg)\n\n![](http://i.imgur.com/1bEwCSO.jpg)\n\n忠于自己...","source":"_posts/生活/校园照片.md","raw":"---\nlayout: post\ntitle: \"校园照片\"\ndate: 2016-12-29 19:58\ncomments: true\nreward: true\ntags: \n\t- 生活\n---\n\n拍的一些校园照片。\n\n<!-- more -->\n\n![](http://i.imgur.com/E2IO9ng.jpg)\n\n![](http://i.imgur.com/1bEwCSO.jpg)\n\n忠于自己...","slug":"生活/校园照片","published":1,"updated":"2019-04-28T07:04:47.606Z","photos":[],"link":"","_id":"cjv0ur0on001kbwwib39f3h3d","content":"<p>拍的一些校园照片。</p>\n<a id=\"more\"></a>\n<p><img src=\"http://i.imgur.com/E2IO9ng.jpg\" alt></p>\n<p><img src=\"http://i.imgur.com/1bEwCSO.jpg\" alt></p>\n<p>忠于自己…</p>\n","site":{"data":{}},"excerpt":"<p>拍的一些校园照片。</p>","more":"<p><img src=\"http://i.imgur.com/E2IO9ng.jpg\" alt></p>\n<p><img src=\"http://i.imgur.com/1bEwCSO.jpg\" alt></p>\n<p>忠于自己…</p>"},{"title":"万历王朝的兴衰史","author":"Zhang Peng","date":"2018-12-23T09:56:00.000Z","_content":"\n最近读了有关历史有关的书籍，发现万历王朝的兴衰，与当朝的皇帝和辅臣有关系。我想基于此，可以去凭借后人写的史书去分析一下这个王朝的兴衰。然后以此为鉴，避免掉入前人的坑。\n\n万历皇帝是从小在张居正的陪伴下成长起来的。由于年龄太小，每次临朝时还需要在衣袖里抽出一张别人事先为他书写的纸片，边看边答复各个官员的呈奏请示。在那时候他看来，张先生似乎永远就是智慧的象征，他的意见就代表了自己的旨意。\n\n万历十年，在张居正的努力下,国库日见充实，外部倭寇也已绝迹，成就了万历王朝欣欣向荣的十年。但也正是因为张居正位高权重，凡有弹劾张居正的官员都遭到了惩处。他的儿子在科举中分别中了状元，榜眼，引起了普遍的质疑，但他毫不在意。\n\n1582年，张居正长逝，他死时，北京的粮仓装满了够吃9年的粮食，府库里也堆满了银子。但也就在张居正仅去世半年后，反张派开始揭发事实，制造舆论，使他的形象逐渐变得虚伪和毒辣。这一切都让年轻的皇帝感到他对张居正的信任是一种错误。2年后，张居正被抄家了。\n\n万历二十年，宁夏副总兵哱拜叛变，为了对付叛乱，皇帝从北方辽东，山西等地调集军队进行镇压。这次军事行动花费了一百八十万两白银。同一年，明政府发兵抗击日本丰臣秀吉政权入侵朝鲜，花费七百八十万两。8年后，苗疆土司杨应龙叛乱，政府再次出兵镇压。史书记载：这三场战役为“万历三大征”，巩固了中华疆土，维护了明朝在东亚的主导地位。但国家财政的赤字已经达到了一百万两，而且年年赤字。这时，皇帝开始利用张居正留下的税务系统进行加税，勉强渡过难关。但随后在后金王朝的连绵进攻下，多次加税筹集军饷调遣军队，最终导致了民间经济的奔溃，出现大饥荒，带来了造反潮。\n\n古语有云：知史以明鉴，查古以至今。从万历角度来看，作为皇帝，一定要有自己的主见，对事情要自己的清晰看法，不能过于听信他人的看法。做事情去权衡各方的利益，去协调各方。\n\n从张居正角度来看，张居正一方面通过改革税法让政府收入大幅增加，成就明朝最富裕的十年，另一方面其在位权力过于庞大，排除异己，死后遭到抄家。我从中可以知道两点，第一点，权力要受到监管。第二点，很多事和人都是由黑与白交织成的灰色。从不同的方面看出来的颜色也不同。\n\n从国家角度来说，其实打仗就是伤敌一千，自损八百的事。就算打赢了胜仗，宣告了国家的主权地位，但国家的经费也会大大消耗。当国家财政无法支撑军饷时，政府就会想办法在民间获取经济来源，导致老百姓的日子跟着受苦。\n\n虽说明朝距离我们现在已有五六百年时间了，但历史事件背后的逻辑依然在当今出现。我想读史，给我最大的感受就是运用发现了现在的一些事情怎么和历史上的事情这么相似，这时去套用历史的逻辑去看现在的事情，会有新的发现。","source":"_posts/读书/万历王朝的兴衰史.md","raw":"---\ntitle: 万历王朝的兴衰史\nauthor: Zhang Peng\ntags:\n  - 读书\ncategories: []\ndate: 2018-12-23 17:56:00\n---\n\n最近读了有关历史有关的书籍，发现万历王朝的兴衰，与当朝的皇帝和辅臣有关系。我想基于此，可以去凭借后人写的史书去分析一下这个王朝的兴衰。然后以此为鉴，避免掉入前人的坑。\n\n万历皇帝是从小在张居正的陪伴下成长起来的。由于年龄太小，每次临朝时还需要在衣袖里抽出一张别人事先为他书写的纸片，边看边答复各个官员的呈奏请示。在那时候他看来，张先生似乎永远就是智慧的象征，他的意见就代表了自己的旨意。\n\n万历十年，在张居正的努力下,国库日见充实，外部倭寇也已绝迹，成就了万历王朝欣欣向荣的十年。但也正是因为张居正位高权重，凡有弹劾张居正的官员都遭到了惩处。他的儿子在科举中分别中了状元，榜眼，引起了普遍的质疑，但他毫不在意。\n\n1582年，张居正长逝，他死时，北京的粮仓装满了够吃9年的粮食，府库里也堆满了银子。但也就在张居正仅去世半年后，反张派开始揭发事实，制造舆论，使他的形象逐渐变得虚伪和毒辣。这一切都让年轻的皇帝感到他对张居正的信任是一种错误。2年后，张居正被抄家了。\n\n万历二十年，宁夏副总兵哱拜叛变，为了对付叛乱，皇帝从北方辽东，山西等地调集军队进行镇压。这次军事行动花费了一百八十万两白银。同一年，明政府发兵抗击日本丰臣秀吉政权入侵朝鲜，花费七百八十万两。8年后，苗疆土司杨应龙叛乱，政府再次出兵镇压。史书记载：这三场战役为“万历三大征”，巩固了中华疆土，维护了明朝在东亚的主导地位。但国家财政的赤字已经达到了一百万两，而且年年赤字。这时，皇帝开始利用张居正留下的税务系统进行加税，勉强渡过难关。但随后在后金王朝的连绵进攻下，多次加税筹集军饷调遣军队，最终导致了民间经济的奔溃，出现大饥荒，带来了造反潮。\n\n古语有云：知史以明鉴，查古以至今。从万历角度来看，作为皇帝，一定要有自己的主见，对事情要自己的清晰看法，不能过于听信他人的看法。做事情去权衡各方的利益，去协调各方。\n\n从张居正角度来看，张居正一方面通过改革税法让政府收入大幅增加，成就明朝最富裕的十年，另一方面其在位权力过于庞大，排除异己，死后遭到抄家。我从中可以知道两点，第一点，权力要受到监管。第二点，很多事和人都是由黑与白交织成的灰色。从不同的方面看出来的颜色也不同。\n\n从国家角度来说，其实打仗就是伤敌一千，自损八百的事。就算打赢了胜仗，宣告了国家的主权地位，但国家的经费也会大大消耗。当国家财政无法支撑军饷时，政府就会想办法在民间获取经济来源，导致老百姓的日子跟着受苦。\n\n虽说明朝距离我们现在已有五六百年时间了，但历史事件背后的逻辑依然在当今出现。我想读史，给我最大的感受就是运用发现了现在的一些事情怎么和历史上的事情这么相似，这时去套用历史的逻辑去看现在的事情，会有新的发现。","slug":"读书/万历王朝的兴衰史","published":1,"updated":"2019-04-28T07:04:47.621Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjv0ur0oq001nbwwik0gko9co","content":"<p>最近读了有关历史有关的书籍，发现万历王朝的兴衰，与当朝的皇帝和辅臣有关系。我想基于此，可以去凭借后人写的史书去分析一下这个王朝的兴衰。然后以此为鉴，避免掉入前人的坑。</p>\n<p>万历皇帝是从小在张居正的陪伴下成长起来的。由于年龄太小，每次临朝时还需要在衣袖里抽出一张别人事先为他书写的纸片，边看边答复各个官员的呈奏请示。在那时候他看来，张先生似乎永远就是智慧的象征，他的意见就代表了自己的旨意。</p>\n<p>万历十年，在张居正的努力下,国库日见充实，外部倭寇也已绝迹，成就了万历王朝欣欣向荣的十年。但也正是因为张居正位高权重，凡有弹劾张居正的官员都遭到了惩处。他的儿子在科举中分别中了状元，榜眼，引起了普遍的质疑，但他毫不在意。</p>\n<p>1582年，张居正长逝，他死时，北京的粮仓装满了够吃9年的粮食，府库里也堆满了银子。但也就在张居正仅去世半年后，反张派开始揭发事实，制造舆论，使他的形象逐渐变得虚伪和毒辣。这一切都让年轻的皇帝感到他对张居正的信任是一种错误。2年后，张居正被抄家了。</p>\n<p>万历二十年，宁夏副总兵哱拜叛变，为了对付叛乱，皇帝从北方辽东，山西等地调集军队进行镇压。这次军事行动花费了一百八十万两白银。同一年，明政府发兵抗击日本丰臣秀吉政权入侵朝鲜，花费七百八十万两。8年后，苗疆土司杨应龙叛乱，政府再次出兵镇压。史书记载：这三场战役为“万历三大征”，巩固了中华疆土，维护了明朝在东亚的主导地位。但国家财政的赤字已经达到了一百万两，而且年年赤字。这时，皇帝开始利用张居正留下的税务系统进行加税，勉强渡过难关。但随后在后金王朝的连绵进攻下，多次加税筹集军饷调遣军队，最终导致了民间经济的奔溃，出现大饥荒，带来了造反潮。</p>\n<p>古语有云：知史以明鉴，查古以至今。从万历角度来看，作为皇帝，一定要有自己的主见，对事情要自己的清晰看法，不能过于听信他人的看法。做事情去权衡各方的利益，去协调各方。</p>\n<p>从张居正角度来看，张居正一方面通过改革税法让政府收入大幅增加，成就明朝最富裕的十年，另一方面其在位权力过于庞大，排除异己，死后遭到抄家。我从中可以知道两点，第一点，权力要受到监管。第二点，很多事和人都是由黑与白交织成的灰色。从不同的方面看出来的颜色也不同。</p>\n<p>从国家角度来说，其实打仗就是伤敌一千，自损八百的事。就算打赢了胜仗，宣告了国家的主权地位，但国家的经费也会大大消耗。当国家财政无法支撑军饷时，政府就会想办法在民间获取经济来源，导致老百姓的日子跟着受苦。</p>\n<p>虽说明朝距离我们现在已有五六百年时间了，但历史事件背后的逻辑依然在当今出现。我想读史，给我最大的感受就是运用发现了现在的一些事情怎么和历史上的事情这么相似，这时去套用历史的逻辑去看现在的事情，会有新的发现。</p>\n","site":{"data":{}},"excerpt":"","more":"<p>最近读了有关历史有关的书籍，发现万历王朝的兴衰，与当朝的皇帝和辅臣有关系。我想基于此，可以去凭借后人写的史书去分析一下这个王朝的兴衰。然后以此为鉴，避免掉入前人的坑。</p>\n<p>万历皇帝是从小在张居正的陪伴下成长起来的。由于年龄太小，每次临朝时还需要在衣袖里抽出一张别人事先为他书写的纸片，边看边答复各个官员的呈奏请示。在那时候他看来，张先生似乎永远就是智慧的象征，他的意见就代表了自己的旨意。</p>\n<p>万历十年，在张居正的努力下,国库日见充实，外部倭寇也已绝迹，成就了万历王朝欣欣向荣的十年。但也正是因为张居正位高权重，凡有弹劾张居正的官员都遭到了惩处。他的儿子在科举中分别中了状元，榜眼，引起了普遍的质疑，但他毫不在意。</p>\n<p>1582年，张居正长逝，他死时，北京的粮仓装满了够吃9年的粮食，府库里也堆满了银子。但也就在张居正仅去世半年后，反张派开始揭发事实，制造舆论，使他的形象逐渐变得虚伪和毒辣。这一切都让年轻的皇帝感到他对张居正的信任是一种错误。2年后，张居正被抄家了。</p>\n<p>万历二十年，宁夏副总兵哱拜叛变，为了对付叛乱，皇帝从北方辽东，山西等地调集军队进行镇压。这次军事行动花费了一百八十万两白银。同一年，明政府发兵抗击日本丰臣秀吉政权入侵朝鲜，花费七百八十万两。8年后，苗疆土司杨应龙叛乱，政府再次出兵镇压。史书记载：这三场战役为“万历三大征”，巩固了中华疆土，维护了明朝在东亚的主导地位。但国家财政的赤字已经达到了一百万两，而且年年赤字。这时，皇帝开始利用张居正留下的税务系统进行加税，勉强渡过难关。但随后在后金王朝的连绵进攻下，多次加税筹集军饷调遣军队，最终导致了民间经济的奔溃，出现大饥荒，带来了造反潮。</p>\n<p>古语有云：知史以明鉴，查古以至今。从万历角度来看，作为皇帝，一定要有自己的主见，对事情要自己的清晰看法，不能过于听信他人的看法。做事情去权衡各方的利益，去协调各方。</p>\n<p>从张居正角度来看，张居正一方面通过改革税法让政府收入大幅增加，成就明朝最富裕的十年，另一方面其在位权力过于庞大，排除异己，死后遭到抄家。我从中可以知道两点，第一点，权力要受到监管。第二点，很多事和人都是由黑与白交织成的灰色。从不同的方面看出来的颜色也不同。</p>\n<p>从国家角度来说，其实打仗就是伤敌一千，自损八百的事。就算打赢了胜仗，宣告了国家的主权地位，但国家的经费也会大大消耗。当国家财政无法支撑军饷时，政府就会想办法在民间获取经济来源，导致老百姓的日子跟着受苦。</p>\n<p>虽说明朝距离我们现在已有五六百年时间了，但历史事件背后的逻辑依然在当今出现。我想读史，给我最大的感受就是运用发现了现在的一些事情怎么和历史上的事情这么相似，这时去套用历史的逻辑去看现在的事情，会有新的发现。</p>\n"},{"layout":"post","title":"区块链初认识","date":"2017-11-20T06:58:00.000Z","comments":1,"reward":true,"_content":"\n读自：[区块链技术指南](https://www.gitbook.com/book/yeasy/blockchain_guide/details)\n\n我现在的理解来说区块链就是去中心化的分布式记账系统，只可能添加记录，发生过的记录都不可篡改。\n\n比特币是基于区块链技术的一种应用，其中都会涉及到密码学，博弈论，记账技术，分布式系统。\n\n关于博弈论，书中有个有趣的例子。\n\n<!--more--> \n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1k5mhmnj20r4088acj.jpg)","source":"_posts/读书/区块链初认识.md","raw":"---\nlayout: post\ntitle: \"区块链初认识\"\ndate: 2017-11-20 14:58\ncomments: true\nreward: true\ntags: \n\t- 读书\n---\n\n读自：[区块链技术指南](https://www.gitbook.com/book/yeasy/blockchain_guide/details)\n\n我现在的理解来说区块链就是去中心化的分布式记账系统，只可能添加记录，发生过的记录都不可篡改。\n\n比特币是基于区块链技术的一种应用，其中都会涉及到密码学，博弈论，记账技术，分布式系统。\n\n关于博弈论，书中有个有趣的例子。\n\n<!--more--> \n\n![](http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1k5mhmnj20r4088acj.jpg)","slug":"读书/区块链初认识","published":1,"updated":"2019-04-28T07:04:47.623Z","photos":[],"link":"","_id":"cjv0ur0ot001pbwwi6rgip6me","content":"<p>读自：<a href=\"https://www.gitbook.com/book/yeasy/blockchain_guide/details\" target=\"_blank\" rel=\"noopener\">区块链技术指南</a></p>\n<p>我现在的理解来说区块链就是去中心化的分布式记账系统，只可能添加记录，发生过的记录都不可篡改。</p>\n<p>比特币是基于区块链技术的一种应用，其中都会涉及到密码学，博弈论，记账技术，分布式系统。</p>\n<p>关于博弈论，书中有个有趣的例子。</p>\n<a id=\"more\"></a> \n<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1k5mhmnj20r4088acj.jpg\" alt></p>\n","site":{"data":{}},"excerpt":"<p>读自：<a href=\"https://www.gitbook.com/book/yeasy/blockchain_guide/details\" target=\"_blank\" rel=\"noopener\">区块链技术指南</a></p>\n<p>我现在的理解来说区块链就是去中心化的分布式记账系统，只可能添加记录，发生过的记录都不可篡改。</p>\n<p>比特币是基于区块链技术的一种应用，其中都会涉及到密码学，博弈论，记账技术，分布式系统。</p>\n<p>关于博弈论，书中有个有趣的例子。</p>","more":"<p><img src=\"http://ww1.sinaimg.cn/large/aacc02d8ly1fxv1k5mhmnj20r4088acj.jpg\" alt></p>"}],"PostAsset":[],"PostCategory":[],"PostTag":[{"post_id":"cjv0ur0g20002bwwin3n3hoik","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gf000bbwwit0bmw3ul"},{"post_id":"cjv0ur0gd0009bwwiozyjmvyd","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gh000dbwwiihfu2766"},{"post_id":"cjv0ur0gf000cbwwiicjrmpdb","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gj000gbwwiu07i2n5y"},{"post_id":"cjv0ur0g50004bwwisr7pk0k1","tag_id":"cjv0ur0ge000abwwi7e7q9lfy","_id":"cjv0ur0gk000ibwwic8vilwa2"},{"post_id":"cjv0ur0gh000ebwwizhd12wwz","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gm000lbwwi3pboqfx9"},{"post_id":"cjv0ur0g90007bwwijyhpui9b","tag_id":"cjv0ur0gj000fbwwihj9f62im","_id":"cjv0ur0gn000nbwwi4lqj7dx9"},{"post_id":"cjv0ur0gk000jbwwij8mq4v73","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gp000qbwwihjbf9l2u"},{"post_id":"cjv0ur0gb0008bwwiw9bd46ys","tag_id":"cjv0ur0gl000kbwwikbq6nrht","_id":"cjv0ur0gp000rbwwi3bmaloog"},{"post_id":"cjv0ur0gn000obwwiy0hs2vgs","tag_id":"cjv0ur0g70006bwwiymizdcrc","_id":"cjv0ur0gp000sbwwi7rt0s6pz"},{"post_id":"cjv0ur0gj000hbwwi9kvqgk8m","tag_id":"cjv0ur0go000pbwwiai9a3nje","_id":"cjv0ur0gq000ubwwi6k1hdx0o"},{"post_id":"cjv0ur0gm000mbwwixr7lycga","tag_id":"cjv0ur0gq000tbwwi5y9n8k8y","_id":"cjv0ur0gq000vbwwi2xmzcy2r"},{"post_id":"cjv0ur0nz0010bwwiwgw53p7z","tag_id":"cjv0ur0gl000kbwwikbq6nrht","_id":"cjv0ur0o30013bwwi41m0bvze"},{"post_id":"cjv0ur0nz0010bwwiwgw53p7z","tag_id":"cjv0ur0ny000ybwwihum0qstu","_id":"cjv0ur0o50015bwwifdh1gco1"},{"post_id":"cjv0ur0nw000wbwwil78jyjah","tag_id":"cjv0ur0ny000ybwwihum0qstu","_id":"cjv0ur0o80018bwwi4dctkhy7"},{"post_id":"cjv0ur0o10011bwwiifcsaoz5","tag_id":"cjv0ur0ny000ybwwihum0qstu","_id":"cjv0ur0oa001abwwiua9e2qjw"},{"post_id":"cjv0ur0o40014bwwios9tmkyl","tag_id":"cjv0ur0go000pbwwiai9a3nje","_id":"cjv0ur0of001cbwwiuu9nry0m"},{"post_id":"cjv0ur0nx000xbwwipz9prnby","tag_id":"cjv0ur0ny000ybwwihum0qstu","_id":"cjv0ur0oi001fbwwi3str4jd8"},{"post_id":"cjv0ur0o50016bwwiy1d2e3oe","tag_id":"cjv0ur0go000pbwwiai9a3nje","_id":"cjv0ur0oj001hbwwiex6uaway"},{"post_id":"cjv0ur0o80019bwwiuvwkwpmt","tag_id":"cjv0ur0go000pbwwiai9a3nje","_id":"cjv0ur0on001jbwwido2bhxmj"},{"post_id":"cjv0ur0ny000zbwwid3nnhhi9","tag_id":"cjv0ur0ny000ybwwihum0qstu","_id":"cjv0ur0oq001mbwwil6r543kc"},{"post_id":"cjv0ur0ob001bbwwij7ki6i2a","tag_id":"cjv0ur0oi001ebwwi1oq1f07s","_id":"cjv0ur0ot001obwwixrzktbpp"},{"post_id":"cjv0ur0on001kbwwib39f3h3d","tag_id":"cjv0ur0gj000fbwwihj9f62im","_id":"cjv0ur0ox001rbwwiwql5epsl"},{"post_id":"cjv0ur0of001dbwwilobldb4b","tag_id":"cjv0ur0oi001ebwwi1oq1f07s","_id":"cjv0ur0ox001sbwwi3xbmxreq"},{"post_id":"cjv0ur0oi001gbwwiyjakxhjk","tag_id":"cjv0ur0ow001qbwwi3y4s6yvr","_id":"cjv0ur0oz001ubwwi3okmz3u8"},{"post_id":"cjv0ur0ok001ibwwijcvhyb4w","tag_id":"cjv0ur0ow001qbwwi3y4s6yvr","_id":"cjv0ur0p0001wbwwid9gy2spc"},{"post_id":"cjv0ur0oq001nbwwik0gko9co","tag_id":"cjv0ur0oz001vbwwi25q32ako","_id":"cjv0ur0p0001ybwwi6f7mzrhm"},{"post_id":"cjv0ur0ot001pbwwi6rgip6me","tag_id":"cjv0ur0oz001vbwwi25q32ako","_id":"cjv0ur0p1001zbwwi4813ks6q"}],"Tag":[{"name":"校招","_id":"cjv0ur0g70006bwwiymizdcrc"},{"name":"计算机网络","_id":"cjv0ur0ge000abwwi7e7q9lfy"},{"name":"生活","_id":"cjv0ur0gj000fbwwihj9f62im"},{"name":"leetcode","_id":"cjv0ur0gl000kbwwikbq6nrht"},{"name":"JAVA","_id":"cjv0ur0go000pbwwiai9a3nje"},{"name":"个人提升","_id":"cjv0ur0gq000tbwwi5y9n8k8y"},{"name":"C++","_id":"cjv0ur0ny000ybwwihum0qstu"},{"name":"TED","_id":"cjv0ur0oi001ebwwi1oq1f07s"},{"name":"前端","_id":"cjv0ur0ow001qbwwi3y4s6yvr"},{"name":"读书","_id":"cjv0ur0oz001vbwwi25q32ako"}]}}